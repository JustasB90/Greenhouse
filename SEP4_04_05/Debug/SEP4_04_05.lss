
SEP4_04_05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000054a  00800200  000076fa  0000778e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000076fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000286  0080074a  0080074a  00007cd8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007cd8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a80  00000000  00000000  00007d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009fd0  00000000  00000000  000087f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002d4e  00000000  00000000  000127c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000068cf  00000000  00000000  00015512  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002504  00000000  00000000  0001bde4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e1a  00000000  00000000  0001e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000065a1  00000000  00000000  00022102  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  000286a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	77 c1       	rjmp	.+750    	; 0x2f0 <__ctors_end>
       2:	00 00       	nop
       4:	96 c1       	rjmp	.+812    	; 0x332 <__bad_interrupt>
       6:	00 00       	nop
       8:	94 c1       	rjmp	.+808    	; 0x332 <__bad_interrupt>
       a:	00 00       	nop
       c:	92 c1       	rjmp	.+804    	; 0x332 <__bad_interrupt>
       e:	00 00       	nop
      10:	90 c1       	rjmp	.+800    	; 0x332 <__bad_interrupt>
      12:	00 00       	nop
      14:	8e c1       	rjmp	.+796    	; 0x332 <__bad_interrupt>
      16:	00 00       	nop
      18:	8c c1       	rjmp	.+792    	; 0x332 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8a c1       	rjmp	.+788    	; 0x332 <__bad_interrupt>
      1e:	00 00       	nop
      20:	88 c1       	rjmp	.+784    	; 0x332 <__bad_interrupt>
      22:	00 00       	nop
      24:	86 c1       	rjmp	.+780    	; 0x332 <__bad_interrupt>
      26:	00 00       	nop
      28:	84 c1       	rjmp	.+776    	; 0x332 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	82 c1       	rjmp	.+772    	; 0x332 <__bad_interrupt>
      2e:	00 00       	nop
      30:	3e c6       	rjmp	.+3196   	; 0xcae <__vector_12>
      32:	00 00       	nop
      34:	7e c1       	rjmp	.+764    	; 0x332 <__bad_interrupt>
      36:	00 00       	nop
      38:	7c c1       	rjmp	.+760    	; 0x332 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	7a c1       	rjmp	.+756    	; 0x332 <__bad_interrupt>
      3e:	00 00       	nop
      40:	78 c1       	rjmp	.+752    	; 0x332 <__bad_interrupt>
      42:	00 00       	nop
      44:	76 c1       	rjmp	.+748    	; 0x332 <__bad_interrupt>
      46:	00 00       	nop
      48:	74 c1       	rjmp	.+744    	; 0x332 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	72 c1       	rjmp	.+740    	; 0x332 <__bad_interrupt>
      4e:	00 00       	nop
      50:	70 c1       	rjmp	.+736    	; 0x332 <__bad_interrupt>
      52:	00 00       	nop
      54:	6e c1       	rjmp	.+732    	; 0x332 <__bad_interrupt>
      56:	00 00       	nop
      58:	6c c1       	rjmp	.+728    	; 0x332 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	6a c1       	rjmp	.+724    	; 0x332 <__bad_interrupt>
      5e:	00 00       	nop
      60:	68 c1       	rjmp	.+720    	; 0x332 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 3a 28 	jmp	0x5074	; 0x5074 <__vector_25>
      68:	0c 94 8c 28 	jmp	0x5118	; 0x5118 <__vector_26>
      6c:	62 c1       	rjmp	.+708    	; 0x332 <__bad_interrupt>
      6e:	00 00       	nop
      70:	60 c1       	rjmp	.+704    	; 0x332 <__bad_interrupt>
      72:	00 00       	nop
      74:	5e c1       	rjmp	.+700    	; 0x332 <__bad_interrupt>
      76:	00 00       	nop
      78:	5c c1       	rjmp	.+696    	; 0x332 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	5a c1       	rjmp	.+692    	; 0x332 <__bad_interrupt>
      7e:	00 00       	nop
      80:	58 c1       	rjmp	.+688    	; 0x332 <__bad_interrupt>
      82:	00 00       	nop
      84:	56 c1       	rjmp	.+684    	; 0x332 <__bad_interrupt>
      86:	00 00       	nop
      88:	54 c1       	rjmp	.+680    	; 0x332 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	52 c1       	rjmp	.+676    	; 0x332 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 d0 28 	jmp	0x51a0	; 0x51a0 <__vector_36>
      94:	0c 94 22 29 	jmp	0x5244	; 0x5244 <__vector_37>
      98:	4c c1       	rjmp	.+664    	; 0x332 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 78 32 	jmp	0x64f0	; 0x64f0 <__vector_39>
      a0:	48 c1       	rjmp	.+656    	; 0x332 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	46 c1       	rjmp	.+652    	; 0x332 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	44 c1       	rjmp	.+648    	; 0x332 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	42 c1       	rjmp	.+644    	; 0x332 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	40 c1       	rjmp	.+640    	; 0x332 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	3e c1       	rjmp	.+636    	; 0x332 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	3c c1       	rjmp	.+632    	; 0x332 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	3a c1       	rjmp	.+628    	; 0x332 <__bad_interrupt>
      be:	00 00       	nop
      c0:	38 c1       	rjmp	.+624    	; 0x332 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	36 c1       	rjmp	.+620    	; 0x332 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	34 c1       	rjmp	.+616    	; 0x332 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__vector_51>
      d0:	0c 94 b8 29 	jmp	0x5370	; 0x5370 <__vector_52>
      d4:	2e c1       	rjmp	.+604    	; 0x332 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 fc 29 	jmp	0x53f8	; 0x53f8 <__vector_54>
      dc:	0c 94 4e 2a 	jmp	0x549c	; 0x549c <__vector_55>
      e0:	28 c1       	rjmp	.+592    	; 0x332 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	75 1f       	adc	r23, r21
      e6:	75 1f       	adc	r23, r21
      e8:	75 1f       	adc	r23, r21
      ea:	c0 1f       	adc	r28, r16
      ec:	cc 1f       	adc	r28, r28
      ee:	f2 1f       	adc	r31, r18
      f0:	75 1f       	adc	r23, r21
      f2:	75 1f       	adc	r23, r21
      f4:	c0 1f       	adc	r28, r16
      f6:	cc 1f       	adc	r28, r28
      f8:	9a 32       	cpi	r25, 0x2A	; 42
      fa:	0a 33       	cpi	r16, 0x3A	; 58
      fc:	0a 33       	cpi	r16, 0x3A	; 58
      fe:	0a 33       	cpi	r16, 0x3A	; 58
     100:	0a 33       	cpi	r16, 0x3A	; 58
     102:	0a 33       	cpi	r16, 0x3A	; 58
     104:	0a 33       	cpi	r16, 0x3A	; 58
     106:	0a 33       	cpi	r16, 0x3A	; 58
     108:	9a 32       	cpi	r25, 0x2A	; 42
     10a:	0a 33       	cpi	r16, 0x3A	; 58
     10c:	0a 33       	cpi	r16, 0x3A	; 58
     10e:	0a 33       	cpi	r16, 0x3A	; 58
     110:	0a 33       	cpi	r16, 0x3A	; 58
     112:	0a 33       	cpi	r16, 0x3A	; 58
     114:	0a 33       	cpi	r16, 0x3A	; 58
     116:	0a 33       	cpi	r16, 0x3A	; 58
     118:	9c 32       	cpi	r25, 0x2C	; 44
     11a:	0a 33       	cpi	r16, 0x3A	; 58
     11c:	0a 33       	cpi	r16, 0x3A	; 58
     11e:	0a 33       	cpi	r16, 0x3A	; 58
     120:	0a 33       	cpi	r16, 0x3A	; 58
     122:	0a 33       	cpi	r16, 0x3A	; 58
     124:	0a 33       	cpi	r16, 0x3A	; 58
     126:	0a 33       	cpi	r16, 0x3A	; 58
     128:	0a 33       	cpi	r16, 0x3A	; 58
     12a:	0a 33       	cpi	r16, 0x3A	; 58
     12c:	0a 33       	cpi	r16, 0x3A	; 58
     12e:	0a 33       	cpi	r16, 0x3A	; 58
     130:	0a 33       	cpi	r16, 0x3A	; 58
     132:	0a 33       	cpi	r16, 0x3A	; 58
     134:	0a 33       	cpi	r16, 0x3A	; 58
     136:	0a 33       	cpi	r16, 0x3A	; 58
     138:	9c 32       	cpi	r25, 0x2C	; 44
     13a:	0a 33       	cpi	r16, 0x3A	; 58
     13c:	0a 33       	cpi	r16, 0x3A	; 58
     13e:	0a 33       	cpi	r16, 0x3A	; 58
     140:	0a 33       	cpi	r16, 0x3A	; 58
     142:	0a 33       	cpi	r16, 0x3A	; 58
     144:	0a 33       	cpi	r16, 0x3A	; 58
     146:	0a 33       	cpi	r16, 0x3A	; 58
     148:	0a 33       	cpi	r16, 0x3A	; 58
     14a:	0a 33       	cpi	r16, 0x3A	; 58
     14c:	0a 33       	cpi	r16, 0x3A	; 58
     14e:	0a 33       	cpi	r16, 0x3A	; 58
     150:	0a 33       	cpi	r16, 0x3A	; 58
     152:	0a 33       	cpi	r16, 0x3A	; 58
     154:	0a 33       	cpi	r16, 0x3A	; 58
     156:	0a 33       	cpi	r16, 0x3A	; 58
     158:	06 33       	cpi	r16, 0x36	; 54
     15a:	0a 33       	cpi	r16, 0x3A	; 58
     15c:	0a 33       	cpi	r16, 0x3A	; 58
     15e:	0a 33       	cpi	r16, 0x3A	; 58
     160:	0a 33       	cpi	r16, 0x3A	; 58
     162:	0a 33       	cpi	r16, 0x3A	; 58
     164:	0a 33       	cpi	r16, 0x3A	; 58
     166:	0a 33       	cpi	r16, 0x3A	; 58
     168:	d1 32       	cpi	r29, 0x21	; 33
     16a:	0a 33       	cpi	r16, 0x3A	; 58
     16c:	0a 33       	cpi	r16, 0x3A	; 58
     16e:	0a 33       	cpi	r16, 0x3A	; 58
     170:	0a 33       	cpi	r16, 0x3A	; 58
     172:	0a 33       	cpi	r16, 0x3A	; 58
     174:	0a 33       	cpi	r16, 0x3A	; 58
     176:	0a 33       	cpi	r16, 0x3A	; 58
     178:	0a 33       	cpi	r16, 0x3A	; 58
     17a:	0a 33       	cpi	r16, 0x3A	; 58
     17c:	0a 33       	cpi	r16, 0x3A	; 58
     17e:	0a 33       	cpi	r16, 0x3A	; 58
     180:	0a 33       	cpi	r16, 0x3A	; 58
     182:	0a 33       	cpi	r16, 0x3A	; 58
     184:	0a 33       	cpi	r16, 0x3A	; 58
     186:	0a 33       	cpi	r16, 0x3A	; 58
     188:	c5 32       	cpi	r28, 0x25	; 37
     18a:	0a 33       	cpi	r16, 0x3A	; 58
     18c:	0a 33       	cpi	r16, 0x3A	; 58
     18e:	0a 33       	cpi	r16, 0x3A	; 58
     190:	0a 33       	cpi	r16, 0x3A	; 58
     192:	0a 33       	cpi	r16, 0x3A	; 58
     194:	0a 33       	cpi	r16, 0x3A	; 58
     196:	0a 33       	cpi	r16, 0x3A	; 58
     198:	e9 32       	cpi	r30, 0x29	; 41

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	9a 83       	std	Y+2, r25	; 0x02
     2aa:	89 83       	std	Y+1, r24	; 0x01
     2ac:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <prvCheckTasksWaitingTermination>
     2b0:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <pxReadyTasksLists>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <prvIdleTask+0x1e>
     2b8:	0f d4       	rcall	.+2078   	; 0xad8 <vPortYield>
     2ba:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <vApplicationIdleHook>
     2be:	f6 cf       	rjmp	.-20     	; 0x2ac <prvIdleTask+0x10>

000002c0 <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
     2c0:	cf 93       	push	r28
     2c2:	df 93       	push	r29
     2c4:	00 d0       	rcall	.+0      	; 0x2c6 <prvTimerTask+0x6>
     2c6:	1f 92       	push	r1
     2c8:	1f 92       	push	r1
     2ca:	cd b7       	in	r28, 0x3d	; 61
     2cc:	de b7       	in	r29, 0x3e	; 62
     2ce:	9d 83       	std	Y+5, r25	; 0x05
     2d0:	8c 83       	std	Y+4, r24	; 0x04
     2d2:	ce 01       	movw	r24, r28
     2d4:	03 96       	adiw	r24, 0x03	; 3
     2d6:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <prvGetNextExpireTime>
     2da:	9a 83       	std	Y+2, r25	; 0x02
     2dc:	89 83       	std	Y+1, r24	; 0x01
     2de:	2b 81       	ldd	r18, Y+3	; 0x03
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	9a 81       	ldd	r25, Y+2	; 0x02
     2e4:	62 2f       	mov	r22, r18
     2e6:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <prvProcessTimerOrBlockTask>
     2ea:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <prvProcessReceivedCommands>
     2ee:	f1 cf       	rjmp	.-30     	; 0x2d2 <prvTimerTask+0x12>

000002f0 <__ctors_end>:
     2f0:	11 24       	eor	r1, r1
     2f2:	1f be       	out	0x3f, r1	; 63
     2f4:	cf ef       	ldi	r28, 0xFF	; 255
     2f6:	d1 e2       	ldi	r29, 0x21	; 33
     2f8:	de bf       	out	0x3e, r29	; 62
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	00 e0       	ldi	r16, 0x00	; 0
     2fe:	0c bf       	out	0x3c, r16	; 60

00000300 <__do_copy_data>:
     300:	17 e0       	ldi	r17, 0x07	; 7
     302:	a0 e0       	ldi	r26, 0x00	; 0
     304:	b2 e0       	ldi	r27, 0x02	; 2
     306:	ea ef       	ldi	r30, 0xFA	; 250
     308:	f6 e7       	ldi	r31, 0x76	; 118
     30a:	00 e0       	ldi	r16, 0x00	; 0
     30c:	0b bf       	out	0x3b, r16	; 59
     30e:	02 c0       	rjmp	.+4      	; 0x314 <__do_copy_data+0x14>
     310:	07 90       	elpm	r0, Z+
     312:	0d 92       	st	X+, r0
     314:	aa 34       	cpi	r26, 0x4A	; 74
     316:	b1 07       	cpc	r27, r17
     318:	d9 f7       	brne	.-10     	; 0x310 <__do_copy_data+0x10>

0000031a <__do_clear_bss>:
     31a:	29 e0       	ldi	r18, 0x09	; 9
     31c:	aa e4       	ldi	r26, 0x4A	; 74
     31e:	b7 e0       	ldi	r27, 0x07	; 7
     320:	01 c0       	rjmp	.+2      	; 0x324 <.do_clear_bss_start>

00000322 <.do_clear_bss_loop>:
     322:	1d 92       	st	X+, r1

00000324 <.do_clear_bss_start>:
     324:	a0 3d       	cpi	r26, 0xD0	; 208
     326:	b2 07       	cpc	r27, r18
     328:	e1 f7       	brne	.-8      	; 0x322 <.do_clear_bss_loop>
     32a:	0e 94 78 25 	call	0x4af0	; 0x4af0 <main>
     32e:	0c 94 7b 3b 	jmp	0x76f6	; 0x76f6 <_exit>

00000332 <__bad_interrupt>:
     332:	66 ce       	rjmp	.-820    	; 0x0 <__vectors>

00000334 <task_switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_in(uint8_t task_no) {
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	1f 92       	push	r1
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	89 83       	std	Y+1, r24	; 0x01
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     340:	88 e0       	ldi	r24, 0x08	; 8
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	28 e0       	ldi	r18, 0x08	; 8
     346:	31 e0       	ldi	r19, 0x01	; 1
     348:	f9 01       	movw	r30, r18
     34a:	20 81       	ld	r18, Z
     34c:	20 7f       	andi	r18, 0xF0	; 240
     34e:	fc 01       	movw	r30, r24
     350:	20 83       	st	Z, r18
		 PORTK |= (task_no & 0b00001111);
     352:	88 e0       	ldi	r24, 0x08	; 8
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	28 e0       	ldi	r18, 0x08	; 8
     358:	31 e0       	ldi	r19, 0x01	; 1
     35a:	f9 01       	movw	r30, r18
     35c:	20 81       	ld	r18, Z
     35e:	32 2f       	mov	r19, r18
     360:	29 81       	ldd	r18, Y+1	; 0x01
     362:	2f 70       	andi	r18, 0x0F	; 15
     364:	23 2b       	or	r18, r19
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
		 #endif
	}
     36a:	00 00       	nop
     36c:	0f 90       	pop	r0
     36e:	df 91       	pop	r29
     370:	cf 91       	pop	r28
     372:	08 95       	ret

00000374 <task_switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_out(uint8_t task_no) {
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	1f 92       	push	r1
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	89 83       	std	Y+1, r24	; 0x01
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	28 e0       	ldi	r18, 0x08	; 8
     386:	31 e0       	ldi	r19, 0x01	; 1
     388:	f9 01       	movw	r30, r18
     38a:	20 81       	ld	r18, Z
     38c:	20 7f       	andi	r18, 0xF0	; 240
     38e:	fc 01       	movw	r30, r24
     390:	20 83       	st	Z, r18
		#endif
	}
     392:	00 00       	nop
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	00 d0       	rcall	.+0      	; 0x3a2 <pvPortMalloc+0x6>
     3a2:	1f 92       	push	r1
     3a4:	cd b7       	in	r28, 0x3d	; 61
     3a6:	de b7       	in	r29, 0x3e	; 62
     3a8:	9c 83       	std	Y+4, r25	; 0x04
     3aa:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn;

    vTaskSuspendAll();
     3ac:	0e 94 54 13 	call	0x26a8	; 0x26a8 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     3b0:	8b 81       	ldd	r24, Y+3	; 0x03
     3b2:	9c 81       	ldd	r25, Y+4	; 0x04
     3b4:	0e 94 23 38 	call	0x7046	; 0x7046 <malloc>
     3b8:	9a 83       	std	Y+2, r25	; 0x02
     3ba:	89 83       	std	Y+1, r24	; 0x01
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3bc:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     3c0:	89 81       	ldd	r24, Y+1	; 0x01
     3c2:	9a 81       	ldd	r25, Y+2	; 0x02
     3c4:	89 2b       	or	r24, r25
     3c6:	11 f4       	brne	.+4      	; 0x3cc <pvPortMalloc+0x30>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     3c8:	0e 94 00 21 	call	0x4200	; 0x4200 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
}
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	08 95       	ret

000003de <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	1f 92       	push	r1
     3e4:	1f 92       	push	r1
     3e6:	cd b7       	in	r28, 0x3d	; 61
     3e8:	de b7       	in	r29, 0x3e	; 62
     3ea:	9a 83       	std	Y+2, r25	; 0x02
     3ec:	89 83       	std	Y+1, r24	; 0x01
    if( pv )
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	9a 81       	ldd	r25, Y+2	; 0x02
     3f2:	89 2b       	or	r24, r25
     3f4:	41 f0       	breq	.+16     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
    {
        vTaskSuspendAll();
     3f6:	0e 94 54 13 	call	0x26a8	; 0x26a8 <vTaskSuspendAll>
        {
            free( pv );
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	9a 81       	ldd	r25, Y+2	; 0x02
     3fe:	0e 94 bb 38 	call	0x7176	; 0x7176 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     402:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    }
}
     406:	00 00       	nop
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	1f 92       	push	r1
     418:	1f 92       	push	r1
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     422:	89 81       	ldd	r24, Y+1	; 0x01
     424:	9a 81       	ldd	r25, Y+2	; 0x02
     426:	9c 01       	movw	r18, r24
     428:	2d 5f       	subi	r18, 0xFD	; 253
     42a:	3f 4f       	sbci	r19, 0xFF	; 255
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	9a 81       	ldd	r25, Y+2	; 0x02
     430:	fc 01       	movw	r30, r24
     432:	32 83       	std	Z+2, r19	; 0x02
     434:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	9a 81       	ldd	r25, Y+2	; 0x02
     43a:	2f ef       	ldi	r18, 0xFF	; 255
     43c:	3f ef       	ldi	r19, 0xFF	; 255
     43e:	fc 01       	movw	r30, r24
     440:	34 83       	std	Z+4, r19	; 0x04
     442:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	9a 81       	ldd	r25, Y+2	; 0x02
     448:	9c 01       	movw	r18, r24
     44a:	2d 5f       	subi	r18, 0xFD	; 253
     44c:	3f 4f       	sbci	r19, 0xFF	; 255
     44e:	89 81       	ldd	r24, Y+1	; 0x01
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	fc 01       	movw	r30, r24
     454:	36 83       	std	Z+6, r19	; 0x06
     456:	25 83       	std	Z+5, r18	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     458:	89 81       	ldd	r24, Y+1	; 0x01
     45a:	9a 81       	ldd	r25, Y+2	; 0x02
     45c:	9c 01       	movw	r18, r24
     45e:	2d 5f       	subi	r18, 0xFD	; 253
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	9a 81       	ldd	r25, Y+2	; 0x02
     466:	fc 01       	movw	r30, r24
     468:	30 87       	std	Z+8, r19	; 0x08
     46a:	27 83       	std	Z+7, r18	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     46c:	89 81       	ldd	r24, Y+1	; 0x01
     46e:	9a 81       	ldd	r25, Y+2	; 0x02
     470:	fc 01       	movw	r30, r24
     472:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     474:	00 00       	nop
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	08 95       	ret

00000480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	1f 92       	push	r1
     486:	1f 92       	push	r1
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	9a 83       	std	Y+2, r25	; 0x02
     48e:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     490:	89 81       	ldd	r24, Y+1	; 0x01
     492:	9a 81       	ldd	r25, Y+2	; 0x02
     494:	fc 01       	movw	r30, r24
     496:	11 86       	std	Z+9, r1	; 0x09
     498:	10 86       	std	Z+8, r1	; 0x08

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     49a:	00 00       	nop
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	df 91       	pop	r29
     4a2:	cf 91       	pop	r28
     4a4:	08 95       	ret

000004a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <vListInsertEnd+0x6>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <vListInsertEnd+0x8>
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	9c 83       	std	Y+4, r25	; 0x04
     4b4:	8b 83       	std	Y+3, r24	; 0x03
     4b6:	7e 83       	std	Y+6, r23	; 0x06
     4b8:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     4ba:	8b 81       	ldd	r24, Y+3	; 0x03
     4bc:	9c 81       	ldd	r25, Y+4	; 0x04
     4be:	fc 01       	movw	r30, r24
     4c0:	81 81       	ldd	r24, Z+1	; 0x01
     4c2:	92 81       	ldd	r25, Z+2	; 0x02
     4c4:	9a 83       	std	Y+2, r25	; 0x02
     4c6:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     4c8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ca:	9e 81       	ldd	r25, Y+6	; 0x06
     4cc:	29 81       	ldd	r18, Y+1	; 0x01
     4ce:	3a 81       	ldd	r19, Y+2	; 0x02
     4d0:	fc 01       	movw	r30, r24
     4d2:	33 83       	std	Z+3, r19	; 0x03
     4d4:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	fc 01       	movw	r30, r24
     4dc:	24 81       	ldd	r18, Z+4	; 0x04
     4de:	35 81       	ldd	r19, Z+5	; 0x05
     4e0:	8d 81       	ldd	r24, Y+5	; 0x05
     4e2:	9e 81       	ldd	r25, Y+6	; 0x06
     4e4:	fc 01       	movw	r30, r24
     4e6:	35 83       	std	Z+5, r19	; 0x05
     4e8:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	9a 81       	ldd	r25, Y+2	; 0x02
     4ee:	fc 01       	movw	r30, r24
     4f0:	84 81       	ldd	r24, Z+4	; 0x04
     4f2:	95 81       	ldd	r25, Z+5	; 0x05
     4f4:	2d 81       	ldd	r18, Y+5	; 0x05
     4f6:	3e 81       	ldd	r19, Y+6	; 0x06
     4f8:	fc 01       	movw	r30, r24
     4fa:	33 83       	std	Z+3, r19	; 0x03
     4fc:	22 83       	std	Z+2, r18	; 0x02
    pxIndex->pxPrevious = pxNewListItem;
     4fe:	89 81       	ldd	r24, Y+1	; 0x01
     500:	9a 81       	ldd	r25, Y+2	; 0x02
     502:	2d 81       	ldd	r18, Y+5	; 0x05
     504:	3e 81       	ldd	r19, Y+6	; 0x06
     506:	fc 01       	movw	r30, r24
     508:	35 83       	std	Z+5, r19	; 0x05
     50a:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	9e 81       	ldd	r25, Y+6	; 0x06
     510:	2b 81       	ldd	r18, Y+3	; 0x03
     512:	3c 81       	ldd	r19, Y+4	; 0x04
     514:	fc 01       	movw	r30, r24
     516:	31 87       	std	Z+9, r19	; 0x09
     518:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     51a:	8b 81       	ldd	r24, Y+3	; 0x03
     51c:	9c 81       	ldd	r25, Y+4	; 0x04
     51e:	fc 01       	movw	r30, r24
     520:	80 81       	ld	r24, Z
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	28 0f       	add	r18, r24
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	fc 01       	movw	r30, r24
     52c:	20 83       	st	Z, r18
}
     52e:	00 00       	nop
     530:	26 96       	adiw	r28, 0x06	; 6
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	df 91       	pop	r29
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	28 97       	sbiw	r28, 0x08	; 8
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	9e 83       	std	Y+6, r25	; 0x06
     558:	8d 83       	std	Y+5, r24	; 0x05
     55a:	78 87       	std	Y+8, r23	; 0x08
     55c:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     55e:	8f 81       	ldd	r24, Y+7	; 0x07
     560:	98 85       	ldd	r25, Y+8	; 0x08
     562:	fc 01       	movw	r30, r24
     564:	80 81       	ld	r24, Z
     566:	91 81       	ldd	r25, Z+1	; 0x01
     568:	9c 83       	std	Y+4, r25	; 0x04
     56a:	8b 83       	std	Y+3, r24	; 0x03
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	9c 81       	ldd	r25, Y+4	; 0x04
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	41 f4       	brne	.+16     	; 0x584 <vListInsert+0x42>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     574:	8d 81       	ldd	r24, Y+5	; 0x05
     576:	9e 81       	ldd	r25, Y+6	; 0x06
     578:	fc 01       	movw	r30, r24
     57a:	87 81       	ldd	r24, Z+7	; 0x07
     57c:	90 85       	ldd	r25, Z+8	; 0x08
     57e:	9a 83       	std	Y+2, r25	; 0x02
     580:	89 83       	std	Y+1, r24	; 0x01
     582:	1a c0       	rjmp	.+52     	; 0x5b8 <vListInsert+0x76>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     584:	8d 81       	ldd	r24, Y+5	; 0x05
     586:	9e 81       	ldd	r25, Y+6	; 0x06
     588:	03 96       	adiw	r24, 0x03	; 3
     58a:	9a 83       	std	Y+2, r25	; 0x02
     58c:	89 83       	std	Y+1, r24	; 0x01
     58e:	07 c0       	rjmp	.+14     	; 0x59e <vListInsert+0x5c>
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	fc 01       	movw	r30, r24
     596:	82 81       	ldd	r24, Z+2	; 0x02
     598:	93 81       	ldd	r25, Z+3	; 0x03
     59a:	9a 83       	std	Y+2, r25	; 0x02
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	89 81       	ldd	r24, Y+1	; 0x01
     5a0:	9a 81       	ldd	r25, Y+2	; 0x02
     5a2:	fc 01       	movw	r30, r24
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 81       	ld	r18, Z
     5ac:	31 81       	ldd	r19, Z+1	; 0x01
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	9c 81       	ldd	r25, Y+4	; 0x04
     5b2:	82 17       	cp	r24, r18
     5b4:	93 07       	cpc	r25, r19
     5b6:	60 f7       	brcc	.-40     	; 0x590 <vListInsert+0x4e>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	9a 81       	ldd	r25, Y+2	; 0x02
     5bc:	fc 01       	movw	r30, r24
     5be:	22 81       	ldd	r18, Z+2	; 0x02
     5c0:	33 81       	ldd	r19, Z+3	; 0x03
     5c2:	8f 81       	ldd	r24, Y+7	; 0x07
     5c4:	98 85       	ldd	r25, Y+8	; 0x08
     5c6:	fc 01       	movw	r30, r24
     5c8:	33 83       	std	Z+3, r19	; 0x03
     5ca:	22 83       	std	Z+2, r18	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5cc:	8f 81       	ldd	r24, Y+7	; 0x07
     5ce:	98 85       	ldd	r25, Y+8	; 0x08
     5d0:	fc 01       	movw	r30, r24
     5d2:	82 81       	ldd	r24, Z+2	; 0x02
     5d4:	93 81       	ldd	r25, Z+3	; 0x03
     5d6:	2f 81       	ldd	r18, Y+7	; 0x07
     5d8:	38 85       	ldd	r19, Y+8	; 0x08
     5da:	fc 01       	movw	r30, r24
     5dc:	35 83       	std	Z+5, r19	; 0x05
     5de:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     5e0:	8f 81       	ldd	r24, Y+7	; 0x07
     5e2:	98 85       	ldd	r25, Y+8	; 0x08
     5e4:	29 81       	ldd	r18, Y+1	; 0x01
     5e6:	3a 81       	ldd	r19, Y+2	; 0x02
     5e8:	fc 01       	movw	r30, r24
     5ea:	35 83       	std	Z+5, r19	; 0x05
     5ec:	24 83       	std	Z+4, r18	; 0x04
    pxIterator->pxNext = pxNewListItem;
     5ee:	89 81       	ldd	r24, Y+1	; 0x01
     5f0:	9a 81       	ldd	r25, Y+2	; 0x02
     5f2:	2f 81       	ldd	r18, Y+7	; 0x07
     5f4:	38 85       	ldd	r19, Y+8	; 0x08
     5f6:	fc 01       	movw	r30, r24
     5f8:	33 83       	std	Z+3, r19	; 0x03
     5fa:	22 83       	std	Z+2, r18	; 0x02

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     5fc:	8f 81       	ldd	r24, Y+7	; 0x07
     5fe:	98 85       	ldd	r25, Y+8	; 0x08
     600:	2d 81       	ldd	r18, Y+5	; 0x05
     602:	3e 81       	ldd	r19, Y+6	; 0x06
     604:	fc 01       	movw	r30, r24
     606:	31 87       	std	Z+9, r19	; 0x09
     608:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     60a:	8d 81       	ldd	r24, Y+5	; 0x05
     60c:	9e 81       	ldd	r25, Y+6	; 0x06
     60e:	fc 01       	movw	r30, r24
     610:	80 81       	ld	r24, Z
     612:	21 e0       	ldi	r18, 0x01	; 1
     614:	28 0f       	add	r18, r24
     616:	8d 81       	ldd	r24, Y+5	; 0x05
     618:	9e 81       	ldd	r25, Y+6	; 0x06
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
}
     61e:	00 00       	nop
     620:	28 96       	adiw	r28, 0x08	; 8
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	f8 94       	cli
     626:	de bf       	out	0x3e, r29	; 62
     628:	0f be       	out	0x3f, r0	; 63
     62a:	cd bf       	out	0x3d, r28	; 61
     62c:	df 91       	pop	r29
     62e:	cf 91       	pop	r28
     630:	08 95       	ret

00000632 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	00 d0       	rcall	.+0      	; 0x638 <uxListRemove+0x6>
     638:	1f 92       	push	r1
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	9c 83       	std	Y+4, r25	; 0x04
     640:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	9c 81       	ldd	r25, Y+4	; 0x04
     646:	fc 01       	movw	r30, r24
     648:	80 85       	ldd	r24, Z+8	; 0x08
     64a:	91 85       	ldd	r25, Z+9	; 0x09
     64c:	9a 83       	std	Y+2, r25	; 0x02
     64e:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	fc 01       	movw	r30, r24
     656:	82 81       	ldd	r24, Z+2	; 0x02
     658:	93 81       	ldd	r25, Z+3	; 0x03
     65a:	2b 81       	ldd	r18, Y+3	; 0x03
     65c:	3c 81       	ldd	r19, Y+4	; 0x04
     65e:	f9 01       	movw	r30, r18
     660:	24 81       	ldd	r18, Z+4	; 0x04
     662:	35 81       	ldd	r19, Z+5	; 0x05
     664:	fc 01       	movw	r30, r24
     666:	35 83       	std	Z+5, r19	; 0x05
     668:	24 83       	std	Z+4, r18	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	9c 81       	ldd	r25, Y+4	; 0x04
     66e:	fc 01       	movw	r30, r24
     670:	84 81       	ldd	r24, Z+4	; 0x04
     672:	95 81       	ldd	r25, Z+5	; 0x05
     674:	2b 81       	ldd	r18, Y+3	; 0x03
     676:	3c 81       	ldd	r19, Y+4	; 0x04
     678:	f9 01       	movw	r30, r18
     67a:	22 81       	ldd	r18, Z+2	; 0x02
     67c:	33 81       	ldd	r19, Z+3	; 0x03
     67e:	fc 01       	movw	r30, r24
     680:	33 83       	std	Z+3, r19	; 0x03
     682:	22 83       	std	Z+2, r18	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     684:	89 81       	ldd	r24, Y+1	; 0x01
     686:	9a 81       	ldd	r25, Y+2	; 0x02
     688:	fc 01       	movw	r30, r24
     68a:	21 81       	ldd	r18, Z+1	; 0x01
     68c:	32 81       	ldd	r19, Z+2	; 0x02
     68e:	8b 81       	ldd	r24, Y+3	; 0x03
     690:	9c 81       	ldd	r25, Y+4	; 0x04
     692:	28 17       	cp	r18, r24
     694:	39 07       	cpc	r19, r25
     696:	51 f4       	brne	.+20     	; 0x6ac <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	9c 81       	ldd	r25, Y+4	; 0x04
     69c:	fc 01       	movw	r30, r24
     69e:	24 81       	ldd	r18, Z+4	; 0x04
     6a0:	35 81       	ldd	r19, Z+5	; 0x05
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	fc 01       	movw	r30, r24
     6a8:	32 83       	std	Z+2, r19	; 0x02
     6aa:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	fc 01       	movw	r30, r24
     6b2:	11 86       	std	Z+9, r1	; 0x09
     6b4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	fc 01       	movw	r30, r24
     6bc:	80 81       	ld	r24, Z
     6be:	2f ef       	ldi	r18, 0xFF	; 255
     6c0:	28 0f       	add	r18, r24
     6c2:	89 81       	ldd	r24, Y+1	; 0x01
     6c4:	9a 81       	ldd	r25, Y+2	; 0x02
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	fc 01       	movw	r30, r24
     6d0:	80 81       	ld	r24, Z
}
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	28 97       	sbiw	r28, 0x08	; 8
     6ea:	0f b6       	in	r0, 0x3f	; 63
     6ec:	f8 94       	cli
     6ee:	de bf       	out	0x3e, r29	; 62
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	cd bf       	out	0x3d, r28	; 61
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	8b 83       	std	Y+3, r24	; 0x03
     6f8:	7e 83       	std	Y+6, r23	; 0x06
     6fa:	6d 83       	std	Y+5, r22	; 0x05
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	4f 83       	std	Y+7, r20	; 0x07
     700:	8b 81       	ldd	r24, Y+3	; 0x03
     702:	9c 81       	ldd	r25, Y+4	; 0x04
     704:	21 e1       	ldi	r18, 0x11	; 17
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	9c 83       	std	Y+4, r25	; 0x04
     712:	8b 83       	std	Y+3, r24	; 0x03
     714:	8b 81       	ldd	r24, Y+3	; 0x03
     716:	9c 81       	ldd	r25, Y+4	; 0x04
     718:	22 e2       	ldi	r18, 0x22	; 34
     71a:	fc 01       	movw	r30, r24
     71c:	20 83       	st	Z, r18
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	9c 81       	ldd	r25, Y+4	; 0x04
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	9c 83       	std	Y+4, r25	; 0x04
     726:	8b 83       	std	Y+3, r24	; 0x03
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	9c 81       	ldd	r25, Y+4	; 0x04
     72c:	23 e3       	ldi	r18, 0x33	; 51
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	9c 81       	ldd	r25, Y+4	; 0x04
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	9c 83       	std	Y+4, r25	; 0x04
     73a:	8b 83       	std	Y+3, r24	; 0x03
     73c:	8d 81       	ldd	r24, Y+5	; 0x05
     73e:	9e 81       	ldd	r25, Y+6	; 0x06
     740:	9a 83       	std	Y+2, r25	; 0x02
     742:	89 83       	std	Y+1, r24	; 0x01
     744:	29 81       	ldd	r18, Y+1	; 0x01
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	8b 83       	std	Y+3, r24	; 0x03
     758:	89 81       	ldd	r24, Y+1	; 0x01
     75a:	9a 81       	ldd	r25, Y+2	; 0x02
     75c:	89 2f       	mov	r24, r25
     75e:	99 27       	eor	r25, r25
     760:	9a 83       	std	Y+2, r25	; 0x02
     762:	89 83       	std	Y+1, r24	; 0x01
     764:	29 81       	ldd	r18, Y+1	; 0x01
     766:	8b 81       	ldd	r24, Y+3	; 0x03
     768:	9c 81       	ldd	r25, Y+4	; 0x04
     76a:	fc 01       	movw	r30, r24
     76c:	20 83       	st	Z, r18
     76e:	8b 81       	ldd	r24, Y+3	; 0x03
     770:	9c 81       	ldd	r25, Y+4	; 0x04
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	9c 83       	std	Y+4, r25	; 0x04
     776:	8b 83       	std	Y+3, r24	; 0x03
     778:	8b 81       	ldd	r24, Y+3	; 0x03
     77a:	9c 81       	ldd	r25, Y+4	; 0x04
     77c:	fc 01       	movw	r30, r24
     77e:	10 82       	st	Z, r1
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	9c 81       	ldd	r25, Y+4	; 0x04
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	9c 83       	std	Y+4, r25	; 0x04
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	8b 81       	ldd	r24, Y+3	; 0x03
     78c:	9c 81       	ldd	r25, Y+4	; 0x04
     78e:	fc 01       	movw	r30, r24
     790:	10 82       	st	Z, r1
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	9c 81       	ldd	r25, Y+4	; 0x04
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	9c 83       	std	Y+4, r25	; 0x04
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	9c 81       	ldd	r25, Y+4	; 0x04
     7a0:	20 e8       	ldi	r18, 0x80	; 128
     7a2:	fc 01       	movw	r30, r24
     7a4:	20 83       	st	Z, r18
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	9c 81       	ldd	r25, Y+4	; 0x04
     7aa:	01 97       	sbiw	r24, 0x01	; 1
     7ac:	9c 83       	std	Y+4, r25	; 0x04
     7ae:	8b 83       	std	Y+3, r24	; 0x03
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	9c 81       	ldd	r25, Y+4	; 0x04
     7b4:	fc 01       	movw	r30, r24
     7b6:	10 82       	st	Z, r1
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	9c 81       	ldd	r25, Y+4	; 0x04
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	9c 83       	std	Y+4, r25	; 0x04
     7c0:	8b 83       	std	Y+3, r24	; 0x03
     7c2:	8b 81       	ldd	r24, Y+3	; 0x03
     7c4:	9c 81       	ldd	r25, Y+4	; 0x04
     7c6:	fc 01       	movw	r30, r24
     7c8:	10 82       	st	Z, r1
     7ca:	8b 81       	ldd	r24, Y+3	; 0x03
     7cc:	9c 81       	ldd	r25, Y+4	; 0x04
     7ce:	01 97       	sbiw	r24, 0x01	; 1
     7d0:	9c 83       	std	Y+4, r25	; 0x04
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	8b 81       	ldd	r24, Y+3	; 0x03
     7d6:	9c 81       	ldd	r25, Y+4	; 0x04
     7d8:	fc 01       	movw	r30, r24
     7da:	10 82       	st	Z, r1
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	9c 81       	ldd	r25, Y+4	; 0x04
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	9c 83       	std	Y+4, r25	; 0x04
     7e4:	8b 83       	std	Y+3, r24	; 0x03
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ea:	22 e0       	ldi	r18, 0x02	; 2
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	9c 83       	std	Y+4, r25	; 0x04
     7f8:	8b 83       	std	Y+3, r24	; 0x03
     7fa:	8b 81       	ldd	r24, Y+3	; 0x03
     7fc:	9c 81       	ldd	r25, Y+4	; 0x04
     7fe:	23 e0       	ldi	r18, 0x03	; 3
     800:	fc 01       	movw	r30, r24
     802:	20 83       	st	Z, r18
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	9c 83       	std	Y+4, r25	; 0x04
     80c:	8b 83       	std	Y+3, r24	; 0x03
     80e:	8b 81       	ldd	r24, Y+3	; 0x03
     810:	9c 81       	ldd	r25, Y+4	; 0x04
     812:	24 e0       	ldi	r18, 0x04	; 4
     814:	fc 01       	movw	r30, r24
     816:	20 83       	st	Z, r18
     818:	8b 81       	ldd	r24, Y+3	; 0x03
     81a:	9c 81       	ldd	r25, Y+4	; 0x04
     81c:	01 97       	sbiw	r24, 0x01	; 1
     81e:	9c 83       	std	Y+4, r25	; 0x04
     820:	8b 83       	std	Y+3, r24	; 0x03
     822:	8b 81       	ldd	r24, Y+3	; 0x03
     824:	9c 81       	ldd	r25, Y+4	; 0x04
     826:	25 e0       	ldi	r18, 0x05	; 5
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
     82e:	9c 81       	ldd	r25, Y+4	; 0x04
     830:	01 97       	sbiw	r24, 0x01	; 1
     832:	9c 83       	std	Y+4, r25	; 0x04
     834:	8b 83       	std	Y+3, r24	; 0x03
     836:	8b 81       	ldd	r24, Y+3	; 0x03
     838:	9c 81       	ldd	r25, Y+4	; 0x04
     83a:	26 e0       	ldi	r18, 0x06	; 6
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18
     840:	8b 81       	ldd	r24, Y+3	; 0x03
     842:	9c 81       	ldd	r25, Y+4	; 0x04
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	9c 83       	std	Y+4, r25	; 0x04
     848:	8b 83       	std	Y+3, r24	; 0x03
     84a:	8b 81       	ldd	r24, Y+3	; 0x03
     84c:	9c 81       	ldd	r25, Y+4	; 0x04
     84e:	27 e0       	ldi	r18, 0x07	; 7
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
     854:	8b 81       	ldd	r24, Y+3	; 0x03
     856:	9c 81       	ldd	r25, Y+4	; 0x04
     858:	01 97       	sbiw	r24, 0x01	; 1
     85a:	9c 83       	std	Y+4, r25	; 0x04
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	9c 81       	ldd	r25, Y+4	; 0x04
     862:	28 e0       	ldi	r18, 0x08	; 8
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
     868:	8b 81       	ldd	r24, Y+3	; 0x03
     86a:	9c 81       	ldd	r25, Y+4	; 0x04
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	9c 83       	std	Y+4, r25	; 0x04
     870:	8b 83       	std	Y+3, r24	; 0x03
     872:	8b 81       	ldd	r24, Y+3	; 0x03
     874:	9c 81       	ldd	r25, Y+4	; 0x04
     876:	29 e0       	ldi	r18, 0x09	; 9
     878:	fc 01       	movw	r30, r24
     87a:	20 83       	st	Z, r18
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	9c 81       	ldd	r25, Y+4	; 0x04
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	9c 83       	std	Y+4, r25	; 0x04
     884:	8b 83       	std	Y+3, r24	; 0x03
     886:	8b 81       	ldd	r24, Y+3	; 0x03
     888:	9c 81       	ldd	r25, Y+4	; 0x04
     88a:	20 e1       	ldi	r18, 0x10	; 16
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	9c 81       	ldd	r25, Y+4	; 0x04
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	8b 83       	std	Y+3, r24	; 0x03
     89a:	8b 81       	ldd	r24, Y+3	; 0x03
     89c:	9c 81       	ldd	r25, Y+4	; 0x04
     89e:	21 e1       	ldi	r18, 0x11	; 17
     8a0:	fc 01       	movw	r30, r24
     8a2:	20 83       	st	Z, r18
     8a4:	8b 81       	ldd	r24, Y+3	; 0x03
     8a6:	9c 81       	ldd	r25, Y+4	; 0x04
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	9c 83       	std	Y+4, r25	; 0x04
     8ac:	8b 83       	std	Y+3, r24	; 0x03
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
     8b2:	22 e1       	ldi	r18, 0x12	; 18
     8b4:	fc 01       	movw	r30, r24
     8b6:	20 83       	st	Z, r18
     8b8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ba:	9c 81       	ldd	r25, Y+4	; 0x04
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	9c 83       	std	Y+4, r25	; 0x04
     8c0:	8b 83       	std	Y+3, r24	; 0x03
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	9c 81       	ldd	r25, Y+4	; 0x04
     8c6:	23 e1       	ldi	r18, 0x13	; 19
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	9c 83       	std	Y+4, r25	; 0x04
     8d4:	8b 83       	std	Y+3, r24	; 0x03
     8d6:	8b 81       	ldd	r24, Y+3	; 0x03
     8d8:	9c 81       	ldd	r25, Y+4	; 0x04
     8da:	24 e1       	ldi	r18, 0x14	; 20
     8dc:	fc 01       	movw	r30, r24
     8de:	20 83       	st	Z, r18
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	9c 81       	ldd	r25, Y+4	; 0x04
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	9c 83       	std	Y+4, r25	; 0x04
     8e8:	8b 83       	std	Y+3, r24	; 0x03
     8ea:	8b 81       	ldd	r24, Y+3	; 0x03
     8ec:	9c 81       	ldd	r25, Y+4	; 0x04
     8ee:	25 e1       	ldi	r18, 0x15	; 21
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
     8f4:	8b 81       	ldd	r24, Y+3	; 0x03
     8f6:	9c 81       	ldd	r25, Y+4	; 0x04
     8f8:	01 97       	sbiw	r24, 0x01	; 1
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	8b 83       	std	Y+3, r24	; 0x03
     8fe:	8b 81       	ldd	r24, Y+3	; 0x03
     900:	9c 81       	ldd	r25, Y+4	; 0x04
     902:	26 e1       	ldi	r18, 0x16	; 22
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
     908:	8b 81       	ldd	r24, Y+3	; 0x03
     90a:	9c 81       	ldd	r25, Y+4	; 0x04
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	9c 83       	std	Y+4, r25	; 0x04
     910:	8b 83       	std	Y+3, r24	; 0x03
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	27 e1       	ldi	r18, 0x17	; 23
     918:	fc 01       	movw	r30, r24
     91a:	20 83       	st	Z, r18
     91c:	8b 81       	ldd	r24, Y+3	; 0x03
     91e:	9c 81       	ldd	r25, Y+4	; 0x04
     920:	01 97       	sbiw	r24, 0x01	; 1
     922:	9c 83       	std	Y+4, r25	; 0x04
     924:	8b 83       	std	Y+3, r24	; 0x03
     926:	8b 81       	ldd	r24, Y+3	; 0x03
     928:	9c 81       	ldd	r25, Y+4	; 0x04
     92a:	28 e1       	ldi	r18, 0x18	; 24
     92c:	fc 01       	movw	r30, r24
     92e:	20 83       	st	Z, r18
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	9c 81       	ldd	r25, Y+4	; 0x04
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	9c 83       	std	Y+4, r25	; 0x04
     938:	8b 83       	std	Y+3, r24	; 0x03
     93a:	8b 81       	ldd	r24, Y+3	; 0x03
     93c:	9c 81       	ldd	r25, Y+4	; 0x04
     93e:	29 e1       	ldi	r18, 0x19	; 25
     940:	fc 01       	movw	r30, r24
     942:	20 83       	st	Z, r18
     944:	8b 81       	ldd	r24, Y+3	; 0x03
     946:	9c 81       	ldd	r25, Y+4	; 0x04
     948:	01 97       	sbiw	r24, 0x01	; 1
     94a:	9c 83       	std	Y+4, r25	; 0x04
     94c:	8b 83       	std	Y+3, r24	; 0x03
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	9c 81       	ldd	r25, Y+4	; 0x04
     952:	20 e2       	ldi	r18, 0x20	; 32
     954:	fc 01       	movw	r30, r24
     956:	20 83       	st	Z, r18
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	9c 83       	std	Y+4, r25	; 0x04
     960:	8b 83       	std	Y+3, r24	; 0x03
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	21 e2       	ldi	r18, 0x21	; 33
     968:	fc 01       	movw	r30, r24
     96a:	20 83       	st	Z, r18
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	9c 81       	ldd	r25, Y+4	; 0x04
     970:	01 97       	sbiw	r24, 0x01	; 1
     972:	9c 83       	std	Y+4, r25	; 0x04
     974:	8b 83       	std	Y+3, r24	; 0x03
     976:	8b 81       	ldd	r24, Y+3	; 0x03
     978:	9c 81       	ldd	r25, Y+4	; 0x04
     97a:	22 e2       	ldi	r18, 0x22	; 34
     97c:	fc 01       	movw	r30, r24
     97e:	20 83       	st	Z, r18
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	9c 81       	ldd	r25, Y+4	; 0x04
     984:	01 97       	sbiw	r24, 0x01	; 1
     986:	9c 83       	std	Y+4, r25	; 0x04
     988:	8b 83       	std	Y+3, r24	; 0x03
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	23 e2       	ldi	r18, 0x23	; 35
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	9c 81       	ldd	r25, Y+4	; 0x04
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	9c 83       	std	Y+4, r25	; 0x04
     99c:	8b 83       	std	Y+3, r24	; 0x03
     99e:	8f 81       	ldd	r24, Y+7	; 0x07
     9a0:	98 85       	ldd	r25, Y+8	; 0x08
     9a2:	9a 83       	std	Y+2, r25	; 0x02
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	29 81       	ldd	r18, Y+1	; 0x01
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	fc 01       	movw	r30, r24
     9ae:	20 83       	st	Z, r18
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	8b 83       	std	Y+3, r24	; 0x03
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	89 2f       	mov	r24, r25
     9c0:	99 27       	eor	r25, r25
     9c2:	9a 83       	std	Y+2, r25	; 0x02
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	29 81       	ldd	r18, Y+1	; 0x01
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	9c 81       	ldd	r25, Y+4	; 0x04
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 83       	st	Z, r18
     9d0:	8b 81       	ldd	r24, Y+3	; 0x03
     9d2:	9c 81       	ldd	r25, Y+4	; 0x04
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	9c 83       	std	Y+4, r25	; 0x04
     9d8:	8b 83       	std	Y+3, r24	; 0x03
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	26 e2       	ldi	r18, 0x26	; 38
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
     9e4:	8b 81       	ldd	r24, Y+3	; 0x03
     9e6:	9c 81       	ldd	r25, Y+4	; 0x04
     9e8:	01 97       	sbiw	r24, 0x01	; 1
     9ea:	9c 83       	std	Y+4, r25	; 0x04
     9ec:	8b 83       	std	Y+3, r24	; 0x03
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	9c 81       	ldd	r25, Y+4	; 0x04
     9f2:	27 e2       	ldi	r18, 0x27	; 39
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
     9f8:	8b 81       	ldd	r24, Y+3	; 0x03
     9fa:	9c 81       	ldd	r25, Y+4	; 0x04
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	9c 83       	std	Y+4, r25	; 0x04
     a00:	8b 83       	std	Y+3, r24	; 0x03
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	9c 81       	ldd	r25, Y+4	; 0x04
     a06:	28 e2       	ldi	r18, 0x28	; 40
     a08:	fc 01       	movw	r30, r24
     a0a:	20 83       	st	Z, r18
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	9c 81       	ldd	r25, Y+4	; 0x04
     a10:	01 97       	sbiw	r24, 0x01	; 1
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	29 e2       	ldi	r18, 0x29	; 41
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	9c 81       	ldd	r25, Y+4	; 0x04
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	9c 83       	std	Y+4, r25	; 0x04
     a28:	8b 83       	std	Y+3, r24	; 0x03
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	20 e3       	ldi	r18, 0x30	; 48
     a30:	fc 01       	movw	r30, r24
     a32:	20 83       	st	Z, r18
     a34:	8b 81       	ldd	r24, Y+3	; 0x03
     a36:	9c 81       	ldd	r25, Y+4	; 0x04
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	9c 83       	std	Y+4, r25	; 0x04
     a3c:	8b 83       	std	Y+3, r24	; 0x03
     a3e:	8b 81       	ldd	r24, Y+3	; 0x03
     a40:	9c 81       	ldd	r25, Y+4	; 0x04
     a42:	21 e3       	ldi	r18, 0x31	; 49
     a44:	fc 01       	movw	r30, r24
     a46:	20 83       	st	Z, r18
     a48:	8b 81       	ldd	r24, Y+3	; 0x03
     a4a:	9c 81       	ldd	r25, Y+4	; 0x04
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	9c 83       	std	Y+4, r25	; 0x04
     a50:	8b 83       	std	Y+3, r24	; 0x03
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	9c 81       	ldd	r25, Y+4	; 0x04
     a56:	28 96       	adiw	r28, 0x08	; 8
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <xPortStartScheduler>:
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	ff d0       	rcall	.+510    	; 0xc70 <prvSetupTimerInterrupt>
     a72:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <__data_end>
     a76:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <__data_end+0x1>
     a7a:	cd 91       	ld	r28, X+
     a7c:	cd bf       	out	0x3d, r28	; 61
     a7e:	dd 91       	ld	r29, X+
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	ff 91       	pop	r31
     a84:	ef 91       	pop	r30
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	bf 91       	pop	r27
     a8c:	af 91       	pop	r26
     a8e:	9f 91       	pop	r25
     a90:	8f 91       	pop	r24
     a92:	7f 91       	pop	r23
     a94:	6f 91       	pop	r22
     a96:	5f 91       	pop	r21
     a98:	4f 91       	pop	r20
     a9a:	3f 91       	pop	r19
     a9c:	2f 91       	pop	r18
     a9e:	1f 91       	pop	r17
     aa0:	0f 91       	pop	r16
     aa2:	ff 90       	pop	r15
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	bf 90       	pop	r11
     aac:	af 90       	pop	r10
     aae:	9f 90       	pop	r9
     ab0:	8f 90       	pop	r8
     ab2:	7f 90       	pop	r7
     ab4:	6f 90       	pop	r6
     ab6:	5f 90       	pop	r5
     ab8:	4f 90       	pop	r4
     aba:	3f 90       	pop	r3
     abc:	2f 90       	pop	r2
     abe:	1f 90       	pop	r1
     ac0:	0f 90       	pop	r0
     ac2:	0c be       	out	0x3c, r0	; 60
     ac4:	0f 90       	pop	r0
     ac6:	0b be       	out	0x3b, r0	; 59
     ac8:	0f 90       	pop	r0
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	0f 90       	pop	r0
     ace:	08 95       	ret
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     ad8:	0f 92       	push	r0
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	0f 92       	push	r0
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	0c b6       	in	r0, 0x3c	; 60
     ae6:	0f 92       	push	r0
     ae8:	1f 92       	push	r1
     aea:	11 24       	eor	r1, r1
     aec:	2f 92       	push	r2
     aee:	3f 92       	push	r3
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	0f 93       	push	r16
     b0a:	1f 93       	push	r17
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
     b28:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <__data_end>
     b2c:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <__data_end+0x1>
     b30:	0d b6       	in	r0, 0x3d	; 61
     b32:	0d 92       	st	X+, r0
     b34:	0e b6       	in	r0, 0x3e	; 62
     b36:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     b38:	0e 94 29 15 	call	0x2a52	; 0x2a52 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     b3c:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <__data_end>
     b40:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <__data_end+0x1>
     b44:	cd 91       	ld	r28, X+
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	dd 91       	ld	r29, X+
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	ff 91       	pop	r31
     b4e:	ef 91       	pop	r30
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	bf 91       	pop	r27
     b56:	af 91       	pop	r26
     b58:	9f 91       	pop	r25
     b5a:	8f 91       	pop	r24
     b5c:	7f 91       	pop	r23
     b5e:	6f 91       	pop	r22
     b60:	5f 91       	pop	r21
     b62:	4f 91       	pop	r20
     b64:	3f 91       	pop	r19
     b66:	2f 91       	pop	r18
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	ff 90       	pop	r15
     b6e:	ef 90       	pop	r14
     b70:	df 90       	pop	r13
     b72:	cf 90       	pop	r12
     b74:	bf 90       	pop	r11
     b76:	af 90       	pop	r10
     b78:	9f 90       	pop	r9
     b7a:	8f 90       	pop	r8
     b7c:	7f 90       	pop	r7
     b7e:	6f 90       	pop	r6
     b80:	5f 90       	pop	r5
     b82:	4f 90       	pop	r4
     b84:	3f 90       	pop	r3
     b86:	2f 90       	pop	r2
     b88:	1f 90       	pop	r1
     b8a:	0f 90       	pop	r0
     b8c:	0c be       	out	0x3c, r0	; 60
     b8e:	0f 90       	pop	r0
     b90:	0b be       	out	0x3b, r0	; 59
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     b98:	08 95       	ret
	...

00000b9c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b9c:	0f 92       	push	r0
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	0f 92       	push	r0
     ba4:	0b b6       	in	r0, 0x3b	; 59
     ba6:	0f 92       	push	r0
     ba8:	0c b6       	in	r0, 0x3c	; 60
     baa:	0f 92       	push	r0
     bac:	1f 92       	push	r1
     bae:	11 24       	eor	r1, r1
     bb0:	2f 92       	push	r2
     bb2:	3f 92       	push	r3
     bb4:	4f 92       	push	r4
     bb6:	5f 92       	push	r5
     bb8:	6f 92       	push	r6
     bba:	7f 92       	push	r7
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	2f 93       	push	r18
     bd2:	3f 93       	push	r19
     bd4:	4f 93       	push	r20
     bd6:	5f 93       	push	r21
     bd8:	6f 93       	push	r22
     bda:	7f 93       	push	r23
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	ef 93       	push	r30
     bea:	ff 93       	push	r31
     bec:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <__data_end>
     bf0:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <__data_end+0x1>
     bf4:	0d b6       	in	r0, 0x3d	; 61
     bf6:	0d 92       	st	X+, r0
     bf8:	0e b6       	in	r0, 0x3e	; 62
     bfa:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     bfc:	83 e5       	ldi	r24, 0x53	; 83
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	fc 01       	movw	r30, r24
     c02:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
     c04:	0e 94 0e 14 	call	0x281c	; 0x281c <xTaskIncrementTick>
     c08:	88 23       	and	r24, r24
     c0a:	11 f0       	breq	.+4      	; 0xc10 <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
     c0c:	0e 94 29 15 	call	0x2a52	; 0x2a52 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     c10:	a0 91 4a 07 	lds	r26, 0x074A	; 0x80074a <__data_end>
     c14:	b0 91 4b 07 	lds	r27, 0x074B	; 0x80074b <__data_end+0x1>
     c18:	cd 91       	ld	r28, X+
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	dd 91       	ld	r29, X+
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	ff 91       	pop	r31
     c22:	ef 91       	pop	r30
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	7f 91       	pop	r23
     c32:	6f 91       	pop	r22
     c34:	5f 91       	pop	r21
     c36:	4f 91       	pop	r20
     c38:	3f 91       	pop	r19
     c3a:	2f 91       	pop	r18
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	bf 90       	pop	r11
     c4a:	af 90       	pop	r10
     c4c:	9f 90       	pop	r9
     c4e:	8f 90       	pop	r8
     c50:	7f 90       	pop	r7
     c52:	6f 90       	pop	r6
     c54:	5f 90       	pop	r5
     c56:	4f 90       	pop	r4
     c58:	3f 90       	pop	r3
     c5a:	2f 90       	pop	r2
     c5c:	1f 90       	pop	r1
     c5e:	0f 90       	pop	r0
     c60:	0c be       	out	0x3c, r0	; 60
     c62:	0f 90       	pop	r0
     c64:	0b be       	out	0x3b, r0	; 59
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c6c:	08 95       	ret
	...

00000c70 <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
     c78:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	88 70       	andi	r24, 0x08	; 8
     c80:	99 27       	eor	r25, r25
     c82:	89 2b       	or	r24, r25
     c84:	11 f0       	breq	.+4      	; 0xc8a <prvSetupTimerInterrupt+0x1a>
     c86:	80 ee       	ldi	r24, 0xE0	; 224
     c88:	01 c0       	rjmp	.+2      	; 0xc8c <prvSetupTimerInterrupt+0x1c>
     c8a:	80 ec       	ldi	r24, 0xC0	; 192
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	97 70       	andi	r25, 0x07	; 7
     c90:	89 2b       	or	r24, r25
     c92:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
     c94:	88 e1       	ldi	r24, 0x18	; 24
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	a8 95       	wdr
     c9c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
     ca6:	00 00       	nop
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cae:	76 df       	rcall	.-276    	; 0xb9c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cb0:	18 95       	reti
	...

00000cb4 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	00 d0       	rcall	.+0      	; 0xcba <xQueueGenericReset+0x6>
     cba:	1f 92       	push	r1
     cbc:	1f 92       	push	r1
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
     cc2:	9c 83       	std	Y+4, r25	; 0x04
     cc4:	8b 83       	std	Y+3, r24	; 0x03
     cc6:	6d 83       	std	Y+5, r22	; 0x05
     cc8:	8b 81       	ldd	r24, Y+3	; 0x03
     cca:	9c 81       	ldd	r25, Y+4	; 0x04
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	0f 92       	push	r0
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	9a 81       	ldd	r25, Y+2	; 0x02
     cda:	fc 01       	movw	r30, r24
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	29 81       	ldd	r18, Y+1	; 0x01
     ce2:	3a 81       	ldd	r19, Y+2	; 0x02
     ce4:	f9 01       	movw	r30, r18
     ce6:	23 8d       	ldd	r18, Z+27	; 0x1b
     ce8:	42 2f       	mov	r20, r18
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	29 81       	ldd	r18, Y+1	; 0x01
     cee:	3a 81       	ldd	r19, Y+2	; 0x02
     cf0:	f9 01       	movw	r30, r18
     cf2:	24 8d       	ldd	r18, Z+28	; 0x1c
     cf4:	22 2f       	mov	r18, r18
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	42 9f       	mul	r20, r18
     cfa:	b0 01       	movw	r22, r0
     cfc:	43 9f       	mul	r20, r19
     cfe:	70 0d       	add	r23, r0
     d00:	52 9f       	mul	r21, r18
     d02:	70 0d       	add	r23, r0
     d04:	11 24       	eor	r1, r1
     d06:	9b 01       	movw	r18, r22
     d08:	28 0f       	add	r18, r24
     d0a:	39 1f       	adc	r19, r25
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	fc 01       	movw	r30, r24
     d12:	35 83       	std	Z+5, r19	; 0x05
     d14:	24 83       	std	Z+4, r18	; 0x04
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	fc 01       	movw	r30, r24
     d1c:	12 8e       	std	Z+26, r1	; 0x1a
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	fc 01       	movw	r30, r24
     d24:	20 81       	ld	r18, Z
     d26:	31 81       	ldd	r19, Z+1	; 0x01
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	9a 81       	ldd	r25, Y+2	; 0x02
     d2c:	fc 01       	movw	r30, r24
     d2e:	33 83       	std	Z+3, r19	; 0x03
     d30:	22 83       	std	Z+2, r18	; 0x02
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	9a 81       	ldd	r25, Y+2	; 0x02
     d36:	fc 01       	movw	r30, r24
     d38:	20 81       	ld	r18, Z
     d3a:	31 81       	ldd	r19, Z+1	; 0x01
     d3c:	89 81       	ldd	r24, Y+1	; 0x01
     d3e:	9a 81       	ldd	r25, Y+2	; 0x02
     d40:	fc 01       	movw	r30, r24
     d42:	83 8d       	ldd	r24, Z+27	; 0x1b
     d44:	88 2f       	mov	r24, r24
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	bc 01       	movw	r22, r24
     d4a:	61 50       	subi	r22, 0x01	; 1
     d4c:	71 09       	sbc	r23, r1
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	fc 01       	movw	r30, r24
     d54:	84 8d       	ldd	r24, Z+28	; 0x1c
     d56:	48 2f       	mov	r20, r24
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	64 9f       	mul	r22, r20
     d5c:	c0 01       	movw	r24, r0
     d5e:	65 9f       	mul	r22, r21
     d60:	90 0d       	add	r25, r0
     d62:	74 9f       	mul	r23, r20
     d64:	90 0d       	add	r25, r0
     d66:	11 24       	eor	r1, r1
     d68:	28 0f       	add	r18, r24
     d6a:	39 1f       	adc	r19, r25
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	9a 81       	ldd	r25, Y+2	; 0x02
     d70:	fc 01       	movw	r30, r24
     d72:	37 83       	std	Z+7, r19	; 0x07
     d74:	26 83       	std	Z+6, r18	; 0x06
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	fc 01       	movw	r30, r24
     d7e:	25 8f       	std	Z+29, r18	; 0x1d
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	2f ef       	ldi	r18, 0xFF	; 255
     d86:	fc 01       	movw	r30, r24
     d88:	26 8f       	std	Z+30, r18	; 0x1e
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	88 23       	and	r24, r24
     d8e:	79 f4       	brne	.+30     	; 0xdae <xQueueGenericReset+0xfa>
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	fc 01       	movw	r30, r24
     d96:	80 85       	ldd	r24, Z+8	; 0x08
     d98:	88 23       	and	r24, r24
     d9a:	89 f0       	breq	.+34     	; 0xdbe <xQueueGenericReset+0x10a>
     d9c:	89 81       	ldd	r24, Y+1	; 0x01
     d9e:	9a 81       	ldd	r25, Y+2	; 0x02
     da0:	08 96       	adiw	r24, 0x08	; 8
     da2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTaskRemoveFromEventList>
     da6:	88 23       	and	r24, r24
     da8:	51 f0       	breq	.+20     	; 0xdbe <xQueueGenericReset+0x10a>
     daa:	96 de       	rcall	.-724    	; 0xad8 <vPortYield>
     dac:	08 c0       	rjmp	.+16     	; 0xdbe <xQueueGenericReset+0x10a>
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	08 96       	adiw	r24, 0x08	; 8
     db4:	2e db       	rcall	.-2468   	; 0x412 <vListInitialise>
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	9a 81       	ldd	r25, Y+2	; 0x02
     dba:	41 96       	adiw	r24, 0x11	; 17
     dbc:	2a db       	rcall	.-2476   	; 0x412 <vListInitialise>
     dbe:	0f 90       	pop	r0
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	08 95       	ret

00000dd4 <xQueueGenericCreate>:
     dd4:	0f 93       	push	r16
     dd6:	1f 93       	push	r17
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	29 97       	sbiw	r28, 0x09	; 9
     de2:	0f b6       	in	r0, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	de bf       	out	0x3e, r29	; 62
     de8:	0f be       	out	0x3f, r0	; 63
     dea:	cd bf       	out	0x3d, r28	; 61
     dec:	8f 83       	std	Y+7, r24	; 0x07
     dee:	68 87       	std	Y+8, r22	; 0x08
     df0:	49 87       	std	Y+9, r20	; 0x09
     df2:	88 85       	ldd	r24, Y+8	; 0x08
     df4:	88 23       	and	r24, r24
     df6:	19 f4       	brne	.+6      	; 0xdfe <xQueueGenericCreate+0x2a>
     df8:	1a 82       	std	Y+2, r1	; 0x02
     dfa:	19 82       	std	Y+1, r1	; 0x01
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <xQueueGenericCreate+0x48>
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	48 2f       	mov	r20, r24
     e02:	50 e0       	ldi	r21, 0x00	; 0
     e04:	88 85       	ldd	r24, Y+8	; 0x08
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	42 9f       	mul	r20, r18
     e0c:	c0 01       	movw	r24, r0
     e0e:	43 9f       	mul	r20, r19
     e10:	90 0d       	add	r25, r0
     e12:	52 9f       	mul	r21, r18
     e14:	90 0d       	add	r25, r0
     e16:	11 24       	eor	r1, r1
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	89 81       	ldd	r24, Y+1	; 0x01
     e1e:	9a 81       	ldd	r25, Y+2	; 0x02
     e20:	81 96       	adiw	r24, 0x21	; 33
     e22:	bc da       	rcall	.-2696   	; 0x39c <pvPortMalloc>
     e24:	9c 83       	std	Y+4, r25	; 0x04
     e26:	8b 83       	std	Y+3, r24	; 0x03
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	9c 81       	ldd	r25, Y+4	; 0x04
     e2c:	89 2b       	or	r24, r25
     e2e:	99 f0       	breq	.+38     	; 0xe56 <xQueueGenericCreate+0x82>
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	9c 81       	ldd	r25, Y+4	; 0x04
     e34:	9e 83       	std	Y+6, r25	; 0x06
     e36:	8d 83       	std	Y+5, r24	; 0x05
     e38:	8d 81       	ldd	r24, Y+5	; 0x05
     e3a:	9e 81       	ldd	r25, Y+6	; 0x06
     e3c:	81 96       	adiw	r24, 0x21	; 33
     e3e:	9e 83       	std	Y+6, r25	; 0x06
     e40:	8d 83       	std	Y+5, r24	; 0x05
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	89 01       	movw	r16, r18
     e4c:	29 85       	ldd	r18, Y+9	; 0x09
     e4e:	ac 01       	movw	r20, r24
     e50:	68 85       	ldd	r22, Y+8	; 0x08
     e52:	8f 81       	ldd	r24, Y+7	; 0x07
     e54:	0d d0       	rcall	.+26     	; 0xe70 <prvInitialiseNewQueue>
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	29 96       	adiw	r28, 0x09	; 9
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	08 95       	ret

00000e70 <prvInitialiseNewQueue>:
     e70:	0f 93       	push	r16
     e72:	1f 93       	push	r17
     e74:	cf 93       	push	r28
     e76:	df 93       	push	r29
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	27 97       	sbiw	r28, 0x07	; 7
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	6a 83       	std	Y+2, r22	; 0x02
     e8c:	5c 83       	std	Y+4, r21	; 0x04
     e8e:	4b 83       	std	Y+3, r20	; 0x03
     e90:	2d 83       	std	Y+5, r18	; 0x05
     e92:	1f 83       	std	Y+7, r17	; 0x07
     e94:	0e 83       	std	Y+6, r16	; 0x06
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	88 23       	and	r24, r24
     e9a:	41 f4       	brne	.+16     	; 0xeac <prvInitialiseNewQueue+0x3c>
     e9c:	8e 81       	ldd	r24, Y+6	; 0x06
     e9e:	9f 81       	ldd	r25, Y+7	; 0x07
     ea0:	2e 81       	ldd	r18, Y+6	; 0x06
     ea2:	3f 81       	ldd	r19, Y+7	; 0x07
     ea4:	fc 01       	movw	r30, r24
     ea6:	31 83       	std	Z+1, r19	; 0x01
     ea8:	20 83       	st	Z, r18
     eaa:	07 c0       	rjmp	.+14     	; 0xeba <prvInitialiseNewQueue+0x4a>
     eac:	8e 81       	ldd	r24, Y+6	; 0x06
     eae:	9f 81       	ldd	r25, Y+7	; 0x07
     eb0:	2b 81       	ldd	r18, Y+3	; 0x03
     eb2:	3c 81       	ldd	r19, Y+4	; 0x04
     eb4:	fc 01       	movw	r30, r24
     eb6:	31 83       	std	Z+1, r19	; 0x01
     eb8:	20 83       	st	Z, r18
     eba:	8e 81       	ldd	r24, Y+6	; 0x06
     ebc:	9f 81       	ldd	r25, Y+7	; 0x07
     ebe:	29 81       	ldd	r18, Y+1	; 0x01
     ec0:	fc 01       	movw	r30, r24
     ec2:	23 8f       	std	Z+27, r18	; 0x1b
     ec4:	8e 81       	ldd	r24, Y+6	; 0x06
     ec6:	9f 81       	ldd	r25, Y+7	; 0x07
     ec8:	2a 81       	ldd	r18, Y+2	; 0x02
     eca:	fc 01       	movw	r30, r24
     ecc:	24 8f       	std	Z+28, r18	; 0x1c
     ece:	8e 81       	ldd	r24, Y+6	; 0x06
     ed0:	9f 81       	ldd	r25, Y+7	; 0x07
     ed2:	61 e0       	ldi	r22, 0x01	; 1
     ed4:	ef de       	rcall	.-546    	; 0xcb4 <xQueueGenericReset>
     ed6:	8e 81       	ldd	r24, Y+6	; 0x06
     ed8:	9f 81       	ldd	r25, Y+7	; 0x07
     eda:	2d 81       	ldd	r18, Y+5	; 0x05
     edc:	fc 01       	movw	r30, r24
     ede:	20 a3       	std	Z+32, r18	; 0x20
     ee0:	00 00       	nop
     ee2:	27 96       	adiw	r28, 0x07	; 7
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	08 95       	ret

00000ef8 <prvInitialiseMutex>:
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	1f 92       	push	r1
     efe:	1f 92       	push	r1
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	89 2b       	or	r24, r25
     f0e:	b1 f0       	breq	.+44     	; 0xf3c <prvInitialiseMutex+0x44>
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	9a 81       	ldd	r25, Y+2	; 0x02
     f14:	fc 01       	movw	r30, r24
     f16:	15 82       	std	Z+5, r1	; 0x05
     f18:	14 82       	std	Z+4, r1	; 0x04
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	9a 81       	ldd	r25, Y+2	; 0x02
     f1e:	fc 01       	movw	r30, r24
     f20:	11 82       	std	Z+1, r1	; 0x01
     f22:	10 82       	st	Z, r1
     f24:	89 81       	ldd	r24, Y+1	; 0x01
     f26:	9a 81       	ldd	r25, Y+2	; 0x02
     f28:	fc 01       	movw	r30, r24
     f2a:	16 82       	std	Z+6, r1	; 0x06
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	40 e0       	ldi	r20, 0x00	; 0
     f34:	50 e0       	ldi	r21, 0x00	; 0
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	24 d0       	rcall	.+72     	; 0xf84 <xQueueGenericSend>
     f3c:	00 00       	nop
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <xQueueCreateMutex>:
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <xQueueCreateMutex+0x6>
     f4e:	1f 92       	push	r1
     f50:	1f 92       	push	r1
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	1a 82       	std	Y+2, r1	; 0x02
     f5e:	4d 81       	ldd	r20, Y+5	; 0x05
     f60:	6a 81       	ldd	r22, Y+2	; 0x02
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	37 df       	rcall	.-402    	; 0xdd4 <xQueueGenericCreate>
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	c4 df       	rcall	.-120    	; 0xef8 <prvInitialiseMutex>
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	08 95       	ret

00000f84 <xQueueGenericSend>:
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	2e 97       	sbiw	r28, 0x0e	; 14
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	0f be       	out	0x3f, r0	; 63
     f96:	cd bf       	out	0x3d, r28	; 61
     f98:	99 87       	std	Y+9, r25	; 0x09
     f9a:	88 87       	std	Y+8, r24	; 0x08
     f9c:	7b 87       	std	Y+11, r23	; 0x0b
     f9e:	6a 87       	std	Y+10, r22	; 0x0a
     fa0:	5d 87       	std	Y+13, r21	; 0x0d
     fa2:	4c 87       	std	Y+12, r20	; 0x0c
     fa4:	2e 87       	std	Y+14, r18	; 0x0e
     fa6:	19 82       	std	Y+1, r1	; 0x01
     fa8:	88 85       	ldd	r24, Y+8	; 0x08
     faa:	99 85       	ldd	r25, Y+9	; 0x09
     fac:	9b 83       	std	Y+3, r25	; 0x03
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	0f 92       	push	r0
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	9b 81       	ldd	r25, Y+3	; 0x03
     fba:	fc 01       	movw	r30, r24
     fbc:	22 8d       	ldd	r18, Z+26	; 0x1a
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	fc 01       	movw	r30, r24
     fc4:	83 8d       	ldd	r24, Z+27	; 0x1b
     fc6:	28 17       	cp	r18, r24
     fc8:	18 f0       	brcs	.+6      	; 0xfd0 <xQueueGenericSend+0x4c>
     fca:	8e 85       	ldd	r24, Y+14	; 0x0e
     fcc:	82 30       	cpi	r24, 0x02	; 2
     fce:	f9 f4       	brne	.+62     	; 0x100e <xQueueGenericSend+0x8a>
     fd0:	2a 85       	ldd	r18, Y+10	; 0x0a
     fd2:	3b 85       	ldd	r19, Y+11	; 0x0b
     fd4:	8a 81       	ldd	r24, Y+2	; 0x02
     fd6:	9b 81       	ldd	r25, Y+3	; 0x03
     fd8:	4e 85       	ldd	r20, Y+14	; 0x0e
     fda:	b9 01       	movw	r22, r18
     fdc:	7f d2       	rcall	.+1278   	; 0x14dc <prvCopyDataToQueue>
     fde:	8c 83       	std	Y+4, r24	; 0x04
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	fc 01       	movw	r30, r24
     fe6:	81 89       	ldd	r24, Z+17	; 0x11
     fe8:	88 23       	and	r24, r24
     fea:	49 f0       	breq	.+18     	; 0xffe <xQueueGenericSend+0x7a>
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	9b 81       	ldd	r25, Y+3	; 0x03
     ff0:	41 96       	adiw	r24, 0x11	; 17
     ff2:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTaskRemoveFromEventList>
     ff6:	88 23       	and	r24, r24
     ff8:	31 f0       	breq	.+12     	; 0x1006 <xQueueGenericSend+0x82>
     ffa:	6e dd       	rcall	.-1316   	; 0xad8 <vPortYield>
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <xQueueGenericSend+0x82>
     ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    1000:	88 23       	and	r24, r24
    1002:	09 f0       	breq	.+2      	; 0x1006 <xQueueGenericSend+0x82>
    1004:	69 dd       	rcall	.-1326   	; 0xad8 <vPortYield>
    1006:	0f 90       	pop	r0
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	5b c0       	rjmp	.+182    	; 0x10c4 <xQueueGenericSend+0x140>
    100e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1010:	9d 85       	ldd	r25, Y+13	; 0x0d
    1012:	89 2b       	or	r24, r25
    1014:	21 f4       	brne	.+8      	; 0x101e <xQueueGenericSend+0x9a>
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	53 c0       	rjmp	.+166    	; 0x10c4 <xQueueGenericSend+0x140>
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	88 23       	and	r24, r24
    1022:	31 f4       	brne	.+12     	; 0x1030 <xQueueGenericSend+0xac>
    1024:	ce 01       	movw	r24, r28
    1026:	05 96       	adiw	r24, 0x05	; 5
    1028:	0e 94 88 16 	call	0x2d10	; 0x2d10 <vTaskInternalSetTimeOutState>
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0e 94 54 13 	call	0x26a8	; 0x26a8 <vTaskSuspendAll>
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	0f 92       	push	r0
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	fc 01       	movw	r30, r24
    1044:	85 8d       	ldd	r24, Z+29	; 0x1d
    1046:	8f 3f       	cpi	r24, 0xFF	; 255
    1048:	21 f4       	brne	.+8      	; 0x1052 <xQueueGenericSend+0xce>
    104a:	8a 81       	ldd	r24, Y+2	; 0x02
    104c:	9b 81       	ldd	r25, Y+3	; 0x03
    104e:	fc 01       	movw	r30, r24
    1050:	15 8e       	std	Z+29, r1	; 0x1d
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	fc 01       	movw	r30, r24
    1058:	86 8d       	ldd	r24, Z+30	; 0x1e
    105a:	8f 3f       	cpi	r24, 0xFF	; 255
    105c:	21 f4       	brne	.+8      	; 0x1066 <xQueueGenericSend+0xe2>
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	9b 81       	ldd	r25, Y+3	; 0x03
    1062:	fc 01       	movw	r30, r24
    1064:	16 8e       	std	Z+30, r1	; 0x1e
    1066:	0f 90       	pop	r0
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	9e 01       	movw	r18, r28
    106c:	24 5f       	subi	r18, 0xF4	; 244
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	ce 01       	movw	r24, r28
    1072:	05 96       	adiw	r24, 0x05	; 5
    1074:	b9 01       	movw	r22, r18
    1076:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <xTaskCheckForTimeOut>
    107a:	88 23       	and	r24, r24
    107c:	e9 f4       	brne	.+58     	; 0x10b8 <xQueueGenericSend+0x134>
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	c8 d3       	rcall	.+1936   	; 0x1814 <prvIsQueueFull>
    1084:	88 23       	and	r24, r24
    1086:	91 f0       	breq	.+36     	; 0x10ac <xQueueGenericSend+0x128>
    1088:	2c 85       	ldd	r18, Y+12	; 0x0c
    108a:	3d 85       	ldd	r19, Y+13	; 0x0d
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	9b 81       	ldd	r25, Y+3	; 0x03
    1090:	08 96       	adiw	r24, 0x08	; 8
    1092:	b9 01       	movw	r22, r18
    1094:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <vTaskPlaceOnEventList>
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	9b 81       	ldd	r25, Y+3	; 0x03
    109c:	40 d3       	rcall	.+1664   	; 0x171e <prvUnlockQueue>
    109e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    10a2:	88 23       	and	r24, r24
    10a4:	09 f0       	breq	.+2      	; 0x10a8 <xQueueGenericSend+0x124>
    10a6:	84 cf       	rjmp	.-248    	; 0xfb0 <xQueueGenericSend+0x2c>
    10a8:	17 dd       	rcall	.-1490   	; 0xad8 <vPortYield>
    10aa:	82 cf       	rjmp	.-252    	; 0xfb0 <xQueueGenericSend+0x2c>
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	9b 81       	ldd	r25, Y+3	; 0x03
    10b0:	36 d3       	rcall	.+1644   	; 0x171e <prvUnlockQueue>
    10b2:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    10b6:	7c cf       	rjmp	.-264    	; 0xfb0 <xQueueGenericSend+0x2c>
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	30 d3       	rcall	.+1632   	; 0x171e <prvUnlockQueue>
    10be:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	2e 96       	adiw	r28, 0x0e	; 14
    10c6:	0f b6       	in	r0, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	de bf       	out	0x3e, r29	; 62
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	cd bf       	out	0x3d, r28	; 61
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <xQueueGenericSendFromISR>:
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	2c 97       	sbiw	r28, 0x0c	; 12
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	9f 83       	std	Y+7, r25	; 0x07
    10ec:	8e 83       	std	Y+6, r24	; 0x06
    10ee:	79 87       	std	Y+9, r23	; 0x09
    10f0:	68 87       	std	Y+8, r22	; 0x08
    10f2:	5b 87       	std	Y+11, r21	; 0x0b
    10f4:	4a 87       	std	Y+10, r20	; 0x0a
    10f6:	2c 87       	std	Y+12, r18	; 0x0c
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	9f 81       	ldd	r25, Y+7	; 0x07
    10fc:	9b 83       	std	Y+3, r25	; 0x03
    10fe:	8a 83       	std	Y+2, r24	; 0x02
    1100:	1c 82       	std	Y+4, r1	; 0x04
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	9b 81       	ldd	r25, Y+3	; 0x03
    1106:	fc 01       	movw	r30, r24
    1108:	22 8d       	ldd	r18, Z+26	; 0x1a
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	9b 81       	ldd	r25, Y+3	; 0x03
    110e:	fc 01       	movw	r30, r24
    1110:	83 8d       	ldd	r24, Z+27	; 0x1b
    1112:	28 17       	cp	r18, r24
    1114:	18 f0       	brcs	.+6      	; 0x111c <xQueueGenericSendFromISR+0x46>
    1116:	8c 85       	ldd	r24, Y+12	; 0x0c
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	81 f5       	brne	.+96     	; 0x117c <xQueueGenericSendFromISR+0xa6>
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	fc 01       	movw	r30, r24
    1122:	86 8d       	ldd	r24, Z+30	; 0x1e
    1124:	8d 83       	std	Y+5, r24	; 0x05
    1126:	28 85       	ldd	r18, Y+8	; 0x08
    1128:	39 85       	ldd	r19, Y+9	; 0x09
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1130:	b9 01       	movw	r22, r18
    1132:	d4 d1       	rcall	.+936    	; 0x14dc <prvCopyDataToQueue>
    1134:	8d 81       	ldd	r24, Y+5	; 0x05
    1136:	8f 3f       	cpi	r24, 0xFF	; 255
    1138:	b9 f4       	brne	.+46     	; 0x1168 <xQueueGenericSendFromISR+0x92>
    113a:	8a 81       	ldd	r24, Y+2	; 0x02
    113c:	9b 81       	ldd	r25, Y+3	; 0x03
    113e:	fc 01       	movw	r30, r24
    1140:	81 89       	ldd	r24, Z+17	; 0x11
    1142:	88 23       	and	r24, r24
    1144:	c1 f0       	breq	.+48     	; 0x1176 <xQueueGenericSendFromISR+0xa0>
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	41 96       	adiw	r24, 0x11	; 17
    114c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTaskRemoveFromEventList>
    1150:	88 23       	and	r24, r24
    1152:	89 f0       	breq	.+34     	; 0x1176 <xQueueGenericSendFromISR+0xa0>
    1154:	8a 85       	ldd	r24, Y+10	; 0x0a
    1156:	9b 85       	ldd	r25, Y+11	; 0x0b
    1158:	89 2b       	or	r24, r25
    115a:	69 f0       	breq	.+26     	; 0x1176 <xQueueGenericSendFromISR+0xa0>
    115c:	8a 85       	ldd	r24, Y+10	; 0x0a
    115e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1160:	21 e0       	ldi	r18, 0x01	; 1
    1162:	fc 01       	movw	r30, r24
    1164:	20 83       	st	Z, r18
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <xQueueGenericSendFromISR+0xa0>
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	28 2f       	mov	r18, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	9b 81       	ldd	r25, Y+3	; 0x03
    1172:	fc 01       	movw	r30, r24
    1174:	26 8f       	std	Z+30, r18	; 0x1e
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
    117a:	01 c0       	rjmp	.+2      	; 0x117e <xQueueGenericSendFromISR+0xa8>
    117c:	19 82       	std	Y+1, r1	; 0x01
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	2c 96       	adiw	r28, 0x0c	; 12
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <xQueueReceive>:
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	2d 97       	sbiw	r28, 0x0d	; 13
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	99 87       	std	Y+9, r25	; 0x09
    11a8:	88 87       	std	Y+8, r24	; 0x08
    11aa:	7b 87       	std	Y+11, r23	; 0x0b
    11ac:	6a 87       	std	Y+10, r22	; 0x0a
    11ae:	5d 87       	std	Y+13, r21	; 0x0d
    11b0:	4c 87       	std	Y+12, r20	; 0x0c
    11b2:	19 82       	std	Y+1, r1	; 0x01
    11b4:	88 85       	ldd	r24, Y+8	; 0x08
    11b6:	99 85       	ldd	r25, Y+9	; 0x09
    11b8:	9b 83       	std	Y+3, r25	; 0x03
    11ba:	8a 83       	std	Y+2, r24	; 0x02
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	0f 92       	push	r0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	9b 81       	ldd	r25, Y+3	; 0x03
    11c6:	fc 01       	movw	r30, r24
    11c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    11ca:	8c 83       	std	Y+4, r24	; 0x04
    11cc:	8c 81       	ldd	r24, Y+4	; 0x04
    11ce:	88 23       	and	r24, r24
    11d0:	f9 f0       	breq	.+62     	; 0x1210 <xQueueReceive+0x7e>
    11d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    11d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	b9 01       	movw	r22, r18
    11dc:	4f d2       	rcall	.+1182   	; 0x167c <prvCopyDataFromQueue>
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	2f ef       	ldi	r18, 0xFF	; 255
    11e2:	28 0f       	add	r18, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	fc 01       	movw	r30, r24
    11ea:	22 8f       	std	Z+26, r18	; 0x1a
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	fc 01       	movw	r30, r24
    11f2:	80 85       	ldd	r24, Z+8	; 0x08
    11f4:	88 23       	and	r24, r24
    11f6:	41 f0       	breq	.+16     	; 0x1208 <xQueueReceive+0x76>
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	08 96       	adiw	r24, 0x08	; 8
    11fe:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTaskRemoveFromEventList>
    1202:	88 23       	and	r24, r24
    1204:	09 f0       	breq	.+2      	; 0x1208 <xQueueReceive+0x76>
    1206:	68 dc       	rcall	.-1840   	; 0xad8 <vPortYield>
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	61 c0       	rjmp	.+194    	; 0x12d2 <xQueueReceive+0x140>
    1210:	8c 85       	ldd	r24, Y+12	; 0x0c
    1212:	9d 85       	ldd	r25, Y+13	; 0x0d
    1214:	89 2b       	or	r24, r25
    1216:	21 f4       	brne	.+8      	; 0x1220 <xQueueReceive+0x8e>
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	59 c0       	rjmp	.+178    	; 0x12d2 <xQueueReceive+0x140>
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	88 23       	and	r24, r24
    1224:	31 f4       	brne	.+12     	; 0x1232 <xQueueReceive+0xa0>
    1226:	ce 01       	movw	r24, r28
    1228:	05 96       	adiw	r24, 0x05	; 5
    122a:	0e 94 88 16 	call	0x2d10	; 0x2d10 <vTaskInternalSetTimeOutState>
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	0f 90       	pop	r0
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	0e 94 54 13 	call	0x26a8	; 0x26a8 <vTaskSuspendAll>
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	0f 92       	push	r0
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	9b 81       	ldd	r25, Y+3	; 0x03
    1244:	fc 01       	movw	r30, r24
    1246:	85 8d       	ldd	r24, Z+29	; 0x1d
    1248:	8f 3f       	cpi	r24, 0xFF	; 255
    124a:	21 f4       	brne	.+8      	; 0x1254 <xQueueReceive+0xc2>
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	fc 01       	movw	r30, r24
    1252:	15 8e       	std	Z+29, r1	; 0x1d
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	9b 81       	ldd	r25, Y+3	; 0x03
    1258:	fc 01       	movw	r30, r24
    125a:	86 8d       	ldd	r24, Z+30	; 0x1e
    125c:	8f 3f       	cpi	r24, 0xFF	; 255
    125e:	21 f4       	brne	.+8      	; 0x1268 <xQueueReceive+0xd6>
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	9b 81       	ldd	r25, Y+3	; 0x03
    1264:	fc 01       	movw	r30, r24
    1266:	16 8e       	std	Z+30, r1	; 0x1e
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	9e 01       	movw	r18, r28
    126e:	24 5f       	subi	r18, 0xF4	; 244
    1270:	3f 4f       	sbci	r19, 0xFF	; 255
    1272:	ce 01       	movw	r24, r28
    1274:	05 96       	adiw	r24, 0x05	; 5
    1276:	b9 01       	movw	r22, r18
    1278:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <xTaskCheckForTimeOut>
    127c:	88 23       	and	r24, r24
    127e:	e9 f4       	brne	.+58     	; 0x12ba <xQueueReceive+0x128>
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	aa d2       	rcall	.+1364   	; 0x17da <prvIsQueueEmpty>
    1286:	88 23       	and	r24, r24
    1288:	91 f0       	breq	.+36     	; 0x12ae <xQueueReceive+0x11c>
    128a:	2c 85       	ldd	r18, Y+12	; 0x0c
    128c:	3d 85       	ldd	r19, Y+13	; 0x0d
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	9b 81       	ldd	r25, Y+3	; 0x03
    1292:	41 96       	adiw	r24, 0x11	; 17
    1294:	b9 01       	movw	r22, r18
    1296:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <vTaskPlaceOnEventList>
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	9b 81       	ldd	r25, Y+3	; 0x03
    129e:	3f d2       	rcall	.+1150   	; 0x171e <prvUnlockQueue>
    12a0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    12a4:	88 23       	and	r24, r24
    12a6:	09 f0       	breq	.+2      	; 0x12aa <xQueueReceive+0x118>
    12a8:	89 cf       	rjmp	.-238    	; 0x11bc <xQueueReceive+0x2a>
    12aa:	16 dc       	rcall	.-2004   	; 0xad8 <vPortYield>
    12ac:	87 cf       	rjmp	.-242    	; 0x11bc <xQueueReceive+0x2a>
    12ae:	8a 81       	ldd	r24, Y+2	; 0x02
    12b0:	9b 81       	ldd	r25, Y+3	; 0x03
    12b2:	35 d2       	rcall	.+1130   	; 0x171e <prvUnlockQueue>
    12b4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    12b8:	81 cf       	rjmp	.-254    	; 0x11bc <xQueueReceive+0x2a>
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	2f d2       	rcall	.+1118   	; 0x171e <prvUnlockQueue>
    12c0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	9b 81       	ldd	r25, Y+3	; 0x03
    12c8:	88 d2       	rcall	.+1296   	; 0x17da <prvIsQueueEmpty>
    12ca:	88 23       	and	r24, r24
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <xQueueReceive+0x13e>
    12ce:	76 cf       	rjmp	.-276    	; 0x11bc <xQueueReceive+0x2a>
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	2d 96       	adiw	r28, 0x0d	; 13
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	f8 94       	cli
    12d8:	de bf       	out	0x3e, r29	; 62
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <xQueueSemaphoreTake>:
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	2d 97       	sbiw	r28, 0x0d	; 13
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	9b 87       	std	Y+11, r25	; 0x0b
    12fa:	8a 87       	std	Y+10, r24	; 0x0a
    12fc:	7d 87       	std	Y+13, r23	; 0x0d
    12fe:	6c 87       	std	Y+12, r22	; 0x0c
    1300:	19 82       	std	Y+1, r1	; 0x01
    1302:	8a 85       	ldd	r24, Y+10	; 0x0a
    1304:	9b 85       	ldd	r25, Y+11	; 0x0b
    1306:	9c 83       	std	Y+4, r25	; 0x04
    1308:	8b 83       	std	Y+3, r24	; 0x03
    130a:	1a 82       	std	Y+2, r1	; 0x02
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	0f 92       	push	r0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	fc 01       	movw	r30, r24
    1318:	82 8d       	ldd	r24, Z+26	; 0x1a
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	88 23       	and	r24, r24
    1320:	41 f1       	breq	.+80     	; 0x1372 <xQueueSemaphoreTake+0x8e>
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	2f ef       	ldi	r18, 0xFF	; 255
    1326:	28 0f       	add	r18, r24
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	fc 01       	movw	r30, r24
    132e:	22 8f       	std	Z+26, r18	; 0x1a
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	fc 01       	movw	r30, r24
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	89 2b       	or	r24, r25
    133c:	41 f4       	brne	.+16     	; 0x134e <xQueueSemaphoreTake+0x6a>
    133e:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <pvTaskIncrementMutexHeldCount>
    1342:	9c 01       	movw	r18, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	fc 01       	movw	r30, r24
    134a:	35 83       	std	Z+5, r19	; 0x05
    134c:	24 83       	std	Z+4, r18	; 0x04
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	9c 81       	ldd	r25, Y+4	; 0x04
    1352:	fc 01       	movw	r30, r24
    1354:	80 85       	ldd	r24, Z+8	; 0x08
    1356:	88 23       	and	r24, r24
    1358:	41 f0       	breq	.+16     	; 0x136a <xQueueSemaphoreTake+0x86>
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	08 96       	adiw	r24, 0x08	; 8
    1360:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTaskRemoveFromEventList>
    1364:	88 23       	and	r24, r24
    1366:	09 f0       	breq	.+2      	; 0x136a <xQueueSemaphoreTake+0x86>
    1368:	b7 db       	rcall	.-2194   	; 0xad8 <vPortYield>
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	8a c0       	rjmp	.+276    	; 0x1486 <xQueueSemaphoreTake+0x1a2>
    1372:	8c 85       	ldd	r24, Y+12	; 0x0c
    1374:	9d 85       	ldd	r25, Y+13	; 0x0d
    1376:	89 2b       	or	r24, r25
    1378:	21 f4       	brne	.+8      	; 0x1382 <xQueueSemaphoreTake+0x9e>
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	82 c0       	rjmp	.+260    	; 0x1486 <xQueueSemaphoreTake+0x1a2>
    1382:	89 81       	ldd	r24, Y+1	; 0x01
    1384:	88 23       	and	r24, r24
    1386:	31 f4       	brne	.+12     	; 0x1394 <xQueueSemaphoreTake+0xb0>
    1388:	ce 01       	movw	r24, r28
    138a:	07 96       	adiw	r24, 0x07	; 7
    138c:	0e 94 88 16 	call	0x2d10	; 0x2d10 <vTaskInternalSetTimeOutState>
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0e 94 54 13 	call	0x26a8	; 0x26a8 <vTaskSuspendAll>
    139c:	0f b6       	in	r0, 0x3f	; 63
    139e:	f8 94       	cli
    13a0:	0f 92       	push	r0
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	fc 01       	movw	r30, r24
    13a8:	85 8d       	ldd	r24, Z+29	; 0x1d
    13aa:	8f 3f       	cpi	r24, 0xFF	; 255
    13ac:	21 f4       	brne	.+8      	; 0x13b6 <xQueueSemaphoreTake+0xd2>
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	fc 01       	movw	r30, r24
    13b4:	15 8e       	std	Z+29, r1	; 0x1d
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	fc 01       	movw	r30, r24
    13bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	21 f4       	brne	.+8      	; 0x13ca <xQueueSemaphoreTake+0xe6>
    13c2:	8b 81       	ldd	r24, Y+3	; 0x03
    13c4:	9c 81       	ldd	r25, Y+4	; 0x04
    13c6:	fc 01       	movw	r30, r24
    13c8:	16 8e       	std	Z+30, r1	; 0x1e
    13ca:	0f 90       	pop	r0
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	9e 01       	movw	r18, r28
    13d0:	24 5f       	subi	r18, 0xF4	; 244
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	ce 01       	movw	r24, r28
    13d6:	07 96       	adiw	r24, 0x07	; 7
    13d8:	b9 01       	movw	r22, r18
    13da:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <xTaskCheckForTimeOut>
    13de:	88 23       	and	r24, r24
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <xQueueSemaphoreTake+0x100>
    13e2:	31 c0       	rjmp	.+98     	; 0x1446 <xQueueSemaphoreTake+0x162>
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	f8 d1       	rcall	.+1008   	; 0x17da <prvIsQueueEmpty>
    13ea:	88 23       	and	r24, r24
    13ec:	31 f1       	breq	.+76     	; 0x143a <xQueueSemaphoreTake+0x156>
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	fc 01       	movw	r30, r24
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	89 2b       	or	r24, r25
    13fa:	69 f4       	brne	.+26     	; 0x1416 <xQueueSemaphoreTake+0x132>
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	0f 92       	push	r0
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	9c 81       	ldd	r25, Y+4	; 0x04
    1406:	fc 01       	movw	r30, r24
    1408:	84 81       	ldd	r24, Z+4	; 0x04
    140a:	95 81       	ldd	r25, Z+5	; 0x05
    140c:	0e 94 0a 18 	call	0x3014	; 0x3014 <xTaskPriorityInherit>
    1410:	8a 83       	std	Y+2, r24	; 0x02
    1412:	0f 90       	pop	r0
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	2c 85       	ldd	r18, Y+12	; 0x0c
    1418:	3d 85       	ldd	r19, Y+13	; 0x0d
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	41 96       	adiw	r24, 0x11	; 17
    1420:	b9 01       	movw	r22, r18
    1422:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <vTaskPlaceOnEventList>
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	79 d1       	rcall	.+754    	; 0x171e <prvUnlockQueue>
    142c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    1430:	88 23       	and	r24, r24
    1432:	09 f0       	breq	.+2      	; 0x1436 <xQueueSemaphoreTake+0x152>
    1434:	6b cf       	rjmp	.-298    	; 0x130c <xQueueSemaphoreTake+0x28>
    1436:	50 db       	rcall	.-2400   	; 0xad8 <vPortYield>
    1438:	69 cf       	rjmp	.-302    	; 0x130c <xQueueSemaphoreTake+0x28>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	6f d1       	rcall	.+734    	; 0x171e <prvUnlockQueue>
    1440:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    1444:	63 cf       	rjmp	.-314    	; 0x130c <xQueueSemaphoreTake+0x28>
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	69 d1       	rcall	.+722    	; 0x171e <prvUnlockQueue>
    144c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	c2 d1       	rcall	.+900    	; 0x17da <prvIsQueueEmpty>
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <xQueueSemaphoreTake+0x178>
    145a:	58 cf       	rjmp	.-336    	; 0x130c <xQueueSemaphoreTake+0x28>
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 23       	and	r24, r24
    1460:	89 f0       	breq	.+34     	; 0x1484 <xQueueSemaphoreTake+0x1a0>
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	0f 92       	push	r0
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	15 d0       	rcall	.+42     	; 0x1498 <prvGetDisinheritPriorityAfterTimeout>
    146e:	8e 83       	std	Y+6, r24	; 0x06
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	9c 81       	ldd	r25, Y+4	; 0x04
    1474:	fc 01       	movw	r30, r24
    1476:	84 81       	ldd	r24, Z+4	; 0x04
    1478:	95 81       	ldd	r25, Z+5	; 0x05
    147a:	6e 81       	ldd	r22, Y+6	; 0x06
    147c:	0e 94 33 19 	call	0x3266	; 0x3266 <vTaskPriorityDisinheritAfterTimeout>
    1480:	0f 90       	pop	r0
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	2d 96       	adiw	r28, 0x0d	; 13
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <prvGetDisinheritPriorityAfterTimeout>:
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	00 d0       	rcall	.+0      	; 0x149e <prvGetDisinheritPriorityAfterTimeout+0x6>
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	9b 83       	std	Y+3, r25	; 0x03
    14a4:	8a 83       	std	Y+2, r24	; 0x02
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	9b 81       	ldd	r25, Y+3	; 0x03
    14aa:	fc 01       	movw	r30, r24
    14ac:	81 89       	ldd	r24, Z+17	; 0x11
    14ae:	88 23       	and	r24, r24
    14b0:	69 f0       	breq	.+26     	; 0x14cc <prvGetDisinheritPriorityAfterTimeout+0x34>
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	9b 81       	ldd	r25, Y+3	; 0x03
    14b6:	fc 01       	movw	r30, r24
    14b8:	86 89       	ldd	r24, Z+22	; 0x16
    14ba:	97 89       	ldd	r25, Z+23	; 0x17
    14bc:	fc 01       	movw	r30, r24
    14be:	80 81       	ld	r24, Z
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	98 2f       	mov	r25, r24
    14c4:	84 e0       	ldi	r24, 0x04	; 4
    14c6:	89 1b       	sub	r24, r25
    14c8:	89 83       	std	Y+1, r24	; 0x01
    14ca:	01 c0       	rjmp	.+2      	; 0x14ce <prvGetDisinheritPriorityAfterTimeout+0x36>
    14cc:	19 82       	std	Y+1, r1	; 0x01
    14ce:	89 81       	ldd	r24, Y+1	; 0x01
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	08 95       	ret

000014dc <prvCopyDataToQueue>:
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	27 97       	sbiw	r28, 0x07	; 7
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	9c 83       	std	Y+4, r25	; 0x04
    14f2:	8b 83       	std	Y+3, r24	; 0x03
    14f4:	7e 83       	std	Y+6, r23	; 0x06
    14f6:	6d 83       	std	Y+5, r22	; 0x05
    14f8:	4f 83       	std	Y+7, r20	; 0x07
    14fa:	19 82       	std	Y+1, r1	; 0x01
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	fc 01       	movw	r30, r24
    1502:	82 8d       	ldd	r24, Z+26	; 0x1a
    1504:	8a 83       	std	Y+2, r24	; 0x02
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	fc 01       	movw	r30, r24
    150c:	84 8d       	ldd	r24, Z+28	; 0x1c
    150e:	88 23       	and	r24, r24
    1510:	b1 f4       	brne	.+44     	; 0x153e <prvCopyDataToQueue+0x62>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	fc 01       	movw	r30, r24
    1518:	80 81       	ld	r24, Z
    151a:	91 81       	ldd	r25, Z+1	; 0x01
    151c:	89 2b       	or	r24, r25
    151e:	09 f0       	breq	.+2      	; 0x1522 <prvCopyDataToQueue+0x46>
    1520:	9c c0       	rjmp	.+312    	; 0x165a <prvCopyDataToQueue+0x17e>
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	fc 01       	movw	r30, r24
    1528:	84 81       	ldd	r24, Z+4	; 0x04
    152a:	95 81       	ldd	r25, Z+5	; 0x05
    152c:	0e 94 b6 18 	call	0x316c	; 0x316c <xTaskPriorityDisinherit>
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	fc 01       	movw	r30, r24
    1538:	15 82       	std	Z+5, r1	; 0x05
    153a:	14 82       	std	Z+4, r1	; 0x04
    153c:	8e c0       	rjmp	.+284    	; 0x165a <prvCopyDataToQueue+0x17e>
    153e:	8f 81       	ldd	r24, Y+7	; 0x07
    1540:	88 23       	and	r24, r24
    1542:	d9 f5       	brne	.+118    	; 0x15ba <prvCopyDataToQueue+0xde>
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	fc 01       	movw	r30, r24
    154a:	84 8d       	ldd	r24, Z+28	; 0x1c
    154c:	48 2f       	mov	r20, r24
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	fc 01       	movw	r30, r24
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	2d 81       	ldd	r18, Y+5	; 0x05
    155c:	3e 81       	ldd	r19, Y+6	; 0x06
    155e:	b9 01       	movw	r22, r18
    1560:	0e 94 2b 3a 	call	0x7456	; 0x7456 <memcpy>
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	fc 01       	movw	r30, r24
    156a:	22 81       	ldd	r18, Z+2	; 0x02
    156c:	33 81       	ldd	r19, Z+3	; 0x03
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	fc 01       	movw	r30, r24
    1574:	84 8d       	ldd	r24, Z+28	; 0x1c
    1576:	88 2f       	mov	r24, r24
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	28 0f       	add	r18, r24
    157c:	39 1f       	adc	r19, r25
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	fc 01       	movw	r30, r24
    1584:	33 83       	std	Z+3, r19	; 0x03
    1586:	22 83       	std	Z+2, r18	; 0x02
    1588:	8b 81       	ldd	r24, Y+3	; 0x03
    158a:	9c 81       	ldd	r25, Y+4	; 0x04
    158c:	fc 01       	movw	r30, r24
    158e:	22 81       	ldd	r18, Z+2	; 0x02
    1590:	33 81       	ldd	r19, Z+3	; 0x03
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	fc 01       	movw	r30, r24
    1598:	84 81       	ldd	r24, Z+4	; 0x04
    159a:	95 81       	ldd	r25, Z+5	; 0x05
    159c:	28 17       	cp	r18, r24
    159e:	39 07       	cpc	r19, r25
    15a0:	08 f4       	brcc	.+2      	; 0x15a4 <prvCopyDataToQueue+0xc8>
    15a2:	5b c0       	rjmp	.+182    	; 0x165a <prvCopyDataToQueue+0x17e>
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	fc 01       	movw	r30, r24
    15aa:	20 81       	ld	r18, Z
    15ac:	31 81       	ldd	r19, Z+1	; 0x01
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	9c 81       	ldd	r25, Y+4	; 0x04
    15b2:	fc 01       	movw	r30, r24
    15b4:	33 83       	std	Z+3, r19	; 0x03
    15b6:	22 83       	std	Z+2, r18	; 0x02
    15b8:	50 c0       	rjmp	.+160    	; 0x165a <prvCopyDataToQueue+0x17e>
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	fc 01       	movw	r30, r24
    15c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    15c2:	48 2f       	mov	r20, r24
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ca:	fc 01       	movw	r30, r24
    15cc:	86 81       	ldd	r24, Z+6	; 0x06
    15ce:	97 81       	ldd	r25, Z+7	; 0x07
    15d0:	2d 81       	ldd	r18, Y+5	; 0x05
    15d2:	3e 81       	ldd	r19, Y+6	; 0x06
    15d4:	b9 01       	movw	r22, r18
    15d6:	0e 94 2b 3a 	call	0x7456	; 0x7456 <memcpy>
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	9c 81       	ldd	r25, Y+4	; 0x04
    15de:	fc 01       	movw	r30, r24
    15e0:	26 81       	ldd	r18, Z+6	; 0x06
    15e2:	37 81       	ldd	r19, Z+7	; 0x07
    15e4:	8b 81       	ldd	r24, Y+3	; 0x03
    15e6:	9c 81       	ldd	r25, Y+4	; 0x04
    15e8:	fc 01       	movw	r30, r24
    15ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	91 95       	neg	r25
    15f2:	81 95       	neg	r24
    15f4:	91 09       	sbc	r25, r1
    15f6:	28 0f       	add	r18, r24
    15f8:	39 1f       	adc	r19, r25
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	fc 01       	movw	r30, r24
    1600:	37 83       	std	Z+7, r19	; 0x07
    1602:	26 83       	std	Z+6, r18	; 0x06
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	fc 01       	movw	r30, r24
    160a:	26 81       	ldd	r18, Z+6	; 0x06
    160c:	37 81       	ldd	r19, Z+7	; 0x07
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	fc 01       	movw	r30, r24
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	28 17       	cp	r18, r24
    161a:	39 07       	cpc	r19, r25
    161c:	a8 f4       	brcc	.+42     	; 0x1648 <prvCopyDataToQueue+0x16c>
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	fc 01       	movw	r30, r24
    1624:	24 81       	ldd	r18, Z+4	; 0x04
    1626:	35 81       	ldd	r19, Z+5	; 0x05
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	9c 81       	ldd	r25, Y+4	; 0x04
    162c:	fc 01       	movw	r30, r24
    162e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	91 95       	neg	r25
    1636:	81 95       	neg	r24
    1638:	91 09       	sbc	r25, r1
    163a:	28 0f       	add	r18, r24
    163c:	39 1f       	adc	r19, r25
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	fc 01       	movw	r30, r24
    1644:	37 83       	std	Z+7, r19	; 0x07
    1646:	26 83       	std	Z+6, r18	; 0x06
    1648:	8f 81       	ldd	r24, Y+7	; 0x07
    164a:	82 30       	cpi	r24, 0x02	; 2
    164c:	31 f4       	brne	.+12     	; 0x165a <prvCopyDataToQueue+0x17e>
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 23       	and	r24, r24
    1652:	19 f0       	breq	.+6      	; 0x165a <prvCopyDataToQueue+0x17e>
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	81 50       	subi	r24, 0x01	; 1
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	28 0f       	add	r18, r24
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	fc 01       	movw	r30, r24
    1666:	22 8f       	std	Z+26, r18	; 0x1a
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	27 96       	adiw	r28, 0x07	; 7
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	08 95       	ret

0000167c <prvCopyDataFromQueue>:
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 d0       	rcall	.+0      	; 0x1682 <prvCopyDataFromQueue+0x6>
    1682:	1f 92       	push	r1
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	9a 83       	std	Y+2, r25	; 0x02
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	7c 83       	std	Y+4, r23	; 0x04
    168e:	6b 83       	std	Y+3, r22	; 0x03
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	9a 81       	ldd	r25, Y+2	; 0x02
    1694:	fc 01       	movw	r30, r24
    1696:	84 8d       	ldd	r24, Z+28	; 0x1c
    1698:	88 23       	and	r24, r24
    169a:	c9 f1       	breq	.+114    	; 0x170e <prvCopyDataFromQueue+0x92>
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	9a 81       	ldd	r25, Y+2	; 0x02
    16a0:	fc 01       	movw	r30, r24
    16a2:	26 81       	ldd	r18, Z+6	; 0x06
    16a4:	37 81       	ldd	r19, Z+7	; 0x07
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	fc 01       	movw	r30, r24
    16ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	28 0f       	add	r18, r24
    16b4:	39 1f       	adc	r19, r25
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	fc 01       	movw	r30, r24
    16bc:	37 83       	std	Z+7, r19	; 0x07
    16be:	26 83       	std	Z+6, r18	; 0x06
    16c0:	89 81       	ldd	r24, Y+1	; 0x01
    16c2:	9a 81       	ldd	r25, Y+2	; 0x02
    16c4:	fc 01       	movw	r30, r24
    16c6:	26 81       	ldd	r18, Z+6	; 0x06
    16c8:	37 81       	ldd	r19, Z+7	; 0x07
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	fc 01       	movw	r30, r24
    16d0:	84 81       	ldd	r24, Z+4	; 0x04
    16d2:	95 81       	ldd	r25, Z+5	; 0x05
    16d4:	28 17       	cp	r18, r24
    16d6:	39 07       	cpc	r19, r25
    16d8:	50 f0       	brcs	.+20     	; 0x16ee <prvCopyDataFromQueue+0x72>
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	9a 81       	ldd	r25, Y+2	; 0x02
    16de:	fc 01       	movw	r30, r24
    16e0:	20 81       	ld	r18, Z
    16e2:	31 81       	ldd	r19, Z+1	; 0x01
    16e4:	89 81       	ldd	r24, Y+1	; 0x01
    16e6:	9a 81       	ldd	r25, Y+2	; 0x02
    16e8:	fc 01       	movw	r30, r24
    16ea:	37 83       	std	Z+7, r19	; 0x07
    16ec:	26 83       	std	Z+6, r18	; 0x06
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	fc 01       	movw	r30, r24
    16f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    16f6:	48 2f       	mov	r20, r24
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	fc 01       	movw	r30, r24
    1700:	26 81       	ldd	r18, Z+6	; 0x06
    1702:	37 81       	ldd	r19, Z+7	; 0x07
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	b9 01       	movw	r22, r18
    170a:	0e 94 2b 3a 	call	0x7456	; 0x7456 <memcpy>
    170e:	00 00       	nop
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	08 95       	ret

0000171e <prvUnlockQueue>:
    171e:	cf 93       	push	r28
    1720:	df 93       	push	r29
    1722:	00 d0       	rcall	.+0      	; 0x1724 <prvUnlockQueue+0x6>
    1724:	1f 92       	push	r1
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	0f 92       	push	r0
    1734:	8b 81       	ldd	r24, Y+3	; 0x03
    1736:	9c 81       	ldd	r25, Y+4	; 0x04
    1738:	fc 01       	movw	r30, r24
    173a:	86 8d       	ldd	r24, Z+30	; 0x1e
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	12 c0       	rjmp	.+36     	; 0x1764 <prvUnlockQueue+0x46>
    1740:	8b 81       	ldd	r24, Y+3	; 0x03
    1742:	9c 81       	ldd	r25, Y+4	; 0x04
    1744:	fc 01       	movw	r30, r24
    1746:	81 89       	ldd	r24, Z+17	; 0x11
    1748:	88 23       	and	r24, r24
    174a:	81 f0       	breq	.+32     	; 0x176c <prvUnlockQueue+0x4e>
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	9c 81       	ldd	r25, Y+4	; 0x04
    1750:	41 96       	adiw	r24, 0x11	; 17
    1752:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTaskRemoveFromEventList>
    1756:	88 23       	and	r24, r24
    1758:	11 f0       	breq	.+4      	; 0x175e <prvUnlockQueue+0x40>
    175a:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <vTaskMissedYield>
    175e:	89 81       	ldd	r24, Y+1	; 0x01
    1760:	81 50       	subi	r24, 0x01	; 1
    1762:	89 83       	std	Y+1, r24	; 0x01
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	18 16       	cp	r1, r24
    1768:	5c f3       	brlt	.-42     	; 0x1740 <prvUnlockQueue+0x22>
    176a:	01 c0       	rjmp	.+2      	; 0x176e <prvUnlockQueue+0x50>
    176c:	00 00       	nop
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	9c 81       	ldd	r25, Y+4	; 0x04
    1772:	2f ef       	ldi	r18, 0xFF	; 255
    1774:	fc 01       	movw	r30, r24
    1776:	26 8f       	std	Z+30, r18	; 0x1e
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	0f 92       	push	r0
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	fc 01       	movw	r30, r24
    1788:	85 8d       	ldd	r24, Z+29	; 0x1d
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	12 c0       	rjmp	.+36     	; 0x17b2 <prvUnlockQueue+0x94>
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	fc 01       	movw	r30, r24
    1794:	80 85       	ldd	r24, Z+8	; 0x08
    1796:	88 23       	and	r24, r24
    1798:	81 f0       	breq	.+32     	; 0x17ba <prvUnlockQueue+0x9c>
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	08 96       	adiw	r24, 0x08	; 8
    17a0:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <xTaskRemoveFromEventList>
    17a4:	88 23       	and	r24, r24
    17a6:	11 f0       	breq	.+4      	; 0x17ac <prvUnlockQueue+0x8e>
    17a8:	0e 94 17 17 	call	0x2e2e	; 0x2e2e <vTaskMissedYield>
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	81 50       	subi	r24, 0x01	; 1
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	8a 81       	ldd	r24, Y+2	; 0x02
    17b4:	18 16       	cp	r1, r24
    17b6:	5c f3       	brlt	.-42     	; 0x178e <prvUnlockQueue+0x70>
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <prvUnlockQueue+0x9e>
    17ba:	00 00       	nop
    17bc:	8b 81       	ldd	r24, Y+3	; 0x03
    17be:	9c 81       	ldd	r25, Y+4	; 0x04
    17c0:	2f ef       	ldi	r18, 0xFF	; 255
    17c2:	fc 01       	movw	r30, r24
    17c4:	25 8f       	std	Z+29, r18	; 0x1d
    17c6:	0f 90       	pop	r0
    17c8:	0f be       	out	0x3f, r0	; 63
    17ca:	00 00       	nop
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <prvIsQueueEmpty>:
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <prvIsQueueEmpty+0x6>
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	9b 83       	std	Y+3, r25	; 0x03
    17e6:	8a 83       	std	Y+2, r24	; 0x02
    17e8:	0f b6       	in	r0, 0x3f	; 63
    17ea:	f8 94       	cli
    17ec:	0f 92       	push	r0
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	9b 81       	ldd	r25, Y+3	; 0x03
    17f2:	fc 01       	movw	r30, r24
    17f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    17f6:	88 23       	and	r24, r24
    17f8:	19 f4       	brne	.+6      	; 0x1800 <prvIsQueueEmpty+0x26>
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	89 83       	std	Y+1, r24	; 0x01
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <prvIsQueueEmpty+0x28>
    1800:	19 82       	std	Y+1, r1	; 0x01
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	89 81       	ldd	r24, Y+1	; 0x01
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <prvIsQueueFull>:
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	00 d0       	rcall	.+0      	; 0x181a <prvIsQueueFull+0x6>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	9b 83       	std	Y+3, r25	; 0x03
    1820:	8a 83       	std	Y+2, r24	; 0x02
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	0f 92       	push	r0
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	fc 01       	movw	r30, r24
    182e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	9b 81       	ldd	r25, Y+3	; 0x03
    1834:	fc 01       	movw	r30, r24
    1836:	83 8d       	ldd	r24, Z+27	; 0x1b
    1838:	28 17       	cp	r18, r24
    183a:	19 f4       	brne	.+6      	; 0x1842 <prvIsQueueFull+0x2e>
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <prvIsQueueFull+0x30>
    1842:	19 82       	std	Y+1, r1	; 0x01
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	89 81       	ldd	r24, Y+1	; 0x01
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	08 95       	ret

00001856 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	cd b7       	in	r28, 0x3d	; 61
    185c:	de b7       	in	r29, 0x3e	; 62
    185e:	27 97       	sbiw	r28, 0x07	; 7
    1860:	0f b6       	in	r0, 0x3f	; 63
    1862:	f8 94       	cli
    1864:	de bf       	out	0x3e, r29	; 62
    1866:	0f be       	out	0x3f, r0	; 63
    1868:	cd bf       	out	0x3d, r28	; 61
    186a:	9c 83       	std	Y+4, r25	; 0x04
    186c:	8b 83       	std	Y+3, r24	; 0x03
    186e:	7e 83       	std	Y+6, r23	; 0x06
    1870:	6d 83       	std	Y+5, r22	; 0x05
    1872:	4f 83       	std	Y+7, r20	; 0x07
    Queue_t * const pxQueue = xQueue;
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	9a 83       	std	Y+2, r25	; 0x02
    187a:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	0f 92       	push	r0
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	9a 81       	ldd	r25, Y+2	; 0x02
    1886:	fc 01       	movw	r30, r24
    1888:	85 8d       	ldd	r24, Z+29	; 0x1d
    188a:	8f 3f       	cpi	r24, 0xFF	; 255
    188c:	21 f4       	brne	.+8      	; 0x1896 <vQueueWaitForMessageRestricted+0x40>
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	9a 81       	ldd	r25, Y+2	; 0x02
    1892:	fc 01       	movw	r30, r24
    1894:	15 8e       	std	Z+29, r1	; 0x1d
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	9a 81       	ldd	r25, Y+2	; 0x02
    189a:	fc 01       	movw	r30, r24
    189c:	86 8d       	ldd	r24, Z+30	; 0x1e
    189e:	8f 3f       	cpi	r24, 0xFF	; 255
    18a0:	21 f4       	brne	.+8      	; 0x18aa <vQueueWaitForMessageRestricted+0x54>
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	fc 01       	movw	r30, r24
    18a8:	16 8e       	std	Z+30, r1	; 0x1e
    18aa:	0f 90       	pop	r0
    18ac:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	fc 01       	movw	r30, r24
    18b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    18b6:	88 23       	and	r24, r24
    18b8:	49 f4       	brne	.+18     	; 0x18cc <vQueueWaitForMessageRestricted+0x76>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	9a 81       	ldd	r25, Y+2	; 0x02
    18be:	41 96       	adiw	r24, 0x11	; 17
    18c0:	2d 81       	ldd	r18, Y+5	; 0x05
    18c2:	3e 81       	ldd	r19, Y+6	; 0x06
    18c4:	4f 81       	ldd	r20, Y+7	; 0x07
    18c6:	b9 01       	movw	r22, r18
    18c8:	0e 94 ef 15 	call	0x2bde	; 0x2bde <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	9a 81       	ldd	r25, Y+2	; 0x02
    18d0:	26 df       	rcall	.-436    	; 0x171e <prvUnlockQueue>
    }
    18d2:	00 00       	nop
    18d4:	27 96       	adiw	r28, 0x07	; 7
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	08 95       	ret

000018e6 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    18e6:	0f 93       	push	r16
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	28 97       	sbiw	r28, 0x08	; 8
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	9d 83       	std	Y+5, r25	; 0x05
    18fe:	8c 83       	std	Y+4, r24	; 0x04
    1900:	7f 83       	std	Y+7, r23	; 0x07
    1902:	6e 83       	std	Y+6, r22	; 0x06
    1904:	48 87       	std	Y+8, r20	; 0x08
    1906:	88 85       	ldd	r24, Y+8	; 0x08
    1908:	81 30       	cpi	r24, 0x01	; 1
    190a:	19 f4       	brne	.+6      	; 0x1912 <xStreamBufferGenericCreate+0x2c>
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	01 c0       	rjmp	.+2      	; 0x1914 <xStreamBufferGenericCreate+0x2e>
    1912:	19 82       	std	Y+1, r1	; 0x01
    1914:	8e 81       	ldd	r24, Y+6	; 0x06
    1916:	9f 81       	ldd	r25, Y+7	; 0x07
    1918:	89 2b       	or	r24, r25
    191a:	21 f4       	brne	.+8      	; 0x1924 <xStreamBufferGenericCreate+0x3e>
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9f 83       	std	Y+7, r25	; 0x07
    1922:	8e 83       	std	Y+6, r24	; 0x06
    1924:	8c 81       	ldd	r24, Y+4	; 0x04
    1926:	9d 81       	ldd	r25, Y+5	; 0x05
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	9d 83       	std	Y+5, r25	; 0x05
    192c:	8c 83       	std	Y+4, r24	; 0x04
    192e:	8c 81       	ldd	r24, Y+4	; 0x04
    1930:	9d 81       	ldd	r25, Y+5	; 0x05
    1932:	40 96       	adiw	r24, 0x10	; 16
    1934:	0e 94 ce 01 	call	0x39c	; 0x39c <pvPortMalloc>
    1938:	9b 83       	std	Y+3, r25	; 0x03
    193a:	8a 83       	std	Y+2, r24	; 0x02
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	9b 81       	ldd	r25, Y+3	; 0x03
    1940:	89 2b       	or	r24, r25
    1942:	69 f0       	breq	.+26     	; 0x195e <xStreamBufferGenericCreate+0x78>
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	9b 81       	ldd	r25, Y+3	; 0x03
    1948:	bc 01       	movw	r22, r24
    194a:	60 5f       	subi	r22, 0xF0	; 240
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	2e 81       	ldd	r18, Y+6	; 0x06
    1950:	3f 81       	ldd	r19, Y+7	; 0x07
    1952:	4c 81       	ldd	r20, Y+4	; 0x04
    1954:	5d 81       	ldd	r21, Y+5	; 0x05
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	9b 81       	ldd	r25, Y+3	; 0x03
    195a:	09 81       	ldd	r16, Y+1	; 0x01
    195c:	30 d4       	rcall	.+2144   	; 0x21be <prvInitialiseNewStreamBuffer>
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	9b 81       	ldd	r25, Y+3	; 0x03
    1962:	28 96       	adiw	r28, 0x08	; 8
    1964:	0f b6       	in	r0, 0x3f	; 63
    1966:	f8 94       	cli
    1968:	de bf       	out	0x3e, r29	; 62
    196a:	0f be       	out	0x3f, r0	; 63
    196c:	cd bf       	out	0x3d, r28	; 61
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <xStreamBufferReset>:
    1976:	0f 93       	push	r16
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	00 d0       	rcall	.+0      	; 0x197e <xStreamBufferReset+0x8>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <xStreamBufferReset+0xa>
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	9b 83       	std	Y+3, r25	; 0x03
    198e:	8a 83       	std	Y+2, r24	; 0x02
    1990:	19 82       	std	Y+1, r1	; 0x01
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	9b 81       	ldd	r25, Y+3	; 0x03
    1996:	dc 01       	movw	r26, r24
    1998:	1f 96       	adiw	r26, 0x0f	; 15
    199a:	8c 91       	ld	r24, X
    199c:	8c 83       	std	Y+4, r24	; 0x04
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	0f 92       	push	r0
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 85       	ldd	r24, Z+8	; 0x08
    19ac:	91 85       	ldd	r25, Z+9	; 0x09
    19ae:	89 2b       	or	r24, r25
    19b0:	71 f5       	brne	.+92     	; 0x1a0e <xStreamBufferReset+0x98>
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	9b 81       	ldd	r25, Y+3	; 0x03
    19b6:	dc 01       	movw	r26, r24
    19b8:	1a 96       	adiw	r26, 0x0a	; 10
    19ba:	8d 91       	ld	r24, X+
    19bc:	9c 91       	ld	r25, X
    19be:	1b 97       	sbiw	r26, 0x0b	; 11
    19c0:	89 2b       	or	r24, r25
    19c2:	29 f5       	brne	.+74     	; 0x1a0e <xStreamBufferReset+0x98>
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	9b 81       	ldd	r25, Y+3	; 0x03
    19c8:	dc 01       	movw	r26, r24
    19ca:	1e 96       	adiw	r26, 0x0e	; 14
    19cc:	ec 91       	ld	r30, X
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	9b 81       	ldd	r25, Y+3	; 0x03
    19d2:	dc 01       	movw	r26, r24
    19d4:	16 96       	adiw	r26, 0x06	; 6
    19d6:	2d 91       	ld	r18, X+
    19d8:	3c 91       	ld	r19, X
    19da:	17 97       	sbiw	r26, 0x07	; 7
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	dc 01       	movw	r26, r24
    19e2:	14 96       	adiw	r26, 0x04	; 4
    19e4:	4d 91       	ld	r20, X+
    19e6:	5c 91       	ld	r21, X
    19e8:	15 97       	sbiw	r26, 0x05	; 5
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	dc 01       	movw	r26, r24
    19f0:	1c 96       	adiw	r26, 0x0c	; 12
    19f2:	6d 91       	ld	r22, X+
    19f4:	7c 91       	ld	r23, X
    19f6:	1d 97       	sbiw	r26, 0x0d	; 13
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	9b 81       	ldd	r25, Y+3	; 0x03
    19fc:	0e 2f       	mov	r16, r30
    19fe:	df d3       	rcall	.+1982   	; 0x21be <prvInitialiseNewStreamBuffer>
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	2c 81       	ldd	r18, Y+4	; 0x04
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	27 87       	std	Z+15, r18	; 0x0f
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	26 96       	adiw	r28, 0x06	; 6
    1a16:	0f b6       	in	r0, 0x3f	; 63
    1a18:	f8 94       	cli
    1a1a:	de bf       	out	0x3e, r29	; 62
    1a1c:	0f be       	out	0x3f, r0	; 63
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <xStreamBufferSpacesAvailable>:
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	00 d0       	rcall	.+0      	; 0x1a2e <xStreamBufferSpacesAvailable+0x6>
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <xStreamBufferSpacesAvailable+0x8>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	9e 83       	std	Y+6, r25	; 0x06
    1a36:	8d 83       	std	Y+5, r24	; 0x05
    1a38:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3c:	9c 83       	std	Y+4, r25	; 0x04
    1a3e:	8b 83       	std	Y+3, r24	; 0x03
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	9c 81       	ldd	r25, Y+4	; 0x04
    1a44:	fc 01       	movw	r30, r24
    1a46:	24 81       	ldd	r18, Z+4	; 0x04
    1a48:	35 81       	ldd	r19, Z+5	; 0x05
    1a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4e:	fc 01       	movw	r30, r24
    1a50:	80 81       	ld	r24, Z
    1a52:	91 81       	ldd	r25, Z+1	; 0x01
    1a54:	82 0f       	add	r24, r18
    1a56:	93 1f       	adc	r25, r19
    1a58:	9a 83       	std	Y+2, r25	; 0x02
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	fc 01       	movw	r30, r24
    1a62:	82 81       	ldd	r24, Z+2	; 0x02
    1a64:	93 81       	ldd	r25, Z+3	; 0x03
    1a66:	29 81       	ldd	r18, Y+1	; 0x01
    1a68:	3a 81       	ldd	r19, Y+2	; 0x02
    1a6a:	a9 01       	movw	r20, r18
    1a6c:	48 1b       	sub	r20, r24
    1a6e:	59 0b       	sbc	r21, r25
    1a70:	ca 01       	movw	r24, r20
    1a72:	9a 83       	std	Y+2, r25	; 0x02
    1a74:	89 83       	std	Y+1, r24	; 0x01
    1a76:	89 81       	ldd	r24, Y+1	; 0x01
    1a78:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7a:	01 97       	sbiw	r24, 0x01	; 1
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	fc 01       	movw	r30, r24
    1a86:	24 81       	ldd	r18, Z+4	; 0x04
    1a88:	35 81       	ldd	r19, Z+5	; 0x05
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	82 17       	cp	r24, r18
    1a90:	93 07       	cpc	r25, r19
    1a92:	68 f0       	brcs	.+26     	; 0x1aae <xStreamBufferSpacesAvailable+0x86>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	fc 01       	movw	r30, r24
    1a9a:	84 81       	ldd	r24, Z+4	; 0x04
    1a9c:	95 81       	ldd	r25, Z+5	; 0x05
    1a9e:	29 81       	ldd	r18, Y+1	; 0x01
    1aa0:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa2:	a9 01       	movw	r20, r18
    1aa4:	48 1b       	sub	r20, r24
    1aa6:	59 0b       	sbc	r21, r25
    1aa8:	ca 01       	movw	r24, r20
    1aaa:	9a 83       	std	Y+2, r25	; 0x02
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	26 96       	adiw	r28, 0x06	; 6
    1ab4:	0f b6       	in	r0, 0x3f	; 63
    1ab6:	f8 94       	cli
    1ab8:	de bf       	out	0x3e, r29	; 62
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	cd bf       	out	0x3d, r28	; 61
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	08 95       	ret

00001ac4 <xStreamBufferSendFromISR>:
    1ac4:	ef 92       	push	r14
    1ac6:	ff 92       	push	r15
    1ac8:	0f 93       	push	r16
    1aca:	1f 93       	push	r17
    1acc:	cf 93       	push	r28
    1ace:	df 93       	push	r29
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	61 97       	sbiw	r28, 0x11	; 17
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	9b 87       	std	Y+11, r25	; 0x0b
    1ae2:	8a 87       	std	Y+10, r24	; 0x0a
    1ae4:	7d 87       	std	Y+13, r23	; 0x0d
    1ae6:	6c 87       	std	Y+12, r22	; 0x0c
    1ae8:	5f 87       	std	Y+15, r21	; 0x0f
    1aea:	4e 87       	std	Y+14, r20	; 0x0e
    1aec:	39 8b       	std	Y+17, r19	; 0x11
    1aee:	28 8b       	std	Y+16, r18	; 0x10
    1af0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af4:	9c 83       	std	Y+4, r25	; 0x04
    1af6:	8b 83       	std	Y+3, r24	; 0x03
    1af8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1afa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	fc 01       	movw	r30, r24
    1b06:	86 85       	ldd	r24, Z+14	; 0x0e
    1b08:	88 2f       	mov	r24, r24
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	81 70       	andi	r24, 0x01	; 1
    1b0e:	99 27       	eor	r25, r25
    1b10:	89 2b       	or	r24, r25
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <xStreamBufferSendFromISR+0x5a>
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	9a 81       	ldd	r25, Y+2	; 0x02
    1b18:	02 96       	adiw	r24, 0x02	; 2
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	82 df       	rcall	.-252    	; 0x1a28 <xStreamBufferSpacesAvailable>
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b30:	4e 85       	ldd	r20, Y+14	; 0x0e
    1b32:	5f 85       	ldd	r21, Y+15	; 0x0f
    1b34:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b36:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3c:	8f 01       	movw	r16, r30
    1b3e:	3e d0       	rcall	.+124    	; 0x1bbc <prvWriteMessageToBuffer>
    1b40:	98 87       	std	Y+8, r25	; 0x08
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	8f 81       	ldd	r24, Y+7	; 0x07
    1b46:	98 85       	ldd	r25, Y+8	; 0x08
    1b48:	89 2b       	or	r24, r25
    1b4a:	49 f1       	breq	.+82     	; 0x1b9e <xStreamBufferSendFromISR+0xda>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	f3 d2       	rcall	.+1510   	; 0x2138 <prvBytesInBuffer>
    1b52:	9c 01       	movw	r18, r24
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	9c 81       	ldd	r25, Y+4	; 0x04
    1b58:	fc 01       	movw	r30, r24
    1b5a:	86 81       	ldd	r24, Z+6	; 0x06
    1b5c:	97 81       	ldd	r25, Z+7	; 0x07
    1b5e:	28 17       	cp	r18, r24
    1b60:	39 07       	cpc	r19, r25
    1b62:	e8 f0       	brcs	.+58     	; 0x1b9e <xStreamBufferSendFromISR+0xda>
    1b64:	19 86       	std	Y+9, r1	; 0x09
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	80 85       	ldd	r24, Z+8	; 0x08
    1b6e:	91 85       	ldd	r25, Z+9	; 0x09
    1b70:	89 2b       	or	r24, r25
    1b72:	a9 f0       	breq	.+42     	; 0x1b9e <xStreamBufferSendFromISR+0xda>
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	fc 01       	movw	r30, r24
    1b7a:	80 85       	ldd	r24, Z+8	; 0x08
    1b7c:	91 85       	ldd	r25, Z+9	; 0x09
    1b7e:	28 89       	ldd	r18, Y+16	; 0x10
    1b80:	39 89       	ldd	r19, Y+17	; 0x11
    1b82:	79 01       	movw	r14, r18
    1b84:	00 e0       	ldi	r16, 0x00	; 0
    1b86:	10 e0       	ldi	r17, 0x00	; 0
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	50 e0       	ldi	r21, 0x00	; 0
    1b8e:	ba 01       	movw	r22, r20
    1b90:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <xTaskGenericNotifyFromISR>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	fc 01       	movw	r30, r24
    1b9a:	11 86       	std	Z+9, r1	; 0x09
    1b9c:	10 86       	std	Z+8, r1	; 0x08
    1b9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba0:	98 85       	ldd	r25, Y+8	; 0x08
    1ba2:	61 96       	adiw	r28, 0x11	; 17
    1ba4:	0f b6       	in	r0, 0x3f	; 63
    1ba6:	f8 94       	cli
    1ba8:	de bf       	out	0x3e, r29	; 62
    1baa:	0f be       	out	0x3f, r0	; 63
    1bac:	cd bf       	out	0x3d, r28	; 61
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	ff 90       	pop	r15
    1bb8:	ef 90       	pop	r14
    1bba:	08 95       	ret

00001bbc <prvWriteMessageToBuffer>:
    1bbc:	0f 93       	push	r16
    1bbe:	1f 93       	push	r17
    1bc0:	cf 93       	push	r28
    1bc2:	df 93       	push	r29
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	61 97       	sbiw	r28, 0x11	; 17
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	de bf       	out	0x3e, r29	; 62
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	cd bf       	out	0x3d, r28	; 61
    1bd4:	99 87       	std	Y+9, r25	; 0x09
    1bd6:	88 87       	std	Y+8, r24	; 0x08
    1bd8:	7b 87       	std	Y+11, r23	; 0x0b
    1bda:	6a 87       	std	Y+10, r22	; 0x0a
    1bdc:	5d 87       	std	Y+13, r21	; 0x0d
    1bde:	4c 87       	std	Y+12, r20	; 0x0c
    1be0:	3f 87       	std	Y+15, r19	; 0x0f
    1be2:	2e 87       	std	Y+14, r18	; 0x0e
    1be4:	19 8b       	std	Y+17, r17	; 0x11
    1be6:	08 8b       	std	Y+16, r16	; 0x10
    1be8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bec:	89 2b       	or	r24, r25
    1bee:	11 f4       	brne	.+4      	; 0x1bf4 <prvWriteMessageToBuffer+0x38>
    1bf0:	19 82       	std	Y+1, r1	; 0x01
    1bf2:	33 c0       	rjmp	.+102    	; 0x1c5a <prvWriteMessageToBuffer+0x9e>
    1bf4:	88 85       	ldd	r24, Y+8	; 0x08
    1bf6:	99 85       	ldd	r25, Y+9	; 0x09
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	86 85       	ldd	r24, Z+14	; 0x0e
    1bfc:	88 2f       	mov	r24, r24
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	81 70       	andi	r24, 0x01	; 1
    1c02:	99 27       	eor	r25, r25
    1c04:	89 2b       	or	r24, r25
    1c06:	a9 f4       	brne	.+42     	; 0x1c32 <prvWriteMessageToBuffer+0x76>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c10:	9d 83       	std	Y+5, r25	; 0x05
    1c12:	8c 83       	std	Y+4, r24	; 0x04
    1c14:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c16:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c18:	9f 83       	std	Y+7, r25	; 0x07
    1c1a:	8e 83       	std	Y+6, r24	; 0x06
    1c1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c20:	8e 81       	ldd	r24, Y+6	; 0x06
    1c22:	9f 81       	ldd	r25, Y+7	; 0x07
    1c24:	28 17       	cp	r18, r24
    1c26:	39 07       	cpc	r19, r25
    1c28:	08 f4       	brcc	.+2      	; 0x1c2c <prvWriteMessageToBuffer+0x70>
    1c2a:	c9 01       	movw	r24, r18
    1c2c:	9d 87       	std	Y+13, r25	; 0x0d
    1c2e:	8c 87       	std	Y+12, r24	; 0x0c
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <prvWriteMessageToBuffer+0x9e>
    1c32:	2e 85       	ldd	r18, Y+14	; 0x0e
    1c34:	3f 85       	ldd	r19, Y+15	; 0x0f
    1c36:	88 89       	ldd	r24, Y+16	; 0x10
    1c38:	99 89       	ldd	r25, Y+17	; 0x11
    1c3a:	28 17       	cp	r18, r24
    1c3c:	39 07       	cpc	r19, r25
    1c3e:	60 f0       	brcs	.+24     	; 0x1c58 <prvWriteMessageToBuffer+0x9c>
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	9e 01       	movw	r18, r28
    1c46:	24 5f       	subi	r18, 0xF4	; 244
    1c48:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4a:	88 85       	ldd	r24, Y+8	; 0x08
    1c4c:	99 85       	ldd	r25, Y+9	; 0x09
    1c4e:	42 e0       	ldi	r20, 0x02	; 2
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	b9 01       	movw	r22, r18
    1c54:	3b d1       	rcall	.+630    	; 0x1ecc <prvWriteBytesToBuffer>
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <prvWriteMessageToBuffer+0x9e>
    1c58:	19 82       	std	Y+1, r1	; 0x01
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	88 23       	and	r24, r24
    1c5e:	59 f0       	breq	.+22     	; 0x1c76 <prvWriteMessageToBuffer+0xba>
    1c60:	4c 85       	ldd	r20, Y+12	; 0x0c
    1c62:	5d 85       	ldd	r21, Y+13	; 0x0d
    1c64:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c66:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c68:	88 85       	ldd	r24, Y+8	; 0x08
    1c6a:	99 85       	ldd	r25, Y+9	; 0x09
    1c6c:	b9 01       	movw	r22, r18
    1c6e:	2e d1       	rcall	.+604    	; 0x1ecc <prvWriteBytesToBuffer>
    1c70:	9b 83       	std	Y+3, r25	; 0x03
    1c72:	8a 83       	std	Y+2, r24	; 0x02
    1c74:	02 c0       	rjmp	.+4      	; 0x1c7a <prvWriteMessageToBuffer+0xbe>
    1c76:	1b 82       	std	Y+3, r1	; 0x03
    1c78:	1a 82       	std	Y+2, r1	; 0x02
    1c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c7e:	61 96       	adiw	r28, 0x11	; 17
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <xStreamBufferReceive>:
    1c94:	ef 92       	push	r14
    1c96:	ff 92       	push	r15
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	60 97       	sbiw	r28, 0x10	; 16
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	9a 87       	std	Y+10, r25	; 0x0a
    1cb2:	89 87       	std	Y+9, r24	; 0x09
    1cb4:	7c 87       	std	Y+12, r23	; 0x0c
    1cb6:	6b 87       	std	Y+11, r22	; 0x0b
    1cb8:	5e 87       	std	Y+14, r21	; 0x0e
    1cba:	4d 87       	std	Y+13, r20	; 0x0d
    1cbc:	38 8b       	std	Y+16, r19	; 0x10
    1cbe:	2f 87       	std	Y+15, r18	; 0x0f
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	98 87       	std	Y+8, r25	; 0x08
    1cc6:	8f 83       	std	Y+7, r24	; 0x07
    1cc8:	1a 82       	std	Y+2, r1	; 0x02
    1cca:	19 82       	std	Y+1, r1	; 0x01
    1ccc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cce:	98 85       	ldd	r25, Y+8	; 0x08
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	86 85       	ldd	r24, Z+14	; 0x0e
    1cd4:	88 2f       	mov	r24, r24
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	81 70       	andi	r24, 0x01	; 1
    1cda:	99 27       	eor	r25, r25
    1cdc:	89 2b       	or	r24, r25
    1cde:	29 f0       	breq	.+10     	; 0x1cea <xStreamBufferReceive+0x56>
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <xStreamBufferReceive+0x5a>
    1cea:	1e 82       	std	Y+6, r1	; 0x06
    1cec:	1d 82       	std	Y+5, r1	; 0x05
    1cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf0:	98 89       	ldd	r25, Y+16	; 0x10
    1cf2:	89 2b       	or	r24, r25
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <xStreamBufferReceive+0x64>
    1cf6:	3c c0       	rjmp	.+120    	; 0x1d70 <xStreamBufferReceive+0xdc>
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	f8 94       	cli
    1cfc:	0f 92       	push	r0
    1cfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1d00:	98 85       	ldd	r25, Y+8	; 0x08
    1d02:	1a d2       	rcall	.+1076   	; 0x2138 <prvBytesInBuffer>
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	82 17       	cp	r24, r18
    1d12:	93 07       	cpc	r25, r19
    1d14:	60 f0       	brcs	.+24     	; 0x1d2e <xStreamBufferReceive+0x9a>
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <xTaskNotifyStateClear>
    1d1e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <xTaskGetCurrentTaskHandle>
    1d22:	9c 01       	movw	r18, r24
    1d24:	8f 81       	ldd	r24, Y+7	; 0x07
    1d26:	98 85       	ldd	r25, Y+8	; 0x08
    1d28:	fc 01       	movw	r30, r24
    1d2a:	31 87       	std	Z+9, r19	; 0x09
    1d2c:	20 87       	std	Z+8, r18	; 0x08
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	2b 81       	ldd	r18, Y+3	; 0x03
    1d34:	3c 81       	ldd	r19, Y+4	; 0x04
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	82 17       	cp	r24, r18
    1d3c:	93 07       	cpc	r25, r19
    1d3e:	e8 f0       	brcs	.+58     	; 0x1d7a <xStreamBufferReceive+0xe6>
    1d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d42:	98 89       	ldd	r25, Y+16	; 0x10
    1d44:	7c 01       	movw	r14, r24
    1d46:	00 e0       	ldi	r16, 0x00	; 0
    1d48:	10 e0       	ldi	r17, 0x00	; 0
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	a9 01       	movw	r20, r18
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	70 e0       	ldi	r23, 0x00	; 0
    1d54:	cb 01       	movw	r24, r22
    1d56:	0e 94 ed 19 	call	0x33da	; 0x33da <xTaskNotifyWait>
    1d5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1d5c:	98 85       	ldd	r25, Y+8	; 0x08
    1d5e:	fc 01       	movw	r30, r24
    1d60:	11 86       	std	Z+9, r1	; 0x09
    1d62:	10 86       	std	Z+8, r1	; 0x08
    1d64:	8f 81       	ldd	r24, Y+7	; 0x07
    1d66:	98 85       	ldd	r25, Y+8	; 0x08
    1d68:	e7 d1       	rcall	.+974    	; 0x2138 <prvBytesInBuffer>
    1d6a:	9c 83       	std	Y+4, r25	; 0x04
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
    1d6e:	05 c0       	rjmp	.+10     	; 0x1d7a <xStreamBufferReceive+0xe6>
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	98 85       	ldd	r25, Y+8	; 0x08
    1d74:	e1 d1       	rcall	.+962    	; 0x2138 <prvBytesInBuffer>
    1d76:	9c 83       	std	Y+4, r25	; 0x04
    1d78:	8b 83       	std	Y+3, r24	; 0x03
    1d7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	82 17       	cp	r24, r18
    1d84:	93 07       	cpc	r25, r19
    1d86:	68 f5       	brcc	.+90     	; 0x1de2 <xStreamBufferReceive+0x14e>
    1d88:	ed 81       	ldd	r30, Y+5	; 0x05
    1d8a:	fe 81       	ldd	r31, Y+6	; 0x06
    1d8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d90:	4d 85       	ldd	r20, Y+13	; 0x0d
    1d92:	5e 85       	ldd	r21, Y+14	; 0x0e
    1d94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d98:	8f 81       	ldd	r24, Y+7	; 0x07
    1d9a:	98 85       	ldd	r25, Y+8	; 0x08
    1d9c:	8f 01       	movw	r16, r30
    1d9e:	30 d0       	rcall	.+96     	; 0x1e00 <prvReadMessageFromBuffer>
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	89 2b       	or	r24, r25
    1daa:	d9 f0       	breq	.+54     	; 0x1de2 <xStreamBufferReceive+0x14e>
    1dac:	7d d4       	rcall	.+2298   	; 0x26a8 <vTaskSuspendAll>
    1dae:	8f 81       	ldd	r24, Y+7	; 0x07
    1db0:	98 85       	ldd	r25, Y+8	; 0x08
    1db2:	fc 01       	movw	r30, r24
    1db4:	82 85       	ldd	r24, Z+10	; 0x0a
    1db6:	93 85       	ldd	r25, Z+11	; 0x0b
    1db8:	89 2b       	or	r24, r25
    1dba:	91 f0       	breq	.+36     	; 0x1de0 <xStreamBufferReceive+0x14c>
    1dbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dbe:	98 85       	ldd	r25, Y+8	; 0x08
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	82 85       	ldd	r24, Z+10	; 0x0a
    1dc4:	93 85       	ldd	r25, Z+11	; 0x0b
    1dc6:	00 e0       	ldi	r16, 0x00	; 0
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	ba 01       	movw	r22, r20
    1dd2:	0e 94 92 1a 	call	0x3524	; 0x3524 <xTaskGenericNotify>
    1dd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd8:	98 85       	ldd	r25, Y+8	; 0x08
    1dda:	fc 01       	movw	r30, r24
    1ddc:	13 86       	std	Z+11, r1	; 0x0b
    1dde:	12 86       	std	Z+10, r1	; 0x0a
    1de0:	70 d4       	rcall	.+2272   	; 0x26c2 <xTaskResumeAll>
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	60 96       	adiw	r28, 0x10	; 16
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	ff 90       	pop	r15
    1dfc:	ef 90       	pop	r14
    1dfe:	08 95       	ret

00001e00 <prvReadMessageFromBuffer>:
    1e00:	0f 93       	push	r16
    1e02:	1f 93       	push	r17
    1e04:	cf 93       	push	r28
    1e06:	df 93       	push	r29
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	62 97       	sbiw	r28, 0x12	; 18
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	9a 87       	std	Y+10, r25	; 0x0a
    1e1a:	89 87       	std	Y+9, r24	; 0x09
    1e1c:	7c 87       	std	Y+12, r23	; 0x0c
    1e1e:	6b 87       	std	Y+11, r22	; 0x0b
    1e20:	5e 87       	std	Y+14, r21	; 0x0e
    1e22:	4d 87       	std	Y+13, r20	; 0x0d
    1e24:	38 8b       	std	Y+16, r19	; 0x10
    1e26:	2f 87       	std	Y+15, r18	; 0x0f
    1e28:	1a 8b       	std	Y+18, r17	; 0x12
    1e2a:	09 8b       	std	Y+17, r16	; 0x11
    1e2c:	89 89       	ldd	r24, Y+17	; 0x11
    1e2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e30:	89 2b       	or	r24, r25
    1e32:	81 f1       	breq	.+96     	; 0x1e94 <prvReadMessageFromBuffer+0x94>
    1e34:	89 85       	ldd	r24, Y+9	; 0x09
    1e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e38:	fc 01       	movw	r30, r24
    1e3a:	80 81       	ld	r24, Z
    1e3c:	91 81       	ldd	r25, Z+1	; 0x01
    1e3e:	9c 83       	std	Y+4, r25	; 0x04
    1e40:	8b 83       	std	Y+3, r24	; 0x03
    1e42:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e44:	38 89       	ldd	r19, Y+16	; 0x10
    1e46:	49 89       	ldd	r20, Y+17	; 0x11
    1e48:	5a 89       	ldd	r21, Y+18	; 0x12
    1e4a:	be 01       	movw	r22, r28
    1e4c:	69 5f       	subi	r22, 0xF9	; 249
    1e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	ca d0       	rcall	.+404    	; 0x1fea <prvReadBytesFromBuffer>
    1e56:	8f 81       	ldd	r24, Y+7	; 0x07
    1e58:	98 85       	ldd	r25, Y+8	; 0x08
    1e5a:	9a 83       	std	Y+2, r25	; 0x02
    1e5c:	89 83       	std	Y+1, r24	; 0x01
    1e5e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e60:	38 89       	ldd	r19, Y+16	; 0x10
    1e62:	89 89       	ldd	r24, Y+17	; 0x11
    1e64:	9a 89       	ldd	r25, Y+18	; 0x12
    1e66:	a9 01       	movw	r20, r18
    1e68:	48 1b       	sub	r20, r24
    1e6a:	59 0b       	sbc	r21, r25
    1e6c:	ca 01       	movw	r24, r20
    1e6e:	98 8b       	std	Y+16, r25	; 0x10
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
    1e72:	29 81       	ldd	r18, Y+1	; 0x01
    1e74:	3a 81       	ldd	r19, Y+2	; 0x02
    1e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7a:	82 17       	cp	r24, r18
    1e7c:	93 07       	cpc	r25, r19
    1e7e:	70 f4       	brcc	.+28     	; 0x1e9c <prvReadMessageFromBuffer+0x9c>
    1e80:	89 85       	ldd	r24, Y+9	; 0x09
    1e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e84:	2b 81       	ldd	r18, Y+3	; 0x03
    1e86:	3c 81       	ldd	r19, Y+4	; 0x04
    1e88:	fc 01       	movw	r30, r24
    1e8a:	31 83       	std	Z+1, r19	; 0x01
    1e8c:	20 83       	st	Z, r18
    1e8e:	1a 82       	std	Y+2, r1	; 0x02
    1e90:	19 82       	std	Y+1, r1	; 0x01
    1e92:	04 c0       	rjmp	.+8      	; 0x1e9c <prvReadMessageFromBuffer+0x9c>
    1e94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e98:	9a 83       	std	Y+2, r25	; 0x02
    1e9a:	89 83       	std	Y+1, r24	; 0x01
    1e9c:	2f 85       	ldd	r18, Y+15	; 0x0f
    1e9e:	38 89       	ldd	r19, Y+16	; 0x10
    1ea0:	49 81       	ldd	r20, Y+1	; 0x01
    1ea2:	5a 81       	ldd	r21, Y+2	; 0x02
    1ea4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	9e d0       	rcall	.+316    	; 0x1fea <prvReadBytesFromBuffer>
    1eae:	9e 83       	std	Y+6, r25	; 0x06
    1eb0:	8d 83       	std	Y+5, r24	; 0x05
    1eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb6:	62 96       	adiw	r28, 0x12	; 18
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	08 95       	ret

00001ecc <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    1ecc:	cf 93       	push	r28
    1ece:	df 93       	push	r29
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	9a 87       	std	Y+10, r25	; 0x0a
    1ee2:	89 87       	std	Y+9, r24	; 0x09
    1ee4:	7c 87       	std	Y+12, r23	; 0x0c
    1ee6:	6b 87       	std	Y+11, r22	; 0x0b
    1ee8:	5e 87       	std	Y+14, r21	; 0x0e
    1eea:	4d 87       	std	Y+13, r20	; 0x0d
size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    1eec:	89 85       	ldd	r24, Y+9	; 0x09
    1eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	93 81       	ldd	r25, Z+3	; 0x03
    1ef6:	9a 83       	std	Y+2, r25	; 0x02
    1ef8:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
    which may be less than the total number of bytes that need to be added if
    the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	fc 01       	movw	r30, r24
    1f00:	24 81       	ldd	r18, Z+4	; 0x04
    1f02:	35 81       	ldd	r19, Z+5	; 0x05
    1f04:	89 81       	ldd	r24, Y+1	; 0x01
    1f06:	9a 81       	ldd	r25, Y+2	; 0x02
    1f08:	a9 01       	movw	r20, r18
    1f0a:	48 1b       	sub	r20, r24
    1f0c:	59 0b       	sbc	r21, r25
    1f0e:	ca 01       	movw	r24, r20
    1f10:	9c 83       	std	Y+4, r25	; 0x04
    1f12:	8b 83       	std	Y+3, r24	; 0x03
    1f14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f18:	9e 83       	std	Y+6, r25	; 0x06
    1f1a:	8d 83       	std	Y+5, r24	; 0x05
    1f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	28 17       	cp	r18, r24
    1f26:	39 07       	cpc	r19, r25
    1f28:	08 f4       	brcc	.+2      	; 0x1f2c <prvWriteBytesToBuffer+0x60>
    1f2a:	c9 01       	movw	r24, r18
    1f2c:	98 87       	std	Y+8, r25	; 0x08
    1f2e:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    1f30:	89 85       	ldd	r24, Y+9	; 0x09
    1f32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f34:	fc 01       	movw	r30, r24
    1f36:	24 85       	ldd	r18, Z+12	; 0x0c
    1f38:	35 85       	ldd	r19, Z+13	; 0x0d
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3e:	82 0f       	add	r24, r18
    1f40:	93 1f       	adc	r25, r19
    1f42:	4f 81       	ldd	r20, Y+7	; 0x07
    1f44:	58 85       	ldd	r21, Y+8	; 0x08
    1f46:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f48:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	0e 94 2b 3a 	call	0x7456	; 0x7456 <memcpy>

    /* If the number of bytes written was less than the number that could be
    written in the first write... */
    if( xCount > xFirstLength )
    1f50:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f52:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f54:	8f 81       	ldd	r24, Y+7	; 0x07
    1f56:	98 85       	ldd	r25, Y+8	; 0x08
    1f58:	82 17       	cp	r24, r18
    1f5a:	93 07       	cpc	r25, r19
    1f5c:	a8 f4       	brcc	.+42     	; 0x1f88 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    1f5e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f60:	3e 85       	ldd	r19, Y+14	; 0x0e
    1f62:	8f 81       	ldd	r24, Y+7	; 0x07
    1f64:	98 85       	ldd	r25, Y+8	; 0x08
    1f66:	a9 01       	movw	r20, r18
    1f68:	48 1b       	sub	r20, r24
    1f6a:	59 0b       	sbc	r21, r25
    1f6c:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f6e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1f70:	8f 81       	ldd	r24, Y+7	; 0x07
    1f72:	98 85       	ldd	r25, Y+8	; 0x08
    1f74:	28 0f       	add	r18, r24
    1f76:	39 1f       	adc	r19, r25
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	fc 01       	movw	r30, r24
    1f7e:	84 85       	ldd	r24, Z+12	; 0x0c
    1f80:	95 85       	ldd	r25, Z+13	; 0x0d
    1f82:	b9 01       	movw	r22, r18
    1f84:	0e 94 2b 3a 	call	0x7456	; 0x7456 <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    1f88:	29 81       	ldd	r18, Y+1	; 0x01
    1f8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	82 0f       	add	r24, r18
    1f92:	93 1f       	adc	r25, r19
    1f94:	9a 83       	std	Y+2, r25	; 0x02
    1f96:	89 83       	std	Y+1, r24	; 0x01
    if( xNextHead >= pxStreamBuffer->xLength )
    1f98:	89 85       	ldd	r24, Y+9	; 0x09
    1f9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	24 81       	ldd	r18, Z+4	; 0x04
    1fa0:	35 81       	ldd	r19, Z+5	; 0x05
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	82 17       	cp	r24, r18
    1fa8:	93 07       	cpc	r25, r19
    1faa:	68 f0       	brcs	.+26     	; 0x1fc6 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	84 81       	ldd	r24, Z+4	; 0x04
    1fb4:	95 81       	ldd	r25, Z+5	; 0x05
    1fb6:	29 81       	ldd	r18, Y+1	; 0x01
    1fb8:	3a 81       	ldd	r19, Y+2	; 0x02
    1fba:	a9 01       	movw	r20, r18
    1fbc:	48 1b       	sub	r20, r24
    1fbe:	59 0b       	sbc	r21, r25
    1fc0:	ca 01       	movw	r24, r20
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    1fc6:	89 85       	ldd	r24, Y+9	; 0x09
    1fc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fca:	29 81       	ldd	r18, Y+1	; 0x01
    1fcc:	3a 81       	ldd	r19, Y+2	; 0x02
    1fce:	fc 01       	movw	r30, r24
    1fd0:	33 83       	std	Z+3, r19	; 0x03
    1fd2:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    1fd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fd6:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    1fd8:	2e 96       	adiw	r28, 0x0e	; 14
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	08 95       	ret

00001fea <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	66 97       	sbiw	r28, 0x16	; 22
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	98 8b       	std	Y+16, r25	; 0x10
    2000:	8f 87       	std	Y+15, r24	; 0x0f
    2002:	7a 8b       	std	Y+18, r23	; 0x12
    2004:	69 8b       	std	Y+17, r22	; 0x11
    2006:	5c 8b       	std	Y+20, r21	; 0x14
    2008:	4b 8b       	std	Y+19, r20	; 0x13
    200a:	3e 8b       	std	Y+22, r19	; 0x16
    200c:	2d 8b       	std	Y+21, r18	; 0x15
size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    200e:	8d 89       	ldd	r24, Y+21	; 0x15
    2010:	9e 89       	ldd	r25, Y+22	; 0x16
    2012:	9c 83       	std	Y+4, r25	; 0x04
    2014:	8b 83       	std	Y+3, r24	; 0x03
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	9e 83       	std	Y+6, r25	; 0x06
    201c:	8d 83       	std	Y+5, r24	; 0x05
    201e:	2b 81       	ldd	r18, Y+3	; 0x03
    2020:	3c 81       	ldd	r19, Y+4	; 0x04
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	9e 81       	ldd	r25, Y+6	; 0x06
    2026:	28 17       	cp	r18, r24
    2028:	39 07       	cpc	r19, r25
    202a:	08 f4       	brcc	.+2      	; 0x202e <prvReadBytesFromBuffer+0x44>
    202c:	c9 01       	movw	r24, r18
    202e:	98 87       	std	Y+8, r25	; 0x08
    2030:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    2032:	8f 81       	ldd	r24, Y+7	; 0x07
    2034:	98 85       	ldd	r25, Y+8	; 0x08
    2036:	89 2b       	or	r24, r25
    2038:	09 f4       	brne	.+2      	; 0x203c <prvReadBytesFromBuffer+0x52>
    203a:	73 c0       	rjmp	.+230    	; 0x2122 <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    203c:	8f 85       	ldd	r24, Y+15	; 0x0f
    203e:	98 89       	ldd	r25, Y+16	; 0x10
    2040:	fc 01       	movw	r30, r24
    2042:	80 81       	ld	r24, Z
    2044:	91 81       	ldd	r25, Z+1	; 0x01
    2046:	9a 83       	std	Y+2, r25	; 0x02
    2048:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
        less than the number wanted if the data wraps around to the start of
        the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    204a:	8f 85       	ldd	r24, Y+15	; 0x0f
    204c:	98 89       	ldd	r25, Y+16	; 0x10
    204e:	fc 01       	movw	r30, r24
    2050:	24 81       	ldd	r18, Z+4	; 0x04
    2052:	35 81       	ldd	r19, Z+5	; 0x05
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	9a 81       	ldd	r25, Y+2	; 0x02
    2058:	a9 01       	movw	r20, r18
    205a:	48 1b       	sub	r20, r24
    205c:	59 0b       	sbc	r21, r25
    205e:	ca 01       	movw	r24, r20
    2060:	9a 87       	std	Y+10, r25	; 0x0a
    2062:	89 87       	std	Y+9, r24	; 0x09
    2064:	8f 81       	ldd	r24, Y+7	; 0x07
    2066:	98 85       	ldd	r25, Y+8	; 0x08
    2068:	9c 87       	std	Y+12, r25	; 0x0c
    206a:	8b 87       	std	Y+11, r24	; 0x0b
    206c:	29 85       	ldd	r18, Y+9	; 0x09
    206e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2070:	8b 85       	ldd	r24, Y+11	; 0x0b
    2072:	9c 85       	ldd	r25, Y+12	; 0x0c
    2074:	28 17       	cp	r18, r24
    2076:	39 07       	cpc	r19, r25
    2078:	08 f4       	brcc	.+2      	; 0x207c <prvReadBytesFromBuffer+0x92>
    207a:	c9 01       	movw	r24, r18
    207c:	9e 87       	std	Y+14, r25	; 0x0e
    207e:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
        read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    2080:	8f 85       	ldd	r24, Y+15	; 0x0f
    2082:	98 89       	ldd	r25, Y+16	; 0x10
    2084:	fc 01       	movw	r30, r24
    2086:	24 85       	ldd	r18, Z+12	; 0x0c
    2088:	35 85       	ldd	r19, Z+13	; 0x0d
    208a:	89 81       	ldd	r24, Y+1	; 0x01
    208c:	9a 81       	ldd	r25, Y+2	; 0x02
    208e:	28 0f       	add	r18, r24
    2090:	39 1f       	adc	r19, r25
    2092:	4d 85       	ldd	r20, Y+13	; 0x0d
    2094:	5e 85       	ldd	r21, Y+14	; 0x0e
    2096:	89 89       	ldd	r24, Y+17	; 0x11
    2098:	9a 89       	ldd	r25, Y+18	; 0x12
    209a:	b9 01       	movw	r22, r18
    209c:	0e 94 2b 3a 	call	0x7456	; 0x7456 <memcpy>

        /* If the total number of wanted bytes is greater than the number
        that could be read in the first read... */
        if( xCount > xFirstLength )
    20a0:	2f 81       	ldd	r18, Y+7	; 0x07
    20a2:	38 85       	ldd	r19, Y+8	; 0x08
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	82 17       	cp	r24, r18
    20aa:	93 07       	cpc	r25, r19
    20ac:	a0 f4       	brcc	.+40     	; 0x20d6 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    20ae:	2f 81       	ldd	r18, Y+7	; 0x07
    20b0:	38 85       	ldd	r19, Y+8	; 0x08
    20b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20b6:	a9 01       	movw	r20, r18
    20b8:	48 1b       	sub	r20, r24
    20ba:	59 0b       	sbc	r21, r25
    20bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20be:	98 89       	ldd	r25, Y+16	; 0x10
    20c0:	fc 01       	movw	r30, r24
    20c2:	64 85       	ldd	r22, Z+12	; 0x0c
    20c4:	75 85       	ldd	r23, Z+13	; 0x0d
    20c6:	29 89       	ldd	r18, Y+17	; 0x11
    20c8:	3a 89       	ldd	r19, Y+18	; 0x12
    20ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    20cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ce:	82 0f       	add	r24, r18
    20d0:	93 1f       	adc	r25, r19
    20d2:	0e 94 2b 3a 	call	0x7456	; 0x7456 <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
        the buffer. */
        xNextTail += xCount;
    20d6:	29 81       	ldd	r18, Y+1	; 0x01
    20d8:	3a 81       	ldd	r19, Y+2	; 0x02
    20da:	8f 81       	ldd	r24, Y+7	; 0x07
    20dc:	98 85       	ldd	r25, Y+8	; 0x08
    20de:	82 0f       	add	r24, r18
    20e0:	93 1f       	adc	r25, r19
    20e2:	9a 83       	std	Y+2, r25	; 0x02
    20e4:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    20e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e8:	98 89       	ldd	r25, Y+16	; 0x10
    20ea:	fc 01       	movw	r30, r24
    20ec:	24 81       	ldd	r18, Z+4	; 0x04
    20ee:	35 81       	ldd	r19, Z+5	; 0x05
    20f0:	89 81       	ldd	r24, Y+1	; 0x01
    20f2:	9a 81       	ldd	r25, Y+2	; 0x02
    20f4:	82 17       	cp	r24, r18
    20f6:	93 07       	cpc	r25, r19
    20f8:	68 f0       	brcs	.+26     	; 0x2114 <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    20fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fc:	98 89       	ldd	r25, Y+16	; 0x10
    20fe:	fc 01       	movw	r30, r24
    2100:	84 81       	ldd	r24, Z+4	; 0x04
    2102:	95 81       	ldd	r25, Z+5	; 0x05
    2104:	29 81       	ldd	r18, Y+1	; 0x01
    2106:	3a 81       	ldd	r19, Y+2	; 0x02
    2108:	a9 01       	movw	r20, r18
    210a:	48 1b       	sub	r20, r24
    210c:	59 0b       	sbc	r21, r25
    210e:	ca 01       	movw	r24, r20
    2110:	9a 83       	std	Y+2, r25	; 0x02
    2112:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    2114:	8f 85       	ldd	r24, Y+15	; 0x0f
    2116:	98 89       	ldd	r25, Y+16	; 0x10
    2118:	29 81       	ldd	r18, Y+1	; 0x01
    211a:	3a 81       	ldd	r19, Y+2	; 0x02
    211c:	fc 01       	movw	r30, r24
    211e:	31 83       	std	Z+1, r19	; 0x01
    2120:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    2122:	8f 81       	ldd	r24, Y+7	; 0x07
    2124:	98 85       	ldd	r25, Y+8	; 0x08
}
    2126:	66 96       	adiw	r28, 0x16	; 22
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	df 91       	pop	r29
    2134:	cf 91       	pop	r28
    2136:	08 95       	ret

00002138 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	00 d0       	rcall	.+0      	; 0x213e <prvBytesInBuffer+0x6>
    213e:	1f 92       	push	r1
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	9c 83       	std	Y+4, r25	; 0x04
    2146:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	fc 01       	movw	r30, r24
    214e:	24 81       	ldd	r18, Z+4	; 0x04
    2150:	35 81       	ldd	r19, Z+5	; 0x05
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	fc 01       	movw	r30, r24
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	82 0f       	add	r24, r18
    215e:	93 1f       	adc	r25, r19
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	fc 01       	movw	r30, r24
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	29 81       	ldd	r18, Y+1	; 0x01
    2170:	3a 81       	ldd	r19, Y+2	; 0x02
    2172:	a9 01       	movw	r20, r18
    2174:	48 1b       	sub	r20, r24
    2176:	59 0b       	sbc	r21, r25
    2178:	ca 01       	movw	r24, r20
    217a:	9a 83       	std	Y+2, r25	; 0x02
    217c:	89 83       	std	Y+1, r24	; 0x01
    if ( xCount >= pxStreamBuffer->xLength )
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	9c 81       	ldd	r25, Y+4	; 0x04
    2182:	fc 01       	movw	r30, r24
    2184:	24 81       	ldd	r18, Z+4	; 0x04
    2186:	35 81       	ldd	r19, Z+5	; 0x05
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	82 17       	cp	r24, r18
    218e:	93 07       	cpc	r25, r19
    2190:	68 f0       	brcs	.+26     	; 0x21ac <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	fc 01       	movw	r30, r24
    2198:	84 81       	ldd	r24, Z+4	; 0x04
    219a:	95 81       	ldd	r25, Z+5	; 0x05
    219c:	29 81       	ldd	r18, Y+1	; 0x01
    219e:	3a 81       	ldd	r19, Y+2	; 0x02
    21a0:	a9 01       	movw	r20, r18
    21a2:	48 1b       	sub	r20, r24
    21a4:	59 0b       	sbc	r21, r25
    21a6:	ca 01       	movw	r24, r20
    21a8:	9a 83       	std	Y+2, r25	; 0x02
    21aa:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	9a 81       	ldd	r25, Y+2	; 0x02
}
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    21be:	0f 93       	push	r16
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	29 97       	sbiw	r28, 0x09	; 9
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	89 83       	std	Y+1, r24	; 0x01
    21d8:	7c 83       	std	Y+4, r23	; 0x04
    21da:	6b 83       	std	Y+3, r22	; 0x03
    21dc:	5e 83       	std	Y+6, r21	; 0x06
    21de:	4d 83       	std	Y+5, r20	; 0x05
    21e0:	38 87       	std	Y+8, r19	; 0x08
    21e2:	2f 83       	std	Y+7, r18	; 0x07
    21e4:	09 87       	std	Y+9, r16	; 0x09
        const BaseType_t xWriteValue = 0x55;
        configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	9a 81       	ldd	r25, Y+2	; 0x02
    21ea:	40 e1       	ldi	r20, 0x10	; 16
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	0e 94 34 3a 	call	0x7468	; 0x7468 <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	2b 81       	ldd	r18, Y+3	; 0x03
    21fc:	3c 81       	ldd	r19, Y+4	; 0x04
    21fe:	fc 01       	movw	r30, r24
    2200:	35 87       	std	Z+13, r19	; 0x0d
    2202:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    2204:	89 81       	ldd	r24, Y+1	; 0x01
    2206:	9a 81       	ldd	r25, Y+2	; 0x02
    2208:	2d 81       	ldd	r18, Y+5	; 0x05
    220a:	3e 81       	ldd	r19, Y+6	; 0x06
    220c:	fc 01       	movw	r30, r24
    220e:	35 83       	std	Z+5, r19	; 0x05
    2210:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	9a 81       	ldd	r25, Y+2	; 0x02
    2216:	2f 81       	ldd	r18, Y+7	; 0x07
    2218:	38 85       	ldd	r19, Y+8	; 0x08
    221a:	fc 01       	movw	r30, r24
    221c:	37 83       	std	Z+7, r19	; 0x07
    221e:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	9a 81       	ldd	r25, Y+2	; 0x02
    2224:	29 85       	ldd	r18, Y+9	; 0x09
    2226:	fc 01       	movw	r30, r24
    2228:	26 87       	std	Z+14, r18	; 0x0e
}
    222a:	00 00       	nop
    222c:	29 96       	adiw	r28, 0x09	; 9
    222e:	0f b6       	in	r0, 0x3f	; 63
    2230:	f8 94       	cli
    2232:	de bf       	out	0x3e, r29	; 62
    2234:	0f be       	out	0x3f, r0	; 63
    2236:	cd bf       	out	0x3d, r28	; 61
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	0f 91       	pop	r16
    223e:	08 95       	ret

00002240 <xTaskCreate>:
    2240:	af 92       	push	r10
    2242:	bf 92       	push	r11
    2244:	cf 92       	push	r12
    2246:	df 92       	push	r13
    2248:	ef 92       	push	r14
    224a:	ff 92       	push	r15
    224c:	0f 93       	push	r16
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	60 97       	sbiw	r28, 0x10	; 16
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	f8 94       	cli
    225c:	de bf       	out	0x3e, r29	; 62
    225e:	0f be       	out	0x3f, r0	; 63
    2260:	cd bf       	out	0x3d, r28	; 61
    2262:	9f 83       	std	Y+7, r25	; 0x07
    2264:	8e 83       	std	Y+6, r24	; 0x06
    2266:	79 87       	std	Y+9, r23	; 0x09
    2268:	68 87       	std	Y+8, r22	; 0x08
    226a:	5b 87       	std	Y+11, r21	; 0x0b
    226c:	4a 87       	std	Y+10, r20	; 0x0a
    226e:	3d 87       	std	Y+13, r19	; 0x0d
    2270:	2c 87       	std	Y+12, r18	; 0x0c
    2272:	0e 87       	std	Y+14, r16	; 0x0e
    2274:	f8 8a       	std	Y+16, r15	; 0x10
    2276:	ef 86       	std	Y+15, r14	; 0x0f
    2278:	8a 85       	ldd	r24, Y+10	; 0x0a
    227a:	9b 85       	ldd	r25, Y+11	; 0x0b
    227c:	0e 94 ce 01 	call	0x39c	; 0x39c <pvPortMalloc>
    2280:	9d 83       	std	Y+5, r25	; 0x05
    2282:	8c 83       	std	Y+4, r24	; 0x04
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	89 2b       	or	r24, r25
    228a:	b9 f0       	breq	.+46     	; 0x22ba <xTaskCreate+0x7a>
    228c:	8c e2       	ldi	r24, 0x2C	; 44
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 94 ce 01 	call	0x39c	; 0x39c <pvPortMalloc>
    2294:	9a 83       	std	Y+2, r25	; 0x02
    2296:	89 83       	std	Y+1, r24	; 0x01
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	89 2b       	or	r24, r25
    229e:	41 f0       	breq	.+16     	; 0x22b0 <xTaskCreate+0x70>
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	2c 81       	ldd	r18, Y+4	; 0x04
    22a6:	3d 81       	ldd	r19, Y+5	; 0x05
    22a8:	fc 01       	movw	r30, r24
    22aa:	30 8f       	std	Z+24, r19	; 0x18
    22ac:	27 8b       	std	Z+23, r18	; 0x17
    22ae:	07 c0       	rjmp	.+14     	; 0x22be <xTaskCreate+0x7e>
    22b0:	8c 81       	ldd	r24, Y+4	; 0x04
    22b2:	9d 81       	ldd	r25, Y+5	; 0x05
    22b4:	0e 94 ef 01 	call	0x3de	; 0x3de <vPortFree>
    22b8:	02 c0       	rjmp	.+4      	; 0x22be <xTaskCreate+0x7e>
    22ba:	1a 82       	std	Y+2, r1	; 0x02
    22bc:	19 82       	std	Y+1, r1	; 0x01
    22be:	89 81       	ldd	r24, Y+1	; 0x01
    22c0:	9a 81       	ldd	r25, Y+2	; 0x02
    22c2:	89 2b       	or	r24, r25
    22c4:	c1 f0       	breq	.+48     	; 0x22f6 <xTaskCreate+0xb6>
    22c6:	a9 81       	ldd	r26, Y+1	; 0x01
    22c8:	ba 81       	ldd	r27, Y+2	; 0x02
    22ca:	ef 85       	ldd	r30, Y+15	; 0x0f
    22cc:	f8 89       	ldd	r31, Y+16	; 0x10
    22ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    22d0:	3d 85       	ldd	r19, Y+13	; 0x0d
    22d2:	4a 85       	ldd	r20, Y+10	; 0x0a
    22d4:	5b 85       	ldd	r21, Y+11	; 0x0b
    22d6:	68 85       	ldd	r22, Y+8	; 0x08
    22d8:	79 85       	ldd	r23, Y+9	; 0x09
    22da:	8e 81       	ldd	r24, Y+6	; 0x06
    22dc:	9f 81       	ldd	r25, Y+7	; 0x07
    22de:	a1 2c       	mov	r10, r1
    22e0:	b1 2c       	mov	r11, r1
    22e2:	6d 01       	movw	r12, r26
    22e4:	7f 01       	movw	r14, r30
    22e6:	0e 85       	ldd	r16, Y+14	; 0x0e
    22e8:	19 d0       	rcall	.+50     	; 0x231c <prvInitialiseNewTask>
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	9a 81       	ldd	r25, Y+2	; 0x02
    22ee:	f5 d0       	rcall	.+490    	; 0x24da <prvAddNewTaskToReadyList>
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	8b 83       	std	Y+3, r24	; 0x03
    22f4:	02 c0       	rjmp	.+4      	; 0x22fa <xTaskCreate+0xba>
    22f6:	8f ef       	ldi	r24, 0xFF	; 255
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	60 96       	adiw	r28, 0x10	; 16
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	0f 91       	pop	r16
    230e:	ff 90       	pop	r15
    2310:	ef 90       	pop	r14
    2312:	df 90       	pop	r13
    2314:	cf 90       	pop	r12
    2316:	bf 90       	pop	r11
    2318:	af 90       	pop	r10
    231a:	08 95       	ret

0000231c <prvInitialiseNewTask>:
    231c:	af 92       	push	r10
    231e:	bf 92       	push	r11
    2320:	cf 92       	push	r12
    2322:	df 92       	push	r13
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	62 97       	sbiw	r28, 0x12	; 18
    2334:	0f b6       	in	r0, 0x3f	; 63
    2336:	f8 94       	cli
    2338:	de bf       	out	0x3e, r29	; 62
    233a:	0f be       	out	0x3f, r0	; 63
    233c:	cd bf       	out	0x3d, r28	; 61
    233e:	9d 83       	std	Y+5, r25	; 0x05
    2340:	8c 83       	std	Y+4, r24	; 0x04
    2342:	7f 83       	std	Y+7, r23	; 0x07
    2344:	6e 83       	std	Y+6, r22	; 0x06
    2346:	59 87       	std	Y+9, r21	; 0x09
    2348:	48 87       	std	Y+8, r20	; 0x08
    234a:	3b 87       	std	Y+11, r19	; 0x0b
    234c:	2a 87       	std	Y+10, r18	; 0x0a
    234e:	0c 87       	std	Y+12, r16	; 0x0c
    2350:	fe 86       	std	Y+14, r15	; 0x0e
    2352:	ed 86       	std	Y+13, r14	; 0x0d
    2354:	d8 8a       	std	Y+16, r13	; 0x10
    2356:	cf 86       	std	Y+15, r12	; 0x0f
    2358:	ba 8a       	std	Y+18, r11	; 0x12
    235a:	a9 8a       	std	Y+17, r10	; 0x11
    235c:	8f 85       	ldd	r24, Y+15	; 0x0f
    235e:	98 89       	ldd	r25, Y+16	; 0x10
    2360:	fc 01       	movw	r30, r24
    2362:	87 89       	ldd	r24, Z+23	; 0x17
    2364:	90 8d       	ldd	r25, Z+24	; 0x18
    2366:	28 85       	ldd	r18, Y+8	; 0x08
    2368:	39 85       	ldd	r19, Y+9	; 0x09
    236a:	a9 01       	movw	r20, r18
    236c:	65 ea       	ldi	r22, 0xA5	; 165
    236e:	70 e0       	ldi	r23, 0x00	; 0
    2370:	0e 94 34 3a 	call	0x7468	; 0x7468 <memset>
    2374:	8f 85       	ldd	r24, Y+15	; 0x0f
    2376:	98 89       	ldd	r25, Y+16	; 0x10
    2378:	fc 01       	movw	r30, r24
    237a:	27 89       	ldd	r18, Z+23	; 0x17
    237c:	30 8d       	ldd	r19, Z+24	; 0x18
    237e:	88 85       	ldd	r24, Y+8	; 0x08
    2380:	99 85       	ldd	r25, Y+9	; 0x09
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	82 0f       	add	r24, r18
    2386:	93 1f       	adc	r25, r19
    2388:	9b 83       	std	Y+3, r25	; 0x03
    238a:	8a 83       	std	Y+2, r24	; 0x02
    238c:	8e 81       	ldd	r24, Y+6	; 0x06
    238e:	9f 81       	ldd	r25, Y+7	; 0x07
    2390:	89 2b       	or	r24, r25
    2392:	69 f1       	breq	.+90     	; 0x23ee <prvInitialiseNewTask+0xd2>
    2394:	19 82       	std	Y+1, r1	; 0x01
    2396:	21 c0       	rjmp	.+66     	; 0x23da <prvInitialiseNewTask+0xbe>
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	88 2f       	mov	r24, r24
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	29 81       	ldd	r18, Y+1	; 0x01
    23a0:	22 2f       	mov	r18, r18
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4e 81       	ldd	r20, Y+6	; 0x06
    23a6:	5f 81       	ldd	r21, Y+7	; 0x07
    23a8:	24 0f       	add	r18, r20
    23aa:	35 1f       	adc	r19, r21
    23ac:	f9 01       	movw	r30, r18
    23ae:	40 81       	ld	r20, Z
    23b0:	2f 85       	ldd	r18, Y+15	; 0x0f
    23b2:	38 89       	ldd	r19, Y+16	; 0x10
    23b4:	82 0f       	add	r24, r18
    23b6:	93 1f       	adc	r25, r19
    23b8:	49 96       	adiw	r24, 0x19	; 25
    23ba:	fc 01       	movw	r30, r24
    23bc:	40 83       	st	Z, r20
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	88 2f       	mov	r24, r24
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	2e 81       	ldd	r18, Y+6	; 0x06
    23c6:	3f 81       	ldd	r19, Y+7	; 0x07
    23c8:	82 0f       	add	r24, r18
    23ca:	93 1f       	adc	r25, r19
    23cc:	fc 01       	movw	r30, r24
    23ce:	80 81       	ld	r24, Z
    23d0:	88 23       	and	r24, r24
    23d2:	39 f0       	breq	.+14     	; 0x23e2 <prvInitialiseNewTask+0xc6>
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	8f 5f       	subi	r24, 0xFF	; 255
    23d8:	89 83       	std	Y+1, r24	; 0x01
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	88 30       	cpi	r24, 0x08	; 8
    23de:	e0 f2       	brcs	.-72     	; 0x2398 <prvInitialiseNewTask+0x7c>
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <prvInitialiseNewTask+0xc8>
    23e2:	00 00       	nop
    23e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e6:	98 89       	ldd	r25, Y+16	; 0x10
    23e8:	fc 01       	movw	r30, r24
    23ea:	10 a2       	std	Z+32, r1	; 0x20
    23ec:	04 c0       	rjmp	.+8      	; 0x23f6 <prvInitialiseNewTask+0xda>
    23ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f0:	98 89       	ldd	r25, Y+16	; 0x10
    23f2:	fc 01       	movw	r30, r24
    23f4:	11 8e       	std	Z+25, r1	; 0x19
    23f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    23f8:	84 30       	cpi	r24, 0x04	; 4
    23fa:	10 f0       	brcs	.+4      	; 0x2400 <prvInitialiseNewTask+0xe4>
    23fc:	83 e0       	ldi	r24, 0x03	; 3
    23fe:	8c 87       	std	Y+12, r24	; 0x0c
    2400:	8f 85       	ldd	r24, Y+15	; 0x0f
    2402:	98 89       	ldd	r25, Y+16	; 0x10
    2404:	2c 85       	ldd	r18, Y+12	; 0x0c
    2406:	fc 01       	movw	r30, r24
    2408:	26 8b       	std	Z+22, r18	; 0x16
    240a:	8f 85       	ldd	r24, Y+15	; 0x0f
    240c:	98 89       	ldd	r25, Y+16	; 0x10
    240e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2410:	fc 01       	movw	r30, r24
    2412:	23 a3       	std	Z+35, r18	; 0x23
    2414:	8f 85       	ldd	r24, Y+15	; 0x0f
    2416:	98 89       	ldd	r25, Y+16	; 0x10
    2418:	fc 01       	movw	r30, r24
    241a:	14 a2       	std	Z+36, r1	; 0x24
    241c:	8f 85       	ldd	r24, Y+15	; 0x0f
    241e:	98 89       	ldd	r25, Y+16	; 0x10
    2420:	02 96       	adiw	r24, 0x02	; 2
    2422:	0e 94 40 02 	call	0x480	; 0x480 <vListInitialiseItem>
    2426:	8f 85       	ldd	r24, Y+15	; 0x0f
    2428:	98 89       	ldd	r25, Y+16	; 0x10
    242a:	0c 96       	adiw	r24, 0x0c	; 12
    242c:	0e 94 40 02 	call	0x480	; 0x480 <vListInitialiseItem>
    2430:	8f 85       	ldd	r24, Y+15	; 0x0f
    2432:	98 89       	ldd	r25, Y+16	; 0x10
    2434:	2f 85       	ldd	r18, Y+15	; 0x0f
    2436:	38 89       	ldd	r19, Y+16	; 0x10
    2438:	fc 01       	movw	r30, r24
    243a:	31 87       	std	Z+9, r19	; 0x09
    243c:	20 87       	std	Z+8, r18	; 0x08
    243e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	24 e0       	ldi	r18, 0x04	; 4
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	28 1b       	sub	r18, r24
    244a:	39 0b       	sbc	r19, r25
    244c:	8f 85       	ldd	r24, Y+15	; 0x0f
    244e:	98 89       	ldd	r25, Y+16	; 0x10
    2450:	fc 01       	movw	r30, r24
    2452:	35 87       	std	Z+13, r19	; 0x0d
    2454:	24 87       	std	Z+12, r18	; 0x0c
    2456:	8f 85       	ldd	r24, Y+15	; 0x0f
    2458:	98 89       	ldd	r25, Y+16	; 0x10
    245a:	2f 85       	ldd	r18, Y+15	; 0x0f
    245c:	38 89       	ldd	r19, Y+16	; 0x10
    245e:	fc 01       	movw	r30, r24
    2460:	33 8b       	std	Z+19, r19	; 0x13
    2462:	22 8b       	std	Z+18, r18	; 0x12
    2464:	8f 85       	ldd	r24, Y+15	; 0x0f
    2466:	98 89       	ldd	r25, Y+16	; 0x10
    2468:	fc 01       	movw	r30, r24
    246a:	16 a2       	std	Z+38, r1	; 0x26
    246c:	15 a2       	std	Z+37, r1	; 0x25
    246e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2470:	98 89       	ldd	r25, Y+16	; 0x10
    2472:	fc 01       	movw	r30, r24
    2474:	17 a2       	std	Z+39, r1	; 0x27
    2476:	10 a6       	std	Z+40, r1	; 0x28
    2478:	11 a6       	std	Z+41, r1	; 0x29
    247a:	12 a6       	std	Z+42, r1	; 0x2a
    247c:	8f 85       	ldd	r24, Y+15	; 0x0f
    247e:	98 89       	ldd	r25, Y+16	; 0x10
    2480:	fc 01       	movw	r30, r24
    2482:	13 a6       	std	Z+43, r1	; 0x2b
    2484:	4a 85       	ldd	r20, Y+10	; 0x0a
    2486:	5b 85       	ldd	r21, Y+11	; 0x0b
    2488:	2c 81       	ldd	r18, Y+4	; 0x04
    248a:	3d 81       	ldd	r19, Y+5	; 0x05
    248c:	8a 81       	ldd	r24, Y+2	; 0x02
    248e:	9b 81       	ldd	r25, Y+3	; 0x03
    2490:	b9 01       	movw	r22, r18
    2492:	0e 94 70 03 	call	0x6e0	; 0x6e0 <pxPortInitialiseStack>
    2496:	9c 01       	movw	r18, r24
    2498:	8f 85       	ldd	r24, Y+15	; 0x0f
    249a:	98 89       	ldd	r25, Y+16	; 0x10
    249c:	fc 01       	movw	r30, r24
    249e:	31 83       	std	Z+1, r19	; 0x01
    24a0:	20 83       	st	Z, r18
    24a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a6:	89 2b       	or	r24, r25
    24a8:	39 f0       	breq	.+14     	; 0x24b8 <prvInitialiseNewTask+0x19c>
    24aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ae:	2f 85       	ldd	r18, Y+15	; 0x0f
    24b0:	38 89       	ldd	r19, Y+16	; 0x10
    24b2:	fc 01       	movw	r30, r24
    24b4:	31 83       	std	Z+1, r19	; 0x01
    24b6:	20 83       	st	Z, r18
    24b8:	00 00       	nop
    24ba:	62 96       	adiw	r28, 0x12	; 18
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	08 95       	ret

000024da <prvAddNewTaskToReadyList>:
    24da:	cf 93       	push	r28
    24dc:	df 93       	push	r29
    24de:	1f 92       	push	r1
    24e0:	1f 92       	push	r1
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	0f 92       	push	r0
    24f0:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <uxCurrentNumberOfTasks>
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <uxCurrentNumberOfTasks>
    24fa:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    24fe:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2502:	89 2b       	or	r24, r25
    2504:	61 f4       	brne	.+24     	; 0x251e <prvAddNewTaskToReadyList+0x44>
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <__data_end+0x1>
    250e:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <__data_end>
    2512:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <uxCurrentNumberOfTasks>
    2516:	81 30       	cpi	r24, 0x01	; 1
    2518:	c1 f4       	brne	.+48     	; 0x254a <prvAddNewTaskToReadyList+0x70>
    251a:	94 d4       	rcall	.+2344   	; 0x2e44 <prvInitialiseTaskLists>
    251c:	16 c0       	rjmp	.+44     	; 0x254a <prvAddNewTaskToReadyList+0x70>
    251e:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <xSchedulerRunning>
    2522:	88 23       	and	r24, r24
    2524:	91 f4       	brne	.+36     	; 0x254a <prvAddNewTaskToReadyList+0x70>
    2526:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    252a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    252e:	fc 01       	movw	r30, r24
    2530:	26 89       	ldd	r18, Z+22	; 0x16
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	9a 81       	ldd	r25, Y+2	; 0x02
    2536:	fc 01       	movw	r30, r24
    2538:	86 89       	ldd	r24, Z+22	; 0x16
    253a:	82 17       	cp	r24, r18
    253c:	30 f0       	brcs	.+12     	; 0x254a <prvAddNewTaskToReadyList+0x70>
    253e:	89 81       	ldd	r24, Y+1	; 0x01
    2540:	9a 81       	ldd	r25, Y+2	; 0x02
    2542:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <__data_end+0x1>
    2546:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <__data_end>
    254a:	80 91 aa 07 	lds	r24, 0x07AA	; 0x8007aa <uxTaskNumber>
    254e:	8f 5f       	subi	r24, 0xFF	; 255
    2550:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <uxTaskNumber>
    2554:	20 91 aa 07 	lds	r18, 0x07AA	; 0x8007aa <uxTaskNumber>
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	9a 81       	ldd	r25, Y+2	; 0x02
    255c:	fc 01       	movw	r30, r24
    255e:	21 a3       	std	Z+33, r18	; 0x21
    2560:	89 81       	ldd	r24, Y+1	; 0x01
    2562:	9a 81       	ldd	r25, Y+2	; 0x02
    2564:	fc 01       	movw	r30, r24
    2566:	96 89       	ldd	r25, Z+22	; 0x16
    2568:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    256c:	89 17       	cp	r24, r25
    256e:	30 f4       	brcc	.+12     	; 0x257c <prvAddNewTaskToReadyList+0xa2>
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	9a 81       	ldd	r25, Y+2	; 0x02
    2574:	fc 01       	movw	r30, r24
    2576:	86 89       	ldd	r24, Z+22	; 0x16
    2578:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    257c:	89 81       	ldd	r24, Y+1	; 0x01
    257e:	9a 81       	ldd	r25, Y+2	; 0x02
    2580:	ac 01       	movw	r20, r24
    2582:	4e 5f       	subi	r20, 0xFE	; 254
    2584:	5f 4f       	sbci	r21, 0xFF	; 255
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	9a 81       	ldd	r25, Y+2	; 0x02
    258a:	fc 01       	movw	r30, r24
    258c:	86 89       	ldd	r24, Z+22	; 0x16
    258e:	28 2f       	mov	r18, r24
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	c9 01       	movw	r24, r18
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	88 0f       	add	r24, r24
    259a:	99 1f       	adc	r25, r25
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	82 0f       	add	r24, r18
    25a2:	93 1f       	adc	r25, r19
    25a4:	84 5b       	subi	r24, 0xB4	; 180
    25a6:	98 4f       	sbci	r25, 0xF8	; 248
    25a8:	ba 01       	movw	r22, r20
    25aa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    25ae:	0f 90       	pop	r0
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <xSchedulerRunning>
    25b6:	88 23       	and	r24, r24
    25b8:	71 f0       	breq	.+28     	; 0x25d6 <prvAddNewTaskToReadyList+0xfc>
    25ba:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    25be:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    25c2:	fc 01       	movw	r30, r24
    25c4:	26 89       	ldd	r18, Z+22	; 0x16
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	fc 01       	movw	r30, r24
    25cc:	86 89       	ldd	r24, Z+22	; 0x16
    25ce:	28 17       	cp	r18, r24
    25d0:	10 f4       	brcc	.+4      	; 0x25d6 <prvAddNewTaskToReadyList+0xfc>
    25d2:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
    25d6:	00 00       	nop
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	08 95       	ret

000025e2 <vTaskDelay>:
    25e2:	cf 93       	push	r28
    25e4:	df 93       	push	r29
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <vTaskDelay+0x6>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	9b 83       	std	Y+3, r25	; 0x03
    25ee:	8a 83       	std	Y+2, r24	; 0x02
    25f0:	19 82       	std	Y+1, r1	; 0x01
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	9b 81       	ldd	r25, Y+3	; 0x03
    25f6:	89 2b       	or	r24, r25
    25f8:	41 f0       	breq	.+16     	; 0x260a <vTaskDelay+0x28>
    25fa:	56 d0       	rcall	.+172    	; 0x26a8 <vTaskSuspendAll>
    25fc:	8a 81       	ldd	r24, Y+2	; 0x02
    25fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2600:	60 e0       	ldi	r22, 0x00	; 0
    2602:	0e 94 a0 1c 	call	0x3940	; 0x3940 <prvAddCurrentTaskToDelayedList>
    2606:	5d d0       	rcall	.+186    	; 0x26c2 <xTaskResumeAll>
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	88 23       	and	r24, r24
    260e:	11 f4       	brne	.+4      	; 0x2614 <vTaskDelay+0x32>
    2610:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
    2614:	00 00       	nop
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	df 91       	pop	r29
    261e:	cf 91       	pop	r28
    2620:	08 95       	ret

00002622 <vTaskStartScheduler>:
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	1f 92       	push	r1
    262e:	cd b7       	in	r28, 0x3d	; 61
    2630:	de b7       	in	r29, 0x3e	; 62
    2632:	0f 2e       	mov	r0, r31
    2634:	fd ea       	ldi	r31, 0xAD	; 173
    2636:	ef 2e       	mov	r14, r31
    2638:	f7 e0       	ldi	r31, 0x07	; 7
    263a:	ff 2e       	mov	r15, r31
    263c:	f0 2d       	mov	r31, r0
    263e:	00 e0       	ldi	r16, 0x00	; 0
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	40 ec       	ldi	r20, 0xC0	; 192
    2646:	50 e0       	ldi	r21, 0x00	; 0
    2648:	61 e2       	ldi	r22, 0x21	; 33
    264a:	72 e0       	ldi	r23, 0x02	; 2
    264c:	8e e4       	ldi	r24, 0x4E	; 78
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	f7 dd       	rcall	.-1042   	; 0x2240 <xTaskCreate>
    2652:	89 83       	std	Y+1, r24	; 0x01
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	81 30       	cpi	r24, 0x01	; 1
    2658:	19 f4       	brne	.+6      	; 0x2660 <vTaskStartScheduler+0x3e>
    265a:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <xTimerCreateTimerTask>
    265e:	89 83       	std	Y+1, r24	; 0x01
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	81 30       	cpi	r24, 0x01	; 1
    2664:	c9 f4       	brne	.+50     	; 0x2698 <vTaskStartScheduler+0x76>
    2666:	f8 94       	cli
    2668:	8f ef       	ldi	r24, 0xFF	; 255
    266a:	9f ef       	ldi	r25, 0xFF	; 255
    266c:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xNextTaskUnblockTime+0x1>
    2670:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xNextTaskUnblockTime>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <xSchedulerRunning>
    267a:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <xTickCount+0x1>
    267e:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <xTickCount>
    2682:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2686:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    268a:	fc 01       	movw	r30, r24
    268c:	85 a1       	ldd	r24, Z+37	; 0x25
    268e:	96 a1       	ldd	r25, Z+38	; 0x26
    2690:	0e 94 9a 01 	call	0x334	; 0x334 <task_switch_in>
    2694:	0e 94 34 05 	call	0xa68	; 0xa68 <xPortStartScheduler>
    2698:	00 00       	nop
    269a:	0f 90       	pop	r0
    269c:	df 91       	pop	r29
    269e:	cf 91       	pop	r28
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	08 95       	ret

000026a8 <vTaskSuspendAll>:
    26a8:	cf 93       	push	r28
    26aa:	df 93       	push	r29
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    26b4:	8f 5f       	subi	r24, 0xFF	; 255
    26b6:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <uxSchedulerSuspended>
    26ba:	00 00       	nop
    26bc:	df 91       	pop	r29
    26be:	cf 91       	pop	r28
    26c0:	08 95       	ret

000026c2 <xTaskResumeAll>:
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	00 d0       	rcall	.+0      	; 0x26c8 <xTaskResumeAll+0x6>
    26c8:	1f 92       	push	r1
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	1a 82       	std	Y+2, r1	; 0x02
    26d0:	19 82       	std	Y+1, r1	; 0x01
    26d2:	1b 82       	std	Y+3, r1	; 0x03
    26d4:	0f b6       	in	r0, 0x3f	; 63
    26d6:	f8 94       	cli
    26d8:	0f 92       	push	r0
    26da:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    26de:	81 50       	subi	r24, 0x01	; 1
    26e0:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <uxSchedulerSuspended>
    26e4:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    26e8:	88 23       	and	r24, r24
    26ea:	09 f0       	breq	.+2      	; 0x26ee <xTaskResumeAll+0x2c>
    26ec:	75 c0       	rjmp	.+234    	; 0x27d8 <xTaskResumeAll+0x116>
    26ee:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <uxCurrentNumberOfTasks>
    26f2:	88 23       	and	r24, r24
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <xTaskResumeAll+0x36>
    26f6:	70 c0       	rjmp	.+224    	; 0x27d8 <xTaskResumeAll+0x116>
    26f8:	49 c0       	rjmp	.+146    	; 0x278c <xTaskResumeAll+0xca>
    26fa:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <xPendingReadyList+0x5>
    26fe:	90 91 8c 07 	lds	r25, 0x078C	; 0x80078c <xPendingReadyList+0x6>
    2702:	fc 01       	movw	r30, r24
    2704:	86 81       	ldd	r24, Z+6	; 0x06
    2706:	97 81       	ldd	r25, Z+7	; 0x07
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	0c 96       	adiw	r24, 0x0c	; 12
    2712:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	02 96       	adiw	r24, 0x02	; 2
    271c:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	9a 81       	ldd	r25, Y+2	; 0x02
    2724:	fc 01       	movw	r30, r24
    2726:	96 89       	ldd	r25, Z+22	; 0x16
    2728:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    272c:	89 17       	cp	r24, r25
    272e:	30 f4       	brcc	.+12     	; 0x273c <xTaskResumeAll+0x7a>
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	fc 01       	movw	r30, r24
    2736:	86 89       	ldd	r24, Z+22	; 0x16
    2738:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	9a 81       	ldd	r25, Y+2	; 0x02
    2740:	ac 01       	movw	r20, r24
    2742:	4e 5f       	subi	r20, 0xFE	; 254
    2744:	5f 4f       	sbci	r21, 0xFF	; 255
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	9a 81       	ldd	r25, Y+2	; 0x02
    274a:	fc 01       	movw	r30, r24
    274c:	86 89       	ldd	r24, Z+22	; 0x16
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	c9 01       	movw	r24, r18
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	84 5b       	subi	r24, 0xB4	; 180
    2766:	98 4f       	sbci	r25, 0xF8	; 248
    2768:	ba 01       	movw	r22, r20
    276a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	fc 01       	movw	r30, r24
    2774:	26 89       	ldd	r18, Z+22	; 0x16
    2776:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    277a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    277e:	fc 01       	movw	r30, r24
    2780:	86 89       	ldd	r24, Z+22	; 0x16
    2782:	28 17       	cp	r18, r24
    2784:	18 f0       	brcs	.+6      	; 0x278c <xTaskResumeAll+0xca>
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xYieldPending>
    278c:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <xPendingReadyList>
    2790:	88 23       	and	r24, r24
    2792:	09 f0       	breq	.+2      	; 0x2796 <xTaskResumeAll+0xd4>
    2794:	b2 cf       	rjmp	.-156    	; 0x26fa <xTaskResumeAll+0x38>
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	9a 81       	ldd	r25, Y+2	; 0x02
    279a:	89 2b       	or	r24, r25
    279c:	09 f0       	breq	.+2      	; 0x27a0 <xTaskResumeAll+0xde>
    279e:	de d3       	rcall	.+1980   	; 0x2f5c <prvResetNextTaskUnblockTime>
    27a0:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <uxPendedTicks>
    27a4:	8c 83       	std	Y+4, r24	; 0x04
    27a6:	8c 81       	ldd	r24, Y+4	; 0x04
    27a8:	88 23       	and	r24, r24
    27aa:	71 f0       	breq	.+28     	; 0x27c8 <xTaskResumeAll+0x106>
    27ac:	37 d0       	rcall	.+110    	; 0x281c <xTaskIncrementTick>
    27ae:	88 23       	and	r24, r24
    27b0:	19 f0       	breq	.+6      	; 0x27b8 <xTaskResumeAll+0xf6>
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xYieldPending>
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	81 50       	subi	r24, 0x01	; 1
    27bc:	8c 83       	std	Y+4, r24	; 0x04
    27be:	8c 81       	ldd	r24, Y+4	; 0x04
    27c0:	88 23       	and	r24, r24
    27c2:	a1 f7       	brne	.-24     	; 0x27ac <xTaskResumeAll+0xea>
    27c4:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <uxPendedTicks>
    27c8:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <xYieldPending>
    27cc:	88 23       	and	r24, r24
    27ce:	21 f0       	breq	.+8      	; 0x27d8 <xTaskResumeAll+0x116>
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	8b 83       	std	Y+3, r24	; 0x03
    27d4:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
    27d8:	0f 90       	pop	r0
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	0f 90       	pop	r0
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	08 95       	ret

000027ec <xTaskGetTickCount>:
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	1f 92       	push	r1
    27f2:	1f 92       	push	r1
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	0f b6       	in	r0, 0x3f	; 63
    27fa:	f8 94       	cli
    27fc:	0f 92       	push	r0
    27fe:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <xTickCount>
    2802:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <xTickCount+0x1>
    2806:	9a 83       	std	Y+2, r25	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	0f 90       	pop	r0
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	89 81       	ldd	r24, Y+1	; 0x01
    2810:	9a 81       	ldd	r25, Y+2	; 0x02
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	08 95       	ret

0000281c <xTaskIncrementTick>:
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	cd b7       	in	r28, 0x3d	; 61
    2822:	de b7       	in	r29, 0x3e	; 62
    2824:	29 97       	sbiw	r28, 0x09	; 9
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	19 82       	std	Y+1, r1	; 0x01
    2832:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    2836:	88 23       	and	r24, r24
    2838:	09 f0       	breq	.+2      	; 0x283c <xTaskIncrementTick+0x20>
    283a:	c7 c0       	rjmp	.+398    	; 0x29ca <xTaskIncrementTick+0x1ae>
    283c:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <xTickCount>
    2840:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <xTickCount+0x1>
    2844:	01 96       	adiw	r24, 0x01	; 1
    2846:	9b 83       	std	Y+3, r25	; 0x03
    2848:	8a 83       	std	Y+2, r24	; 0x02
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	9b 81       	ldd	r25, Y+3	; 0x03
    284e:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <xTickCount+0x1>
    2852:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <xTickCount>
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	9b 81       	ldd	r25, Y+3	; 0x03
    285a:	89 2b       	or	r24, r25
    285c:	d1 f4       	brne	.+52     	; 0x2892 <xTaskIncrementTick+0x76>
    285e:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxDelayedTaskList>
    2862:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxDelayedTaskList+0x1>
    2866:	9d 83       	std	Y+5, r25	; 0x05
    2868:	8c 83       	std	Y+4, r24	; 0x04
    286a:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <pxOverflowDelayedTaskList>
    286e:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <pxOverflowDelayedTaskList+0x1>
    2872:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <pxDelayedTaskList+0x1>
    2876:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <pxDelayedTaskList>
    287a:	8c 81       	ldd	r24, Y+4	; 0x04
    287c:	9d 81       	ldd	r25, Y+5	; 0x05
    287e:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <pxOverflowDelayedTaskList+0x1>
    2882:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <pxOverflowDelayedTaskList>
    2886:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xNumOfOverflows>
    288a:	8f 5f       	subi	r24, 0xFF	; 255
    288c:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <xNumOfOverflows>
    2890:	65 d3       	rcall	.+1738   	; 0x2f5c <prvResetNextTaskUnblockTime>
    2892:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xNextTaskUnblockTime>
    2896:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <xNextTaskUnblockTime+0x1>
    289a:	2a 81       	ldd	r18, Y+2	; 0x02
    289c:	3b 81       	ldd	r19, Y+3	; 0x03
    289e:	28 17       	cp	r18, r24
    28a0:	39 07       	cpc	r19, r25
    28a2:	08 f4       	brcc	.+2      	; 0x28a6 <xTaskIncrementTick+0x8a>
    28a4:	78 c0       	rjmp	.+240    	; 0x2996 <xTaskIncrementTick+0x17a>
    28a6:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxDelayedTaskList>
    28aa:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxDelayedTaskList+0x1>
    28ae:	fc 01       	movw	r30, r24
    28b0:	80 81       	ld	r24, Z
    28b2:	88 23       	and	r24, r24
    28b4:	39 f4       	brne	.+14     	; 0x28c4 <xTaskIncrementTick+0xa8>
    28b6:	8f ef       	ldi	r24, 0xFF	; 255
    28b8:	9f ef       	ldi	r25, 0xFF	; 255
    28ba:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xNextTaskUnblockTime+0x1>
    28be:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xNextTaskUnblockTime>
    28c2:	69 c0       	rjmp	.+210    	; 0x2996 <xTaskIncrementTick+0x17a>
    28c4:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxDelayedTaskList>
    28c8:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxDelayedTaskList+0x1>
    28cc:	fc 01       	movw	r30, r24
    28ce:	85 81       	ldd	r24, Z+5	; 0x05
    28d0:	96 81       	ldd	r25, Z+6	; 0x06
    28d2:	fc 01       	movw	r30, r24
    28d4:	86 81       	ldd	r24, Z+6	; 0x06
    28d6:	97 81       	ldd	r25, Z+7	; 0x07
    28d8:	9f 83       	std	Y+7, r25	; 0x07
    28da:	8e 83       	std	Y+6, r24	; 0x06
    28dc:	8e 81       	ldd	r24, Y+6	; 0x06
    28de:	9f 81       	ldd	r25, Y+7	; 0x07
    28e0:	fc 01       	movw	r30, r24
    28e2:	82 81       	ldd	r24, Z+2	; 0x02
    28e4:	93 81       	ldd	r25, Z+3	; 0x03
    28e6:	99 87       	std	Y+9, r25	; 0x09
    28e8:	88 87       	std	Y+8, r24	; 0x08
    28ea:	2a 81       	ldd	r18, Y+2	; 0x02
    28ec:	3b 81       	ldd	r19, Y+3	; 0x03
    28ee:	88 85       	ldd	r24, Y+8	; 0x08
    28f0:	99 85       	ldd	r25, Y+9	; 0x09
    28f2:	28 17       	cp	r18, r24
    28f4:	39 07       	cpc	r19, r25
    28f6:	38 f4       	brcc	.+14     	; 0x2906 <xTaskIncrementTick+0xea>
    28f8:	88 85       	ldd	r24, Y+8	; 0x08
    28fa:	99 85       	ldd	r25, Y+9	; 0x09
    28fc:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xNextTaskUnblockTime+0x1>
    2900:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xNextTaskUnblockTime>
    2904:	48 c0       	rjmp	.+144    	; 0x2996 <xTaskIncrementTick+0x17a>
    2906:	8e 81       	ldd	r24, Y+6	; 0x06
    2908:	9f 81       	ldd	r25, Y+7	; 0x07
    290a:	02 96       	adiw	r24, 0x02	; 2
    290c:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    2910:	8e 81       	ldd	r24, Y+6	; 0x06
    2912:	9f 81       	ldd	r25, Y+7	; 0x07
    2914:	fc 01       	movw	r30, r24
    2916:	84 89       	ldd	r24, Z+20	; 0x14
    2918:	95 89       	ldd	r25, Z+21	; 0x15
    291a:	89 2b       	or	r24, r25
    291c:	29 f0       	breq	.+10     	; 0x2928 <xTaskIncrementTick+0x10c>
    291e:	8e 81       	ldd	r24, Y+6	; 0x06
    2920:	9f 81       	ldd	r25, Y+7	; 0x07
    2922:	0c 96       	adiw	r24, 0x0c	; 12
    2924:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    2928:	8e 81       	ldd	r24, Y+6	; 0x06
    292a:	9f 81       	ldd	r25, Y+7	; 0x07
    292c:	fc 01       	movw	r30, r24
    292e:	96 89       	ldd	r25, Z+22	; 0x16
    2930:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    2934:	89 17       	cp	r24, r25
    2936:	30 f4       	brcc	.+12     	; 0x2944 <xTaskIncrementTick+0x128>
    2938:	8e 81       	ldd	r24, Y+6	; 0x06
    293a:	9f 81       	ldd	r25, Y+7	; 0x07
    293c:	fc 01       	movw	r30, r24
    293e:	86 89       	ldd	r24, Z+22	; 0x16
    2940:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    2944:	8e 81       	ldd	r24, Y+6	; 0x06
    2946:	9f 81       	ldd	r25, Y+7	; 0x07
    2948:	ac 01       	movw	r20, r24
    294a:	4e 5f       	subi	r20, 0xFE	; 254
    294c:	5f 4f       	sbci	r21, 0xFF	; 255
    294e:	8e 81       	ldd	r24, Y+6	; 0x06
    2950:	9f 81       	ldd	r25, Y+7	; 0x07
    2952:	fc 01       	movw	r30, r24
    2954:	86 89       	ldd	r24, Z+22	; 0x16
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	c9 01       	movw	r24, r18
    295c:	88 0f       	add	r24, r24
    295e:	99 1f       	adc	r25, r25
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	82 0f       	add	r24, r18
    296a:	93 1f       	adc	r25, r19
    296c:	84 5b       	subi	r24, 0xB4	; 180
    296e:	98 4f       	sbci	r25, 0xF8	; 248
    2970:	ba 01       	movw	r22, r20
    2972:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    2976:	8e 81       	ldd	r24, Y+6	; 0x06
    2978:	9f 81       	ldd	r25, Y+7	; 0x07
    297a:	fc 01       	movw	r30, r24
    297c:	26 89       	ldd	r18, Z+22	; 0x16
    297e:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2982:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2986:	fc 01       	movw	r30, r24
    2988:	86 89       	ldd	r24, Z+22	; 0x16
    298a:	28 17       	cp	r18, r24
    298c:	08 f4       	brcc	.+2      	; 0x2990 <xTaskIncrementTick+0x174>
    298e:	8b cf       	rjmp	.-234    	; 0x28a6 <xTaskIncrementTick+0x8a>
    2990:	81 e0       	ldi	r24, 0x01	; 1
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	88 cf       	rjmp	.-240    	; 0x28a6 <xTaskIncrementTick+0x8a>
    2996:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    299a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    299e:	fc 01       	movw	r30, r24
    29a0:	86 89       	ldd	r24, Z+22	; 0x16
    29a2:	28 2f       	mov	r18, r24
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	c9 01       	movw	r24, r18
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	82 0f       	add	r24, r18
    29b6:	93 1f       	adc	r25, r19
    29b8:	84 5b       	subi	r24, 0xB4	; 180
    29ba:	98 4f       	sbci	r25, 0xF8	; 248
    29bc:	fc 01       	movw	r30, r24
    29be:	80 81       	ld	r24, Z
    29c0:	82 30       	cpi	r24, 0x02	; 2
    29c2:	40 f0       	brcs	.+16     	; 0x29d4 <xTaskIncrementTick+0x1b8>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	89 83       	std	Y+1, r24	; 0x01
    29c8:	05 c0       	rjmp	.+10     	; 0x29d4 <xTaskIncrementTick+0x1b8>
    29ca:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <uxPendedTicks>
    29ce:	8f 5f       	subi	r24, 0xFF	; 255
    29d0:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <uxPendedTicks>
    29d4:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <xYieldPending>
    29d8:	88 23       	and	r24, r24
    29da:	11 f0       	breq	.+4      	; 0x29e0 <xTaskIncrementTick+0x1c4>
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	89 81       	ldd	r24, Y+1	; 0x01
    29e2:	29 96       	adiw	r28, 0x09	; 9
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	08 95       	ret

000029f4 <vTaskSetApplicationTaskTag>:
    29f4:	cf 93       	push	r28
    29f6:	df 93       	push	r29
    29f8:	00 d0       	rcall	.+0      	; 0x29fa <vTaskSetApplicationTaskTag+0x6>
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <vTaskSetApplicationTaskTag+0x8>
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
    2a00:	9c 83       	std	Y+4, r25	; 0x04
    2a02:	8b 83       	std	Y+3, r24	; 0x03
    2a04:	7e 83       	std	Y+6, r23	; 0x06
    2a06:	6d 83       	std	Y+5, r22	; 0x05
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	89 2b       	or	r24, r25
    2a0e:	39 f4       	brne	.+14     	; 0x2a1e <vTaskSetApplicationTaskTag+0x2a>
    2a10:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2a14:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2a18:	9a 83       	std	Y+2, r25	; 0x02
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    2a1c:	04 c0       	rjmp	.+8      	; 0x2a26 <vTaskSetApplicationTaskTag+0x32>
    2a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a20:	9c 81       	ldd	r25, Y+4	; 0x04
    2a22:	9a 83       	std	Y+2, r25	; 0x02
    2a24:	89 83       	std	Y+1, r24	; 0x01
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	0f 92       	push	r0
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	2d 81       	ldd	r18, Y+5	; 0x05
    2a32:	3e 81       	ldd	r19, Y+6	; 0x06
    2a34:	fc 01       	movw	r30, r24
    2a36:	36 a3       	std	Z+38, r19	; 0x26
    2a38:	25 a3       	std	Z+37, r18	; 0x25
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	00 00       	nop
    2a40:	26 96       	adiw	r28, 0x06	; 6
    2a42:	0f b6       	in	r0, 0x3f	; 63
    2a44:	f8 94       	cli
    2a46:	de bf       	out	0x3e, r29	; 62
    2a48:	0f be       	out	0x3f, r0	; 63
    2a4a:	cd bf       	out	0x3d, r28	; 61
    2a4c:	df 91       	pop	r29
    2a4e:	cf 91       	pop	r28
    2a50:	08 95       	ret

00002a52 <vTaskSwitchContext>:
    2a52:	cf 93       	push	r28
    2a54:	df 93       	push	r29
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <vTaskSwitchContext+0x6>
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    2a60:	88 23       	and	r24, r24
    2a62:	21 f0       	breq	.+8      	; 0x2a6c <vTaskSwitchContext+0x1a>
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xYieldPending>
    2a6a:	90 c0       	rjmp	.+288    	; 0x2b8c <vTaskSwitchContext+0x13a>
    2a6c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <xYieldPending>
    2a70:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2a74:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2a78:	fc 01       	movw	r30, r24
    2a7a:	85 a1       	ldd	r24, Z+37	; 0x25
    2a7c:	96 a1       	ldd	r25, Z+38	; 0x26
    2a7e:	0e 94 ba 01 	call	0x374	; 0x374 <task_switch_out>
    2a82:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2a86:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2a8a:	fc 01       	movw	r30, r24
    2a8c:	20 81       	ld	r18, Z
    2a8e:	31 81       	ldd	r19, Z+1	; 0x01
    2a90:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2a94:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2a98:	fc 01       	movw	r30, r24
    2a9a:	87 89       	ldd	r24, Z+23	; 0x17
    2a9c:	90 8d       	ldd	r25, Z+24	; 0x18
    2a9e:	82 17       	cp	r24, r18
    2aa0:	93 07       	cpc	r25, r19
    2aa2:	70 f0       	brcs	.+28     	; 0x2ac0 <vTaskSwitchContext+0x6e>
    2aa4:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2aa8:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2aac:	9c 01       	movw	r18, r24
    2aae:	27 5e       	subi	r18, 0xE7	; 231
    2ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab2:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2ab6:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2aba:	b9 01       	movw	r22, r18
    2abc:	0e 94 92 21 	call	0x4324	; 0x4324 <vApplicationStackOverflowHook>
    2ac0:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    2ac4:	89 83       	std	Y+1, r24	; 0x01
    2ac6:	03 c0       	rjmp	.+6      	; 0x2ace <vTaskSwitchContext+0x7c>
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	81 50       	subi	r24, 0x01	; 1
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	82 0f       	add	r24, r18
    2ae4:	93 1f       	adc	r25, r19
    2ae6:	84 5b       	subi	r24, 0xB4	; 180
    2ae8:	98 4f       	sbci	r25, 0xF8	; 248
    2aea:	fc 01       	movw	r30, r24
    2aec:	80 81       	ld	r24, Z
    2aee:	88 23       	and	r24, r24
    2af0:	59 f3       	breq	.-42     	; 0x2ac8 <vTaskSwitchContext+0x76>
    2af2:	89 81       	ldd	r24, Y+1	; 0x01
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	c9 01       	movw	r24, r18
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	82 0f       	add	r24, r18
    2b08:	93 1f       	adc	r25, r19
    2b0a:	84 5b       	subi	r24, 0xB4	; 180
    2b0c:	98 4f       	sbci	r25, 0xF8	; 248
    2b0e:	9b 83       	std	Y+3, r25	; 0x03
    2b10:	8a 83       	std	Y+2, r24	; 0x02
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	fc 01       	movw	r30, r24
    2b18:	81 81       	ldd	r24, Z+1	; 0x01
    2b1a:	92 81       	ldd	r25, Z+2	; 0x02
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	22 81       	ldd	r18, Z+2	; 0x02
    2b20:	33 81       	ldd	r19, Z+3	; 0x03
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
    2b26:	fc 01       	movw	r30, r24
    2b28:	32 83       	std	Z+2, r19	; 0x02
    2b2a:	21 83       	std	Z+1, r18	; 0x01
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b30:	fc 01       	movw	r30, r24
    2b32:	21 81       	ldd	r18, Z+1	; 0x01
    2b34:	32 81       	ldd	r19, Z+2	; 0x02
    2b36:	8a 81       	ldd	r24, Y+2	; 0x02
    2b38:	9b 81       	ldd	r25, Y+3	; 0x03
    2b3a:	03 96       	adiw	r24, 0x03	; 3
    2b3c:	28 17       	cp	r18, r24
    2b3e:	39 07       	cpc	r19, r25
    2b40:	69 f4       	brne	.+26     	; 0x2b5c <vTaskSwitchContext+0x10a>
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	9b 81       	ldd	r25, Y+3	; 0x03
    2b46:	fc 01       	movw	r30, r24
    2b48:	81 81       	ldd	r24, Z+1	; 0x01
    2b4a:	92 81       	ldd	r25, Z+2	; 0x02
    2b4c:	fc 01       	movw	r30, r24
    2b4e:	22 81       	ldd	r18, Z+2	; 0x02
    2b50:	33 81       	ldd	r19, Z+3	; 0x03
    2b52:	8a 81       	ldd	r24, Y+2	; 0x02
    2b54:	9b 81       	ldd	r25, Y+3	; 0x03
    2b56:	fc 01       	movw	r30, r24
    2b58:	32 83       	std	Z+2, r19	; 0x02
    2b5a:	21 83       	std	Z+1, r18	; 0x01
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	fc 01       	movw	r30, r24
    2b62:	81 81       	ldd	r24, Z+1	; 0x01
    2b64:	92 81       	ldd	r25, Z+2	; 0x02
    2b66:	fc 01       	movw	r30, r24
    2b68:	86 81       	ldd	r24, Z+6	; 0x06
    2b6a:	97 81       	ldd	r25, Z+7	; 0x07
    2b6c:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <__data_end+0x1>
    2b70:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <__data_end>
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    2b7a:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2b7e:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2b82:	fc 01       	movw	r30, r24
    2b84:	85 a1       	ldd	r24, Z+37	; 0x25
    2b86:	96 a1       	ldd	r25, Z+38	; 0x26
    2b88:	0e 94 9a 01 	call	0x334	; 0x334 <task_switch_in>
    2b8c:	00 00       	nop
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	08 95       	ret

00002b9a <vTaskPlaceOnEventList>:
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
    2b9e:	00 d0       	rcall	.+0      	; 0x2ba0 <vTaskPlaceOnEventList+0x6>
    2ba0:	1f 92       	push	r1
    2ba2:	cd b7       	in	r28, 0x3d	; 61
    2ba4:	de b7       	in	r29, 0x3e	; 62
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	7c 83       	std	Y+4, r23	; 0x04
    2bac:	6b 83       	std	Y+3, r22	; 0x03
    2bae:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2bb2:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2bb6:	9c 01       	movw	r18, r24
    2bb8:	24 5f       	subi	r18, 0xF4	; 244
    2bba:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc0:	b9 01       	movw	r22, r18
    2bc2:	0e 94 a1 02 	call	0x542	; 0x542 <vListInsert>
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bca:	61 e0       	ldi	r22, 0x01	; 1
    2bcc:	b9 d6       	rcall	.+3442   	; 0x3940 <prvAddCurrentTaskToDelayedList>
    2bce:	00 00       	nop
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	df 91       	pop	r29
    2bda:	cf 91       	pop	r28
    2bdc:	08 95       	ret

00002bde <vTaskPlaceOnEventListRestricted>:
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <vTaskPlaceOnEventListRestricted+0x6>
    2be4:	1f 92       	push	r1
    2be6:	1f 92       	push	r1
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	9a 83       	std	Y+2, r25	; 0x02
    2bee:	89 83       	std	Y+1, r24	; 0x01
    2bf0:	7c 83       	std	Y+4, r23	; 0x04
    2bf2:	6b 83       	std	Y+3, r22	; 0x03
    2bf4:	4d 83       	std	Y+5, r20	; 0x05
    2bf6:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2bfa:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2bfe:	9c 01       	movw	r18, r24
    2c00:	24 5f       	subi	r18, 0xF4	; 244
    2c02:	3f 4f       	sbci	r19, 0xFF	; 255
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	9a 81       	ldd	r25, Y+2	; 0x02
    2c08:	b9 01       	movw	r22, r18
    2c0a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    2c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c10:	88 23       	and	r24, r24
    2c12:	21 f0       	breq	.+8      	; 0x2c1c <vTaskPlaceOnEventListRestricted+0x3e>
    2c14:	8f ef       	ldi	r24, 0xFF	; 255
    2c16:	9f ef       	ldi	r25, 0xFF	; 255
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
    2c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c20:	6d 81       	ldd	r22, Y+5	; 0x05
    2c22:	8e d6       	rcall	.+3356   	; 0x3940 <prvAddCurrentTaskToDelayedList>
    2c24:	00 00       	nop
    2c26:	0f 90       	pop	r0
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	df 91       	pop	r29
    2c32:	cf 91       	pop	r28
    2c34:	08 95       	ret

00002c36 <xTaskRemoveFromEventList>:
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <xTaskRemoveFromEventList+0x6>
    2c3c:	1f 92       	push	r1
    2c3e:	1f 92       	push	r1
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	9d 83       	std	Y+5, r25	; 0x05
    2c46:	8c 83       	std	Y+4, r24	; 0x04
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	85 81       	ldd	r24, Z+5	; 0x05
    2c50:	96 81       	ldd	r25, Z+6	; 0x06
    2c52:	fc 01       	movw	r30, r24
    2c54:	86 81       	ldd	r24, Z+6	; 0x06
    2c56:	97 81       	ldd	r25, Z+7	; 0x07
    2c58:	9b 83       	std	Y+3, r25	; 0x03
    2c5a:	8a 83       	std	Y+2, r24	; 0x02
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c60:	0c 96       	adiw	r24, 0x0c	; 12
    2c62:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    2c66:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    2c6a:	88 23       	and	r24, r24
    2c6c:	69 f5       	brne	.+90     	; 0x2cc8 <xTaskRemoveFromEventList+0x92>
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	9b 81       	ldd	r25, Y+3	; 0x03
    2c72:	02 96       	adiw	r24, 0x02	; 2
    2c74:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    2c78:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7c:	fc 01       	movw	r30, r24
    2c7e:	96 89       	ldd	r25, Z+22	; 0x16
    2c80:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    2c84:	89 17       	cp	r24, r25
    2c86:	30 f4       	brcc	.+12     	; 0x2c94 <xTaskRemoveFromEventList+0x5e>
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	86 89       	ldd	r24, Z+22	; 0x16
    2c90:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	ac 01       	movw	r20, r24
    2c9a:	4e 5f       	subi	r20, 0xFE	; 254
    2c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	86 89       	ldd	r24, Z+22	; 0x16
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	c9 01       	movw	r24, r18
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	82 0f       	add	r24, r18
    2cba:	93 1f       	adc	r25, r19
    2cbc:	84 5b       	subi	r24, 0xB4	; 180
    2cbe:	98 4f       	sbci	r25, 0xF8	; 248
    2cc0:	ba 01       	movw	r22, r20
    2cc2:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    2cc6:	08 c0       	rjmp	.+16     	; 0x2cd8 <xTaskRemoveFromEventList+0xa2>
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ccc:	0c 96       	adiw	r24, 0x0c	; 12
    2cce:	bc 01       	movw	r22, r24
    2cd0:	86 e8       	ldi	r24, 0x86	; 134
    2cd2:	97 e0       	ldi	r25, 0x07	; 7
    2cd4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	9b 81       	ldd	r25, Y+3	; 0x03
    2cdc:	fc 01       	movw	r30, r24
    2cde:	26 89       	ldd	r18, Z+22	; 0x16
    2ce0:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2ce4:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2ce8:	fc 01       	movw	r30, r24
    2cea:	86 89       	ldd	r24, Z+22	; 0x16
    2cec:	82 17       	cp	r24, r18
    2cee:	30 f4       	brcc	.+12     	; 0x2cfc <xTaskRemoveFromEventList+0xc6>
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	89 83       	std	Y+1, r24	; 0x01
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xYieldPending>
    2cfa:	01 c0       	rjmp	.+2      	; 0x2cfe <xTaskRemoveFromEventList+0xc8>
    2cfc:	19 82       	std	Y+1, r1	; 0x01
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	df 91       	pop	r29
    2d0c:	cf 91       	pop	r28
    2d0e:	08 95       	ret

00002d10 <vTaskInternalSetTimeOutState>:
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	1f 92       	push	r1
    2d16:	1f 92       	push	r1
    2d18:	cd b7       	in	r28, 0x3d	; 61
    2d1a:	de b7       	in	r29, 0x3e	; 62
    2d1c:	9a 83       	std	Y+2, r25	; 0x02
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	20 91 a9 07 	lds	r18, 0x07A9	; 0x8007a9 <xNumOfOverflows>
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	fc 01       	movw	r30, r24
    2d2a:	20 83       	st	Z, r18
    2d2c:	20 91 a3 07 	lds	r18, 0x07A3	; 0x8007a3 <xTickCount>
    2d30:	30 91 a4 07 	lds	r19, 0x07A4	; 0x8007a4 <xTickCount+0x1>
    2d34:	89 81       	ldd	r24, Y+1	; 0x01
    2d36:	9a 81       	ldd	r25, Y+2	; 0x02
    2d38:	fc 01       	movw	r30, r24
    2d3a:	32 83       	std	Z+2, r19	; 0x02
    2d3c:	21 83       	std	Z+1, r18	; 0x01
    2d3e:	00 00       	nop
    2d40:	0f 90       	pop	r0
    2d42:	0f 90       	pop	r0
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	08 95       	ret

00002d4a <xTaskCheckForTimeOut>:
    2d4a:	cf 93       	push	r28
    2d4c:	df 93       	push	r29
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	29 97       	sbiw	r28, 0x09	; 9
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	9f 83       	std	Y+7, r25	; 0x07
    2d60:	8e 83       	std	Y+6, r24	; 0x06
    2d62:	79 87       	std	Y+9, r23	; 0x09
    2d64:	68 87       	std	Y+8, r22	; 0x08
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	0f 92       	push	r0
    2d6c:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <xTickCount>
    2d70:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <xTickCount+0x1>
    2d74:	9b 83       	std	Y+3, r25	; 0x03
    2d76:	8a 83       	std	Y+2, r24	; 0x02
    2d78:	8e 81       	ldd	r24, Y+6	; 0x06
    2d7a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	81 81       	ldd	r24, Z+1	; 0x01
    2d80:	92 81       	ldd	r25, Z+2	; 0x02
    2d82:	2a 81       	ldd	r18, Y+2	; 0x02
    2d84:	3b 81       	ldd	r19, Y+3	; 0x03
    2d86:	a9 01       	movw	r20, r18
    2d88:	48 1b       	sub	r20, r24
    2d8a:	59 0b       	sbc	r21, r25
    2d8c:	ca 01       	movw	r24, r20
    2d8e:	9d 83       	std	Y+5, r25	; 0x05
    2d90:	8c 83       	std	Y+4, r24	; 0x04
    2d92:	88 85       	ldd	r24, Y+8	; 0x08
    2d94:	99 85       	ldd	r25, Y+9	; 0x09
    2d96:	fc 01       	movw	r30, r24
    2d98:	80 81       	ld	r24, Z
    2d9a:	91 81       	ldd	r25, Z+1	; 0x01
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	11 f4       	brne	.+4      	; 0x2da4 <xTaskCheckForTimeOut+0x5a>
    2da0:	19 82       	std	Y+1, r1	; 0x01
    2da2:	39 c0       	rjmp	.+114    	; 0x2e16 <xTaskCheckForTimeOut+0xcc>
    2da4:	8e 81       	ldd	r24, Y+6	; 0x06
    2da6:	9f 81       	ldd	r25, Y+7	; 0x07
    2da8:	fc 01       	movw	r30, r24
    2daa:	90 81       	ld	r25, Z
    2dac:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <xNumOfOverflows>
    2db0:	98 17       	cp	r25, r24
    2db2:	69 f0       	breq	.+26     	; 0x2dce <xTaskCheckForTimeOut+0x84>
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	9f 81       	ldd	r25, Y+7	; 0x07
    2db8:	fc 01       	movw	r30, r24
    2dba:	21 81       	ldd	r18, Z+1	; 0x01
    2dbc:	32 81       	ldd	r19, Z+2	; 0x02
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc2:	82 17       	cp	r24, r18
    2dc4:	93 07       	cpc	r25, r19
    2dc6:	18 f0       	brcs	.+6      	; 0x2dce <xTaskCheckForTimeOut+0x84>
    2dc8:	81 e0       	ldi	r24, 0x01	; 1
    2dca:	89 83       	std	Y+1, r24	; 0x01
    2dcc:	24 c0       	rjmp	.+72     	; 0x2e16 <xTaskCheckForTimeOut+0xcc>
    2dce:	88 85       	ldd	r24, Y+8	; 0x08
    2dd0:	99 85       	ldd	r25, Y+9	; 0x09
    2dd2:	fc 01       	movw	r30, r24
    2dd4:	20 81       	ld	r18, Z
    2dd6:	31 81       	ldd	r19, Z+1	; 0x01
    2dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dda:	9d 81       	ldd	r25, Y+5	; 0x05
    2ddc:	82 17       	cp	r24, r18
    2dde:	93 07       	cpc	r25, r19
    2de0:	98 f4       	brcc	.+38     	; 0x2e08 <xTaskCheckForTimeOut+0xbe>
    2de2:	88 85       	ldd	r24, Y+8	; 0x08
    2de4:	99 85       	ldd	r25, Y+9	; 0x09
    2de6:	fc 01       	movw	r30, r24
    2de8:	20 81       	ld	r18, Z
    2dea:	31 81       	ldd	r19, Z+1	; 0x01
    2dec:	8c 81       	ldd	r24, Y+4	; 0x04
    2dee:	9d 81       	ldd	r25, Y+5	; 0x05
    2df0:	28 1b       	sub	r18, r24
    2df2:	39 0b       	sbc	r19, r25
    2df4:	88 85       	ldd	r24, Y+8	; 0x08
    2df6:	99 85       	ldd	r25, Y+9	; 0x09
    2df8:	fc 01       	movw	r30, r24
    2dfa:	31 83       	std	Z+1, r19	; 0x01
    2dfc:	20 83       	st	Z, r18
    2dfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2e00:	9f 81       	ldd	r25, Y+7	; 0x07
    2e02:	86 df       	rcall	.-244    	; 0x2d10 <vTaskInternalSetTimeOutState>
    2e04:	19 82       	std	Y+1, r1	; 0x01
    2e06:	07 c0       	rjmp	.+14     	; 0x2e16 <xTaskCheckForTimeOut+0xcc>
    2e08:	88 85       	ldd	r24, Y+8	; 0x08
    2e0a:	99 85       	ldd	r25, Y+9	; 0x09
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	11 82       	std	Z+1, r1	; 0x01
    2e10:	10 82       	st	Z, r1
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	0f 90       	pop	r0
    2e18:	0f be       	out	0x3f, r0	; 63
    2e1a:	89 81       	ldd	r24, Y+1	; 0x01
    2e1c:	29 96       	adiw	r28, 0x09	; 9
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	08 95       	ret

00002e2e <vTaskMissedYield>:
    2e2e:	cf 93       	push	r28
    2e30:	df 93       	push	r29
    2e32:	cd b7       	in	r28, 0x3d	; 61
    2e34:	de b7       	in	r29, 0x3e	; 62
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xYieldPending>
    2e3c:	00 00       	nop
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	08 95       	ret

00002e44 <prvInitialiseTaskLists>:
    2e44:	cf 93       	push	r28
    2e46:	df 93       	push	r29
    2e48:	1f 92       	push	r1
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	19 82       	std	Y+1, r1	; 0x01
    2e50:	13 c0       	rjmp	.+38     	; 0x2e78 <prvInitialiseTaskLists+0x34>
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	c9 01       	movw	r24, r18
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	84 5b       	subi	r24, 0xB4	; 180
    2e6c:	98 4f       	sbci	r25, 0xF8	; 248
    2e6e:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    2e72:	89 81       	ldd	r24, Y+1	; 0x01
    2e74:	8f 5f       	subi	r24, 0xFF	; 255
    2e76:	89 83       	std	Y+1, r24	; 0x01
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	84 30       	cpi	r24, 0x04	; 4
    2e7c:	50 f3       	brcs	.-44     	; 0x2e52 <prvInitialiseTaskLists+0xe>
    2e7e:	80 e7       	ldi	r24, 0x70	; 112
    2e80:	97 e0       	ldi	r25, 0x07	; 7
    2e82:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    2e86:	89 e7       	ldi	r24, 0x79	; 121
    2e88:	97 e0       	ldi	r25, 0x07	; 7
    2e8a:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    2e8e:	86 e8       	ldi	r24, 0x86	; 134
    2e90:	97 e0       	ldi	r25, 0x07	; 7
    2e92:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    2e96:	8f e8       	ldi	r24, 0x8F	; 143
    2e98:	97 e0       	ldi	r25, 0x07	; 7
    2e9a:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    2e9e:	89 e9       	ldi	r24, 0x99	; 153
    2ea0:	97 e0       	ldi	r25, 0x07	; 7
    2ea2:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    2ea6:	80 e7       	ldi	r24, 0x70	; 112
    2ea8:	97 e0       	ldi	r25, 0x07	; 7
    2eaa:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <pxDelayedTaskList+0x1>
    2eae:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <pxDelayedTaskList>
    2eb2:	89 e7       	ldi	r24, 0x79	; 121
    2eb4:	97 e0       	ldi	r25, 0x07	; 7
    2eb6:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <pxOverflowDelayedTaskList+0x1>
    2eba:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <pxOverflowDelayedTaskList>
    2ebe:	00 00       	nop
    2ec0:	0f 90       	pop	r0
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	08 95       	ret

00002ec8 <prvCheckTasksWaitingTermination>:
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	1f 92       	push	r1
    2ece:	1f 92       	push	r1
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	20 c0       	rjmp	.+64     	; 0x2f16 <prvCheckTasksWaitingTermination+0x4e>
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	f8 94       	cli
    2eda:	0f 92       	push	r0
    2edc:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <xTasksWaitingTermination+0x5>
    2ee0:	90 91 95 07 	lds	r25, 0x0795	; 0x800795 <xTasksWaitingTermination+0x6>
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	86 81       	ldd	r24, Z+6	; 0x06
    2ee8:	97 81       	ldd	r25, Z+7	; 0x07
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	89 81       	ldd	r24, Y+1	; 0x01
    2ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef2:	02 96       	adiw	r24, 0x02	; 2
    2ef4:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    2ef8:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <uxCurrentNumberOfTasks>
    2efc:	81 50       	subi	r24, 0x01	; 1
    2efe:	80 93 a2 07 	sts	0x07A2, r24	; 0x8007a2 <uxCurrentNumberOfTasks>
    2f02:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <uxDeletedTasksWaitingCleanUp>
    2f06:	81 50       	subi	r24, 0x01	; 1
    2f08:	80 93 98 07 	sts	0x0798, r24	; 0x800798 <uxDeletedTasksWaitingCleanUp>
    2f0c:	0f 90       	pop	r0
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	9a 81       	ldd	r25, Y+2	; 0x02
    2f14:	0a d0       	rcall	.+20     	; 0x2f2a <prvDeleteTCB>
    2f16:	80 91 98 07 	lds	r24, 0x0798	; 0x800798 <uxDeletedTasksWaitingCleanUp>
    2f1a:	88 23       	and	r24, r24
    2f1c:	e1 f6       	brne	.-72     	; 0x2ed6 <prvCheckTasksWaitingTermination+0xe>
    2f1e:	00 00       	nop
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	08 95       	ret

00002f2a <prvDeleteTCB>:
    2f2a:	cf 93       	push	r28
    2f2c:	df 93       	push	r29
    2f2e:	1f 92       	push	r1
    2f30:	1f 92       	push	r1
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	9a 83       	std	Y+2, r25	; 0x02
    2f38:	89 83       	std	Y+1, r24	; 0x01
    2f3a:	89 81       	ldd	r24, Y+1	; 0x01
    2f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f3e:	fc 01       	movw	r30, r24
    2f40:	87 89       	ldd	r24, Z+23	; 0x17
    2f42:	90 8d       	ldd	r25, Z+24	; 0x18
    2f44:	0e 94 ef 01 	call	0x3de	; 0x3de <vPortFree>
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	0e 94 ef 01 	call	0x3de	; 0x3de <vPortFree>
    2f50:	00 00       	nop
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	08 95       	ret

00002f5c <prvResetNextTaskUnblockTime>:
    2f5c:	cf 93       	push	r28
    2f5e:	df 93       	push	r29
    2f60:	1f 92       	push	r1
    2f62:	1f 92       	push	r1
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxDelayedTaskList>
    2f6c:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxDelayedTaskList+0x1>
    2f70:	fc 01       	movw	r30, r24
    2f72:	80 81       	ld	r24, Z
    2f74:	88 23       	and	r24, r24
    2f76:	39 f4       	brne	.+14     	; 0x2f86 <prvResetNextTaskUnblockTime+0x2a>
    2f78:	8f ef       	ldi	r24, 0xFF	; 255
    2f7a:	9f ef       	ldi	r25, 0xFF	; 255
    2f7c:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xNextTaskUnblockTime+0x1>
    2f80:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xNextTaskUnblockTime>
    2f84:	15 c0       	rjmp	.+42     	; 0x2fb0 <prvResetNextTaskUnblockTime+0x54>
    2f86:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxDelayedTaskList>
    2f8a:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxDelayedTaskList+0x1>
    2f8e:	fc 01       	movw	r30, r24
    2f90:	85 81       	ldd	r24, Z+5	; 0x05
    2f92:	96 81       	ldd	r25, Z+6	; 0x06
    2f94:	fc 01       	movw	r30, r24
    2f96:	86 81       	ldd	r24, Z+6	; 0x06
    2f98:	97 81       	ldd	r25, Z+7	; 0x07
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	82 81       	ldd	r24, Z+2	; 0x02
    2fa6:	93 81       	ldd	r25, Z+3	; 0x03
    2fa8:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xNextTaskUnblockTime+0x1>
    2fac:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xNextTaskUnblockTime>
    2fb0:	00 00       	nop
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	df 91       	pop	r29
    2fb8:	cf 91       	pop	r28
    2fba:	08 95       	ret

00002fbc <xTaskGetCurrentTaskHandle>:
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
    2fc0:	1f 92       	push	r1
    2fc2:	1f 92       	push	r1
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    2fcc:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    2fd0:	9a 83       	std	Y+2, r25	; 0x02
    2fd2:	89 83       	std	Y+1, r24	; 0x01
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	df 91       	pop	r29
    2fde:	cf 91       	pop	r28
    2fe0:	08 95       	ret

00002fe2 <xTaskGetSchedulerState>:
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	1f 92       	push	r1
    2fe8:	cd b7       	in	r28, 0x3d	; 61
    2fea:	de b7       	in	r29, 0x3e	; 62
    2fec:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <xSchedulerRunning>
    2ff0:	88 23       	and	r24, r24
    2ff2:	19 f4       	brne	.+6      	; 0x2ffa <xTaskGetSchedulerState+0x18>
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	89 83       	std	Y+1, r24	; 0x01
    2ff8:	08 c0       	rjmp	.+16     	; 0x300a <xTaskGetSchedulerState+0x28>
    2ffa:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    2ffe:	88 23       	and	r24, r24
    3000:	19 f4       	brne	.+6      	; 0x3008 <xTaskGetSchedulerState+0x26>
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	89 83       	std	Y+1, r24	; 0x01
    3006:	01 c0       	rjmp	.+2      	; 0x300a <xTaskGetSchedulerState+0x28>
    3008:	19 82       	std	Y+1, r1	; 0x01
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	0f 90       	pop	r0
    300e:	df 91       	pop	r29
    3010:	cf 91       	pop	r28
    3012:	08 95       	ret

00003014 <xTaskPriorityInherit>:
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	00 d0       	rcall	.+0      	; 0x301a <xTaskPriorityInherit+0x6>
    301a:	1f 92       	push	r1
    301c:	1f 92       	push	r1
    301e:	cd b7       	in	r28, 0x3d	; 61
    3020:	de b7       	in	r29, 0x3e	; 62
    3022:	9d 83       	std	Y+5, r25	; 0x05
    3024:	8c 83       	std	Y+4, r24	; 0x04
    3026:	8c 81       	ldd	r24, Y+4	; 0x04
    3028:	9d 81       	ldd	r25, Y+5	; 0x05
    302a:	9b 83       	std	Y+3, r25	; 0x03
    302c:	8a 83       	std	Y+2, r24	; 0x02
    302e:	19 82       	std	Y+1, r1	; 0x01
    3030:	8c 81       	ldd	r24, Y+4	; 0x04
    3032:	9d 81       	ldd	r25, Y+5	; 0x05
    3034:	89 2b       	or	r24, r25
    3036:	09 f4       	brne	.+2      	; 0x303a <xTaskPriorityInherit+0x26>
    3038:	90 c0       	rjmp	.+288    	; 0x315a <xTaskPriorityInherit+0x146>
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	9b 81       	ldd	r25, Y+3	; 0x03
    303e:	fc 01       	movw	r30, r24
    3040:	26 89       	ldd	r18, Z+22	; 0x16
    3042:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    3046:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    304a:	fc 01       	movw	r30, r24
    304c:	86 89       	ldd	r24, Z+22	; 0x16
    304e:	28 17       	cp	r18, r24
    3050:	08 f0       	brcs	.+2      	; 0x3054 <xTaskPriorityInherit+0x40>
    3052:	75 c0       	rjmp	.+234    	; 0x313e <xTaskPriorityInherit+0x12a>
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	fc 01       	movw	r30, r24
    305a:	84 85       	ldd	r24, Z+12	; 0x0c
    305c:	95 85       	ldd	r25, Z+13	; 0x0d
    305e:	99 23       	and	r25, r25
    3060:	8c f0       	brlt	.+34     	; 0x3084 <xTaskPriorityInherit+0x70>
    3062:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    3066:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    306a:	fc 01       	movw	r30, r24
    306c:	86 89       	ldd	r24, Z+22	; 0x16
    306e:	88 2f       	mov	r24, r24
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	24 e0       	ldi	r18, 0x04	; 4
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	28 1b       	sub	r18, r24
    3078:	39 0b       	sbc	r19, r25
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	9b 81       	ldd	r25, Y+3	; 0x03
    307e:	fc 01       	movw	r30, r24
    3080:	35 87       	std	Z+13, r19	; 0x0d
    3082:	24 87       	std	Z+12, r18	; 0x0c
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	9b 81       	ldd	r25, Y+3	; 0x03
    3088:	fc 01       	movw	r30, r24
    308a:	42 85       	ldd	r20, Z+10	; 0x0a
    308c:	53 85       	ldd	r21, Z+11	; 0x0b
    308e:	8a 81       	ldd	r24, Y+2	; 0x02
    3090:	9b 81       	ldd	r25, Y+3	; 0x03
    3092:	fc 01       	movw	r30, r24
    3094:	86 89       	ldd	r24, Z+22	; 0x16
    3096:	28 2f       	mov	r18, r24
    3098:	30 e0       	ldi	r19, 0x00	; 0
    309a:	c9 01       	movw	r24, r18
    309c:	88 0f       	add	r24, r24
    309e:	99 1f       	adc	r25, r25
    30a0:	88 0f       	add	r24, r24
    30a2:	99 1f       	adc	r25, r25
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	82 0f       	add	r24, r18
    30aa:	93 1f       	adc	r25, r19
    30ac:	84 5b       	subi	r24, 0xB4	; 180
    30ae:	98 4f       	sbci	r25, 0xF8	; 248
    30b0:	48 17       	cp	r20, r24
    30b2:	59 07       	cpc	r21, r25
    30b4:	b9 f5       	brne	.+110    	; 0x3124 <xTaskPriorityInherit+0x110>
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02
    30b8:	9b 81       	ldd	r25, Y+3	; 0x03
    30ba:	02 96       	adiw	r24, 0x02	; 2
    30bc:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    30c0:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    30c4:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    30c8:	fc 01       	movw	r30, r24
    30ca:	26 89       	ldd	r18, Z+22	; 0x16
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	9b 81       	ldd	r25, Y+3	; 0x03
    30d0:	fc 01       	movw	r30, r24
    30d2:	26 8b       	std	Z+22, r18	; 0x16
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	fc 01       	movw	r30, r24
    30da:	96 89       	ldd	r25, Z+22	; 0x16
    30dc:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    30e0:	89 17       	cp	r24, r25
    30e2:	30 f4       	brcc	.+12     	; 0x30f0 <xTaskPriorityInherit+0xdc>
    30e4:	8a 81       	ldd	r24, Y+2	; 0x02
    30e6:	9b 81       	ldd	r25, Y+3	; 0x03
    30e8:	fc 01       	movw	r30, r24
    30ea:	86 89       	ldd	r24, Z+22	; 0x16
    30ec:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
    30f2:	9b 81       	ldd	r25, Y+3	; 0x03
    30f4:	ac 01       	movw	r20, r24
    30f6:	4e 5f       	subi	r20, 0xFE	; 254
    30f8:	5f 4f       	sbci	r21, 0xFF	; 255
    30fa:	8a 81       	ldd	r24, Y+2	; 0x02
    30fc:	9b 81       	ldd	r25, Y+3	; 0x03
    30fe:	fc 01       	movw	r30, r24
    3100:	86 89       	ldd	r24, Z+22	; 0x16
    3102:	28 2f       	mov	r18, r24
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	c9 01       	movw	r24, r18
    3108:	88 0f       	add	r24, r24
    310a:	99 1f       	adc	r25, r25
    310c:	88 0f       	add	r24, r24
    310e:	99 1f       	adc	r25, r25
    3110:	88 0f       	add	r24, r24
    3112:	99 1f       	adc	r25, r25
    3114:	82 0f       	add	r24, r18
    3116:	93 1f       	adc	r25, r19
    3118:	84 5b       	subi	r24, 0xB4	; 180
    311a:	98 4f       	sbci	r25, 0xF8	; 248
    311c:	ba 01       	movw	r22, r20
    311e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    3122:	0a c0       	rjmp	.+20     	; 0x3138 <xTaskPriorityInherit+0x124>
    3124:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    3128:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    312c:	fc 01       	movw	r30, r24
    312e:	26 89       	ldd	r18, Z+22	; 0x16
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	9b 81       	ldd	r25, Y+3	; 0x03
    3134:	fc 01       	movw	r30, r24
    3136:	26 8b       	std	Z+22, r18	; 0x16
    3138:	81 e0       	ldi	r24, 0x01	; 1
    313a:	89 83       	std	Y+1, r24	; 0x01
    313c:	0e c0       	rjmp	.+28     	; 0x315a <xTaskPriorityInherit+0x146>
    313e:	8a 81       	ldd	r24, Y+2	; 0x02
    3140:	9b 81       	ldd	r25, Y+3	; 0x03
    3142:	fc 01       	movw	r30, r24
    3144:	23 a1       	ldd	r18, Z+35	; 0x23
    3146:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    314a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    314e:	fc 01       	movw	r30, r24
    3150:	86 89       	ldd	r24, Z+22	; 0x16
    3152:	28 17       	cp	r18, r24
    3154:	10 f4       	brcc	.+4      	; 0x315a <xTaskPriorityInherit+0x146>
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	89 83       	std	Y+1, r24	; 0x01
    315a:	89 81       	ldd	r24, Y+1	; 0x01
    315c:	0f 90       	pop	r0
    315e:	0f 90       	pop	r0
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	df 91       	pop	r29
    3168:	cf 91       	pop	r28
    316a:	08 95       	ret

0000316c <xTaskPriorityDisinherit>:
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	00 d0       	rcall	.+0      	; 0x3172 <xTaskPriorityDisinherit+0x6>
    3172:	1f 92       	push	r1
    3174:	1f 92       	push	r1
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	9d 83       	std	Y+5, r25	; 0x05
    317c:	8c 83       	std	Y+4, r24	; 0x04
    317e:	8c 81       	ldd	r24, Y+4	; 0x04
    3180:	9d 81       	ldd	r25, Y+5	; 0x05
    3182:	9b 83       	std	Y+3, r25	; 0x03
    3184:	8a 83       	std	Y+2, r24	; 0x02
    3186:	19 82       	std	Y+1, r1	; 0x01
    3188:	8c 81       	ldd	r24, Y+4	; 0x04
    318a:	9d 81       	ldd	r25, Y+5	; 0x05
    318c:	89 2b       	or	r24, r25
    318e:	09 f4       	brne	.+2      	; 0x3192 <xTaskPriorityDisinherit+0x26>
    3190:	61 c0       	rjmp	.+194    	; 0x3254 <xTaskPriorityDisinherit+0xe8>
    3192:	8a 81       	ldd	r24, Y+2	; 0x02
    3194:	9b 81       	ldd	r25, Y+3	; 0x03
    3196:	fc 01       	movw	r30, r24
    3198:	84 a1       	ldd	r24, Z+36	; 0x24
    319a:	2f ef       	ldi	r18, 0xFF	; 255
    319c:	28 0f       	add	r18, r24
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	fc 01       	movw	r30, r24
    31a4:	24 a3       	std	Z+36, r18	; 0x24
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	9b 81       	ldd	r25, Y+3	; 0x03
    31aa:	fc 01       	movw	r30, r24
    31ac:	26 89       	ldd	r18, Z+22	; 0x16
    31ae:	8a 81       	ldd	r24, Y+2	; 0x02
    31b0:	9b 81       	ldd	r25, Y+3	; 0x03
    31b2:	fc 01       	movw	r30, r24
    31b4:	83 a1       	ldd	r24, Z+35	; 0x23
    31b6:	28 17       	cp	r18, r24
    31b8:	09 f4       	brne	.+2      	; 0x31bc <xTaskPriorityDisinherit+0x50>
    31ba:	4c c0       	rjmp	.+152    	; 0x3254 <xTaskPriorityDisinherit+0xe8>
    31bc:	8a 81       	ldd	r24, Y+2	; 0x02
    31be:	9b 81       	ldd	r25, Y+3	; 0x03
    31c0:	fc 01       	movw	r30, r24
    31c2:	84 a1       	ldd	r24, Z+36	; 0x24
    31c4:	88 23       	and	r24, r24
    31c6:	09 f0       	breq	.+2      	; 0x31ca <xTaskPriorityDisinherit+0x5e>
    31c8:	45 c0       	rjmp	.+138    	; 0x3254 <xTaskPriorityDisinherit+0xe8>
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	9b 81       	ldd	r25, Y+3	; 0x03
    31ce:	02 96       	adiw	r24, 0x02	; 2
    31d0:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	9b 81       	ldd	r25, Y+3	; 0x03
    31d8:	fc 01       	movw	r30, r24
    31da:	23 a1       	ldd	r18, Z+35	; 0x23
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	fc 01       	movw	r30, r24
    31e2:	26 8b       	std	Z+22, r18	; 0x16
    31e4:	8a 81       	ldd	r24, Y+2	; 0x02
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	fc 01       	movw	r30, r24
    31ea:	86 89       	ldd	r24, Z+22	; 0x16
    31ec:	88 2f       	mov	r24, r24
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	24 e0       	ldi	r18, 0x04	; 4
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	28 1b       	sub	r18, r24
    31f6:	39 0b       	sbc	r19, r25
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	fc 01       	movw	r30, r24
    31fe:	35 87       	std	Z+13, r19	; 0x0d
    3200:	24 87       	std	Z+12, r18	; 0x0c
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	9b 81       	ldd	r25, Y+3	; 0x03
    3206:	fc 01       	movw	r30, r24
    3208:	96 89       	ldd	r25, Z+22	; 0x16
    320a:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    320e:	89 17       	cp	r24, r25
    3210:	30 f4       	brcc	.+12     	; 0x321e <xTaskPriorityDisinherit+0xb2>
    3212:	8a 81       	ldd	r24, Y+2	; 0x02
    3214:	9b 81       	ldd	r25, Y+3	; 0x03
    3216:	fc 01       	movw	r30, r24
    3218:	86 89       	ldd	r24, Z+22	; 0x16
    321a:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	9b 81       	ldd	r25, Y+3	; 0x03
    3222:	ac 01       	movw	r20, r24
    3224:	4e 5f       	subi	r20, 0xFE	; 254
    3226:	5f 4f       	sbci	r21, 0xFF	; 255
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	9b 81       	ldd	r25, Y+3	; 0x03
    322c:	fc 01       	movw	r30, r24
    322e:	86 89       	ldd	r24, Z+22	; 0x16
    3230:	28 2f       	mov	r18, r24
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	c9 01       	movw	r24, r18
    3236:	88 0f       	add	r24, r24
    3238:	99 1f       	adc	r25, r25
    323a:	88 0f       	add	r24, r24
    323c:	99 1f       	adc	r25, r25
    323e:	88 0f       	add	r24, r24
    3240:	99 1f       	adc	r25, r25
    3242:	82 0f       	add	r24, r18
    3244:	93 1f       	adc	r25, r19
    3246:	84 5b       	subi	r24, 0xB4	; 180
    3248:	98 4f       	sbci	r25, 0xF8	; 248
    324a:	ba 01       	movw	r22, r20
    324c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	89 83       	std	Y+1, r24	; 0x01
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	0f 90       	pop	r0
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	08 95       	ret

00003266 <vTaskPriorityDisinheritAfterTimeout>:
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	28 97       	sbiw	r28, 0x08	; 8
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	de bf       	out	0x3e, r29	; 62
    3276:	0f be       	out	0x3f, r0	; 63
    3278:	cd bf       	out	0x3d, r28	; 61
    327a:	9f 83       	std	Y+7, r25	; 0x07
    327c:	8e 83       	std	Y+6, r24	; 0x06
    327e:	68 87       	std	Y+8, r22	; 0x08
    3280:	8e 81       	ldd	r24, Y+6	; 0x06
    3282:	9f 81       	ldd	r25, Y+7	; 0x07
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	8a 83       	std	Y+2, r24	; 0x02
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	8c 83       	std	Y+4, r24	; 0x04
    328c:	8e 81       	ldd	r24, Y+6	; 0x06
    328e:	9f 81       	ldd	r25, Y+7	; 0x07
    3290:	89 2b       	or	r24, r25
    3292:	09 f4       	brne	.+2      	; 0x3296 <vTaskPriorityDisinheritAfterTimeout+0x30>
    3294:	7e c0       	rjmp	.+252    	; 0x3392 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	9b 81       	ldd	r25, Y+3	; 0x03
    329a:	fc 01       	movw	r30, r24
    329c:	93 a1       	ldd	r25, Z+35	; 0x23
    329e:	88 85       	ldd	r24, Y+8	; 0x08
    32a0:	98 17       	cp	r25, r24
    32a2:	18 f4       	brcc	.+6      	; 0x32aa <vTaskPriorityDisinheritAfterTimeout+0x44>
    32a4:	88 85       	ldd	r24, Y+8	; 0x08
    32a6:	89 83       	std	Y+1, r24	; 0x01
    32a8:	05 c0       	rjmp	.+10     	; 0x32b4 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	9b 81       	ldd	r25, Y+3	; 0x03
    32ae:	fc 01       	movw	r30, r24
    32b0:	83 a1       	ldd	r24, Z+35	; 0x23
    32b2:	89 83       	std	Y+1, r24	; 0x01
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	fc 01       	movw	r30, r24
    32ba:	96 89       	ldd	r25, Z+22	; 0x16
    32bc:	89 81       	ldd	r24, Y+1	; 0x01
    32be:	98 17       	cp	r25, r24
    32c0:	09 f4       	brne	.+2      	; 0x32c4 <vTaskPriorityDisinheritAfterTimeout+0x5e>
    32c2:	67 c0       	rjmp	.+206    	; 0x3392 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	9b 81       	ldd	r25, Y+3	; 0x03
    32c8:	fc 01       	movw	r30, r24
    32ca:	94 a1       	ldd	r25, Z+36	; 0x24
    32cc:	8c 81       	ldd	r24, Y+4	; 0x04
    32ce:	98 17       	cp	r25, r24
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <vTaskPriorityDisinheritAfterTimeout+0x6e>
    32d2:	5f c0       	rjmp	.+190    	; 0x3392 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	9b 81       	ldd	r25, Y+3	; 0x03
    32d8:	fc 01       	movw	r30, r24
    32da:	86 89       	ldd	r24, Z+22	; 0x16
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	9b 81       	ldd	r25, Y+3	; 0x03
    32e2:	29 81       	ldd	r18, Y+1	; 0x01
    32e4:	fc 01       	movw	r30, r24
    32e6:	26 8b       	std	Z+22, r18	; 0x16
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	fc 01       	movw	r30, r24
    32ee:	84 85       	ldd	r24, Z+12	; 0x0c
    32f0:	95 85       	ldd	r25, Z+13	; 0x0d
    32f2:	99 23       	and	r25, r25
    32f4:	64 f0       	brlt	.+24     	; 0x330e <vTaskPriorityDisinheritAfterTimeout+0xa8>
    32f6:	89 81       	ldd	r24, Y+1	; 0x01
    32f8:	88 2f       	mov	r24, r24
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	24 e0       	ldi	r18, 0x04	; 4
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	28 1b       	sub	r18, r24
    3302:	39 0b       	sbc	r19, r25
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	9b 81       	ldd	r25, Y+3	; 0x03
    3308:	fc 01       	movw	r30, r24
    330a:	35 87       	std	Z+13, r19	; 0x0d
    330c:	24 87       	std	Z+12, r18	; 0x0c
    330e:	8a 81       	ldd	r24, Y+2	; 0x02
    3310:	9b 81       	ldd	r25, Y+3	; 0x03
    3312:	fc 01       	movw	r30, r24
    3314:	42 85       	ldd	r20, Z+10	; 0x0a
    3316:	53 85       	ldd	r21, Z+11	; 0x0b
    3318:	8d 81       	ldd	r24, Y+5	; 0x05
    331a:	28 2f       	mov	r18, r24
    331c:	30 e0       	ldi	r19, 0x00	; 0
    331e:	c9 01       	movw	r24, r18
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	82 0f       	add	r24, r18
    332e:	93 1f       	adc	r25, r19
    3330:	84 5b       	subi	r24, 0xB4	; 180
    3332:	98 4f       	sbci	r25, 0xF8	; 248
    3334:	48 17       	cp	r20, r24
    3336:	59 07       	cpc	r21, r25
    3338:	61 f5       	brne	.+88     	; 0x3392 <vTaskPriorityDisinheritAfterTimeout+0x12c>
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	02 96       	adiw	r24, 0x02	; 2
    3340:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	9b 81       	ldd	r25, Y+3	; 0x03
    3348:	fc 01       	movw	r30, r24
    334a:	96 89       	ldd	r25, Z+22	; 0x16
    334c:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    3350:	89 17       	cp	r24, r25
    3352:	30 f4       	brcc	.+12     	; 0x3360 <vTaskPriorityDisinheritAfterTimeout+0xfa>
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	9b 81       	ldd	r25, Y+3	; 0x03
    3358:	fc 01       	movw	r30, r24
    335a:	86 89       	ldd	r24, Z+22	; 0x16
    335c:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	9b 81       	ldd	r25, Y+3	; 0x03
    3364:	ac 01       	movw	r20, r24
    3366:	4e 5f       	subi	r20, 0xFE	; 254
    3368:	5f 4f       	sbci	r21, 0xFF	; 255
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	9b 81       	ldd	r25, Y+3	; 0x03
    336e:	fc 01       	movw	r30, r24
    3370:	86 89       	ldd	r24, Z+22	; 0x16
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	c9 01       	movw	r24, r18
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	82 0f       	add	r24, r18
    3386:	93 1f       	adc	r25, r19
    3388:	84 5b       	subi	r24, 0xB4	; 180
    338a:	98 4f       	sbci	r25, 0xF8	; 248
    338c:	ba 01       	movw	r22, r20
    338e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    3392:	00 00       	nop
    3394:	28 96       	adiw	r28, 0x08	; 8
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <pvTaskIncrementMutexHeldCount>:
    33a6:	cf 93       	push	r28
    33a8:	df 93       	push	r29
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    33b2:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    33b6:	89 2b       	or	r24, r25
    33b8:	49 f0       	breq	.+18     	; 0x33cc <pvTaskIncrementMutexHeldCount+0x26>
    33ba:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    33be:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    33c2:	fc 01       	movw	r30, r24
    33c4:	24 a1       	ldd	r18, Z+36	; 0x24
    33c6:	2f 5f       	subi	r18, 0xFF	; 255
    33c8:	fc 01       	movw	r30, r24
    33ca:	24 a3       	std	Z+36, r18	; 0x24
    33cc:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    33d0:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    33d4:	df 91       	pop	r29
    33d6:	cf 91       	pop	r28
    33d8:	08 95       	ret

000033da <xTaskNotifyWait>:
    33da:	ef 92       	push	r14
    33dc:	ff 92       	push	r15
    33de:	0f 93       	push	r16
    33e0:	1f 93       	push	r17
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	cd b7       	in	r28, 0x3d	; 61
    33e8:	de b7       	in	r29, 0x3e	; 62
    33ea:	2d 97       	sbiw	r28, 0x0d	; 13
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	6a 83       	std	Y+2, r22	; 0x02
    33f8:	7b 83       	std	Y+3, r23	; 0x03
    33fa:	8c 83       	std	Y+4, r24	; 0x04
    33fc:	9d 83       	std	Y+5, r25	; 0x05
    33fe:	2e 83       	std	Y+6, r18	; 0x06
    3400:	3f 83       	std	Y+7, r19	; 0x07
    3402:	48 87       	std	Y+8, r20	; 0x08
    3404:	59 87       	std	Y+9, r21	; 0x09
    3406:	1b 87       	std	Y+11, r17	; 0x0b
    3408:	0a 87       	std	Y+10, r16	; 0x0a
    340a:	fd 86       	std	Y+13, r15	; 0x0d
    340c:	ec 86       	std	Y+12, r14	; 0x0c
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	0f 92       	push	r0
    3414:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    3418:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    341c:	fc 01       	movw	r30, r24
    341e:	83 a5       	ldd	r24, Z+43	; 0x2b
    3420:	82 30       	cpi	r24, 0x02	; 2
    3422:	59 f1       	breq	.+86     	; 0x347a <xTaskNotifyWait+0xa0>
    3424:	60 91 4a 07 	lds	r22, 0x074A	; 0x80074a <__data_end>
    3428:	70 91 4b 07 	lds	r23, 0x074B	; 0x80074b <__data_end+0x1>
    342c:	fb 01       	movw	r30, r22
    342e:	27 a1       	ldd	r18, Z+39	; 0x27
    3430:	30 a5       	ldd	r19, Z+40	; 0x28
    3432:	41 a5       	ldd	r20, Z+41	; 0x29
    3434:	52 a5       	ldd	r21, Z+42	; 0x2a
    3436:	8a 81       	ldd	r24, Y+2	; 0x02
    3438:	9b 81       	ldd	r25, Y+3	; 0x03
    343a:	ac 81       	ldd	r26, Y+4	; 0x04
    343c:	bd 81       	ldd	r27, Y+5	; 0x05
    343e:	80 95       	com	r24
    3440:	90 95       	com	r25
    3442:	a0 95       	com	r26
    3444:	b0 95       	com	r27
    3446:	82 23       	and	r24, r18
    3448:	93 23       	and	r25, r19
    344a:	a4 23       	and	r26, r20
    344c:	b5 23       	and	r27, r21
    344e:	fb 01       	movw	r30, r22
    3450:	87 a3       	std	Z+39, r24	; 0x27
    3452:	90 a7       	std	Z+40, r25	; 0x28
    3454:	a1 a7       	std	Z+41, r26	; 0x29
    3456:	b2 a7       	std	Z+42, r27	; 0x2a
    3458:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    345c:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    3460:	21 e0       	ldi	r18, 0x01	; 1
    3462:	fc 01       	movw	r30, r24
    3464:	23 a7       	std	Z+43, r18	; 0x2b
    3466:	8c 85       	ldd	r24, Y+12	; 0x0c
    3468:	9d 85       	ldd	r25, Y+13	; 0x0d
    346a:	89 2b       	or	r24, r25
    346c:	31 f0       	breq	.+12     	; 0x347a <xTaskNotifyWait+0xa0>
    346e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3470:	9d 85       	ldd	r25, Y+13	; 0x0d
    3472:	61 e0       	ldi	r22, 0x01	; 1
    3474:	65 d2       	rcall	.+1226   	; 0x3940 <prvAddCurrentTaskToDelayedList>
    3476:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
    347a:	0f 90       	pop	r0
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	0f b6       	in	r0, 0x3f	; 63
    3480:	f8 94       	cli
    3482:	0f 92       	push	r0
    3484:	8a 85       	ldd	r24, Y+10	; 0x0a
    3486:	9b 85       	ldd	r25, Y+11	; 0x0b
    3488:	89 2b       	or	r24, r25
    348a:	81 f0       	breq	.+32     	; 0x34ac <xTaskNotifyWait+0xd2>
    348c:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    3490:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    3494:	fc 01       	movw	r30, r24
    3496:	87 a1       	ldd	r24, Z+39	; 0x27
    3498:	90 a5       	ldd	r25, Z+40	; 0x28
    349a:	a1 a5       	ldd	r26, Z+41	; 0x29
    349c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    349e:	2a 85       	ldd	r18, Y+10	; 0x0a
    34a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    34a2:	f9 01       	movw	r30, r18
    34a4:	80 83       	st	Z, r24
    34a6:	91 83       	std	Z+1, r25	; 0x01
    34a8:	a2 83       	std	Z+2, r26	; 0x02
    34aa:	b3 83       	std	Z+3, r27	; 0x03
    34ac:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    34b0:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    34b4:	fc 01       	movw	r30, r24
    34b6:	83 a5       	ldd	r24, Z+43	; 0x2b
    34b8:	82 30       	cpi	r24, 0x02	; 2
    34ba:	11 f0       	breq	.+4      	; 0x34c0 <xTaskNotifyWait+0xe6>
    34bc:	19 82       	std	Y+1, r1	; 0x01
    34be:	1c c0       	rjmp	.+56     	; 0x34f8 <xTaskNotifyWait+0x11e>
    34c0:	60 91 4a 07 	lds	r22, 0x074A	; 0x80074a <__data_end>
    34c4:	70 91 4b 07 	lds	r23, 0x074B	; 0x80074b <__data_end+0x1>
    34c8:	fb 01       	movw	r30, r22
    34ca:	27 a1       	ldd	r18, Z+39	; 0x27
    34cc:	30 a5       	ldd	r19, Z+40	; 0x28
    34ce:	41 a5       	ldd	r20, Z+41	; 0x29
    34d0:	52 a5       	ldd	r21, Z+42	; 0x2a
    34d2:	8e 81       	ldd	r24, Y+6	; 0x06
    34d4:	9f 81       	ldd	r25, Y+7	; 0x07
    34d6:	a8 85       	ldd	r26, Y+8	; 0x08
    34d8:	b9 85       	ldd	r27, Y+9	; 0x09
    34da:	80 95       	com	r24
    34dc:	90 95       	com	r25
    34de:	a0 95       	com	r26
    34e0:	b0 95       	com	r27
    34e2:	82 23       	and	r24, r18
    34e4:	93 23       	and	r25, r19
    34e6:	a4 23       	and	r26, r20
    34e8:	b5 23       	and	r27, r21
    34ea:	fb 01       	movw	r30, r22
    34ec:	87 a3       	std	Z+39, r24	; 0x27
    34ee:	90 a7       	std	Z+40, r25	; 0x28
    34f0:	a1 a7       	std	Z+41, r26	; 0x29
    34f2:	b2 a7       	std	Z+42, r27	; 0x2a
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	89 83       	std	Y+1, r24	; 0x01
    34f8:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    34fc:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    3500:	fc 01       	movw	r30, r24
    3502:	13 a6       	std	Z+43, r1	; 0x2b
    3504:	0f 90       	pop	r0
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	89 81       	ldd	r24, Y+1	; 0x01
    350a:	2d 96       	adiw	r28, 0x0d	; 13
    350c:	0f b6       	in	r0, 0x3f	; 63
    350e:	f8 94       	cli
    3510:	de bf       	out	0x3e, r29	; 62
    3512:	0f be       	out	0x3f, r0	; 63
    3514:	cd bf       	out	0x3d, r28	; 61
    3516:	df 91       	pop	r29
    3518:	cf 91       	pop	r28
    351a:	1f 91       	pop	r17
    351c:	0f 91       	pop	r16
    351e:	ff 90       	pop	r15
    3520:	ef 90       	pop	r14
    3522:	08 95       	ret

00003524 <xTaskGenericNotify>:
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	cf 93       	push	r28
    352a:	df 93       	push	r29
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	2d 97       	sbiw	r28, 0x0d	; 13
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	9e 83       	std	Y+6, r25	; 0x06
    353e:	8d 83       	std	Y+5, r24	; 0x05
    3540:	4f 83       	std	Y+7, r20	; 0x07
    3542:	58 87       	std	Y+8, r21	; 0x08
    3544:	69 87       	std	Y+9, r22	; 0x09
    3546:	7a 87       	std	Y+10, r23	; 0x0a
    3548:	2b 87       	std	Y+11, r18	; 0x0b
    354a:	1d 87       	std	Y+13, r17	; 0x0d
    354c:	0c 87       	std	Y+12, r16	; 0x0c
    354e:	81 e0       	ldi	r24, 0x01	; 1
    3550:	89 83       	std	Y+1, r24	; 0x01
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	9e 81       	ldd	r25, Y+6	; 0x06
    3556:	9b 83       	std	Y+3, r25	; 0x03
    3558:	8a 83       	std	Y+2, r24	; 0x02
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	0f 92       	push	r0
    3560:	8c 85       	ldd	r24, Y+12	; 0x0c
    3562:	9d 85       	ldd	r25, Y+13	; 0x0d
    3564:	89 2b       	or	r24, r25
    3566:	71 f0       	breq	.+28     	; 0x3584 <xTaskGenericNotify+0x60>
    3568:	8a 81       	ldd	r24, Y+2	; 0x02
    356a:	9b 81       	ldd	r25, Y+3	; 0x03
    356c:	fc 01       	movw	r30, r24
    356e:	87 a1       	ldd	r24, Z+39	; 0x27
    3570:	90 a5       	ldd	r25, Z+40	; 0x28
    3572:	a1 a5       	ldd	r26, Z+41	; 0x29
    3574:	b2 a5       	ldd	r27, Z+42	; 0x2a
    3576:	2c 85       	ldd	r18, Y+12	; 0x0c
    3578:	3d 85       	ldd	r19, Y+13	; 0x0d
    357a:	f9 01       	movw	r30, r18
    357c:	80 83       	st	Z, r24
    357e:	91 83       	std	Z+1, r25	; 0x01
    3580:	a2 83       	std	Z+2, r26	; 0x02
    3582:	b3 83       	std	Z+3, r27	; 0x03
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	9b 81       	ldd	r25, Y+3	; 0x03
    3588:	fc 01       	movw	r30, r24
    358a:	83 a5       	ldd	r24, Z+43	; 0x2b
    358c:	8c 83       	std	Y+4, r24	; 0x04
    358e:	8a 81       	ldd	r24, Y+2	; 0x02
    3590:	9b 81       	ldd	r25, Y+3	; 0x03
    3592:	22 e0       	ldi	r18, 0x02	; 2
    3594:	fc 01       	movw	r30, r24
    3596:	23 a7       	std	Z+43, r18	; 0x2b
    3598:	8b 85       	ldd	r24, Y+11	; 0x0b
    359a:	88 2f       	mov	r24, r24
    359c:	90 e0       	ldi	r25, 0x00	; 0
    359e:	82 30       	cpi	r24, 0x02	; 2
    35a0:	91 05       	cpc	r25, r1
    35a2:	31 f1       	breq	.+76     	; 0x35f0 <xTaskGenericNotify+0xcc>
    35a4:	83 30       	cpi	r24, 0x03	; 3
    35a6:	91 05       	cpc	r25, r1
    35a8:	34 f4       	brge	.+12     	; 0x35b6 <xTaskGenericNotify+0x92>
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <xTaskGenericNotify+0x8c>
    35ae:	4f c0       	rjmp	.+158    	; 0x364e <xTaskGenericNotify+0x12a>
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	39 f0       	breq	.+14     	; 0x35c2 <xTaskGenericNotify+0x9e>
    35b4:	4d c0       	rjmp	.+154    	; 0x3650 <xTaskGenericNotify+0x12c>
    35b6:	83 30       	cpi	r24, 0x03	; 3
    35b8:	91 05       	cpc	r25, r1
    35ba:	61 f1       	breq	.+88     	; 0x3614 <xTaskGenericNotify+0xf0>
    35bc:	04 97       	sbiw	r24, 0x04	; 4
    35be:	b1 f1       	breq	.+108    	; 0x362c <xTaskGenericNotify+0x108>
    35c0:	47 c0       	rjmp	.+142    	; 0x3650 <xTaskGenericNotify+0x12c>
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	fc 01       	movw	r30, r24
    35c8:	27 a1       	ldd	r18, Z+39	; 0x27
    35ca:	30 a5       	ldd	r19, Z+40	; 0x28
    35cc:	41 a5       	ldd	r20, Z+41	; 0x29
    35ce:	52 a5       	ldd	r21, Z+42	; 0x2a
    35d0:	8f 81       	ldd	r24, Y+7	; 0x07
    35d2:	98 85       	ldd	r25, Y+8	; 0x08
    35d4:	a9 85       	ldd	r26, Y+9	; 0x09
    35d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    35d8:	82 2b       	or	r24, r18
    35da:	93 2b       	or	r25, r19
    35dc:	a4 2b       	or	r26, r20
    35de:	b5 2b       	or	r27, r21
    35e0:	2a 81       	ldd	r18, Y+2	; 0x02
    35e2:	3b 81       	ldd	r19, Y+3	; 0x03
    35e4:	f9 01       	movw	r30, r18
    35e6:	87 a3       	std	Z+39, r24	; 0x27
    35e8:	90 a7       	std	Z+40, r25	; 0x28
    35ea:	a1 a7       	std	Z+41, r26	; 0x29
    35ec:	b2 a7       	std	Z+42, r27	; 0x2a
    35ee:	30 c0       	rjmp	.+96     	; 0x3650 <xTaskGenericNotify+0x12c>
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	9b 81       	ldd	r25, Y+3	; 0x03
    35f4:	fc 01       	movw	r30, r24
    35f6:	87 a1       	ldd	r24, Z+39	; 0x27
    35f8:	90 a5       	ldd	r25, Z+40	; 0x28
    35fa:	a1 a5       	ldd	r26, Z+41	; 0x29
    35fc:	b2 a5       	ldd	r27, Z+42	; 0x2a
    35fe:	01 96       	adiw	r24, 0x01	; 1
    3600:	a1 1d       	adc	r26, r1
    3602:	b1 1d       	adc	r27, r1
    3604:	2a 81       	ldd	r18, Y+2	; 0x02
    3606:	3b 81       	ldd	r19, Y+3	; 0x03
    3608:	f9 01       	movw	r30, r18
    360a:	87 a3       	std	Z+39, r24	; 0x27
    360c:	90 a7       	std	Z+40, r25	; 0x28
    360e:	a1 a7       	std	Z+41, r26	; 0x29
    3610:	b2 a7       	std	Z+42, r27	; 0x2a
    3612:	1e c0       	rjmp	.+60     	; 0x3650 <xTaskGenericNotify+0x12c>
    3614:	2a 81       	ldd	r18, Y+2	; 0x02
    3616:	3b 81       	ldd	r19, Y+3	; 0x03
    3618:	8f 81       	ldd	r24, Y+7	; 0x07
    361a:	98 85       	ldd	r25, Y+8	; 0x08
    361c:	a9 85       	ldd	r26, Y+9	; 0x09
    361e:	ba 85       	ldd	r27, Y+10	; 0x0a
    3620:	f9 01       	movw	r30, r18
    3622:	87 a3       	std	Z+39, r24	; 0x27
    3624:	90 a7       	std	Z+40, r25	; 0x28
    3626:	a1 a7       	std	Z+41, r26	; 0x29
    3628:	b2 a7       	std	Z+42, r27	; 0x2a
    362a:	12 c0       	rjmp	.+36     	; 0x3650 <xTaskGenericNotify+0x12c>
    362c:	8c 81       	ldd	r24, Y+4	; 0x04
    362e:	82 30       	cpi	r24, 0x02	; 2
    3630:	61 f0       	breq	.+24     	; 0x364a <xTaskGenericNotify+0x126>
    3632:	2a 81       	ldd	r18, Y+2	; 0x02
    3634:	3b 81       	ldd	r19, Y+3	; 0x03
    3636:	8f 81       	ldd	r24, Y+7	; 0x07
    3638:	98 85       	ldd	r25, Y+8	; 0x08
    363a:	a9 85       	ldd	r26, Y+9	; 0x09
    363c:	ba 85       	ldd	r27, Y+10	; 0x0a
    363e:	f9 01       	movw	r30, r18
    3640:	87 a3       	std	Z+39, r24	; 0x27
    3642:	90 a7       	std	Z+40, r25	; 0x28
    3644:	a1 a7       	std	Z+41, r26	; 0x29
    3646:	b2 a7       	std	Z+42, r27	; 0x2a
    3648:	03 c0       	rjmp	.+6      	; 0x3650 <xTaskGenericNotify+0x12c>
    364a:	19 82       	std	Y+1, r1	; 0x01
    364c:	01 c0       	rjmp	.+2      	; 0x3650 <xTaskGenericNotify+0x12c>
    364e:	00 00       	nop
    3650:	8c 81       	ldd	r24, Y+4	; 0x04
    3652:	81 30       	cpi	r24, 0x01	; 1
    3654:	d1 f5       	brne	.+116    	; 0x36ca <xTaskGenericNotify+0x1a6>
    3656:	8a 81       	ldd	r24, Y+2	; 0x02
    3658:	9b 81       	ldd	r25, Y+3	; 0x03
    365a:	02 96       	adiw	r24, 0x02	; 2
    365c:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	9b 81       	ldd	r25, Y+3	; 0x03
    3664:	fc 01       	movw	r30, r24
    3666:	96 89       	ldd	r25, Z+22	; 0x16
    3668:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    366c:	89 17       	cp	r24, r25
    366e:	30 f4       	brcc	.+12     	; 0x367c <xTaskGenericNotify+0x158>
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	9b 81       	ldd	r25, Y+3	; 0x03
    3674:	fc 01       	movw	r30, r24
    3676:	86 89       	ldd	r24, Z+22	; 0x16
    3678:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    367c:	8a 81       	ldd	r24, Y+2	; 0x02
    367e:	9b 81       	ldd	r25, Y+3	; 0x03
    3680:	ac 01       	movw	r20, r24
    3682:	4e 5f       	subi	r20, 0xFE	; 254
    3684:	5f 4f       	sbci	r21, 0xFF	; 255
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	9b 81       	ldd	r25, Y+3	; 0x03
    368a:	fc 01       	movw	r30, r24
    368c:	86 89       	ldd	r24, Z+22	; 0x16
    368e:	28 2f       	mov	r18, r24
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	c9 01       	movw	r24, r18
    3694:	88 0f       	add	r24, r24
    3696:	99 1f       	adc	r25, r25
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	88 0f       	add	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	82 0f       	add	r24, r18
    36a2:	93 1f       	adc	r25, r19
    36a4:	84 5b       	subi	r24, 0xB4	; 180
    36a6:	98 4f       	sbci	r25, 0xF8	; 248
    36a8:	ba 01       	movw	r22, r20
    36aa:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    36ae:	8a 81       	ldd	r24, Y+2	; 0x02
    36b0:	9b 81       	ldd	r25, Y+3	; 0x03
    36b2:	fc 01       	movw	r30, r24
    36b4:	26 89       	ldd	r18, Z+22	; 0x16
    36b6:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    36ba:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    36be:	fc 01       	movw	r30, r24
    36c0:	86 89       	ldd	r24, Z+22	; 0x16
    36c2:	82 17       	cp	r24, r18
    36c4:	10 f4       	brcc	.+4      	; 0x36ca <xTaskGenericNotify+0x1a6>
    36c6:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
    36ca:	0f 90       	pop	r0
    36cc:	0f be       	out	0x3f, r0	; 63
    36ce:	89 81       	ldd	r24, Y+1	; 0x01
    36d0:	2d 96       	adiw	r28, 0x0d	; 13
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	08 95       	ret

000036e6 <xTaskGenericNotifyFromISR>:
    36e6:	ef 92       	push	r14
    36e8:	ff 92       	push	r15
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	60 97       	sbiw	r28, 0x10	; 16
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	9f 83       	std	Y+7, r25	; 0x07
    3704:	8e 83       	std	Y+6, r24	; 0x06
    3706:	48 87       	std	Y+8, r20	; 0x08
    3708:	59 87       	std	Y+9, r21	; 0x09
    370a:	6a 87       	std	Y+10, r22	; 0x0a
    370c:	7b 87       	std	Y+11, r23	; 0x0b
    370e:	2c 87       	std	Y+12, r18	; 0x0c
    3710:	1e 87       	std	Y+14, r17	; 0x0e
    3712:	0d 87       	std	Y+13, r16	; 0x0d
    3714:	f8 8a       	std	Y+16, r15	; 0x10
    3716:	ef 86       	std	Y+15, r14	; 0x0f
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	89 83       	std	Y+1, r24	; 0x01
    371c:	8e 81       	ldd	r24, Y+6	; 0x06
    371e:	9f 81       	ldd	r25, Y+7	; 0x07
    3720:	9b 83       	std	Y+3, r25	; 0x03
    3722:	8a 83       	std	Y+2, r24	; 0x02
    3724:	1c 82       	std	Y+4, r1	; 0x04
    3726:	8d 85       	ldd	r24, Y+13	; 0x0d
    3728:	9e 85       	ldd	r25, Y+14	; 0x0e
    372a:	89 2b       	or	r24, r25
    372c:	71 f0       	breq	.+28     	; 0x374a <xTaskGenericNotifyFromISR+0x64>
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	9b 81       	ldd	r25, Y+3	; 0x03
    3732:	fc 01       	movw	r30, r24
    3734:	87 a1       	ldd	r24, Z+39	; 0x27
    3736:	90 a5       	ldd	r25, Z+40	; 0x28
    3738:	a1 a5       	ldd	r26, Z+41	; 0x29
    373a:	b2 a5       	ldd	r27, Z+42	; 0x2a
    373c:	2d 85       	ldd	r18, Y+13	; 0x0d
    373e:	3e 85       	ldd	r19, Y+14	; 0x0e
    3740:	f9 01       	movw	r30, r18
    3742:	80 83       	st	Z, r24
    3744:	91 83       	std	Z+1, r25	; 0x01
    3746:	a2 83       	std	Z+2, r26	; 0x02
    3748:	b3 83       	std	Z+3, r27	; 0x03
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
    374c:	9b 81       	ldd	r25, Y+3	; 0x03
    374e:	fc 01       	movw	r30, r24
    3750:	83 a5       	ldd	r24, Z+43	; 0x2b
    3752:	8d 83       	std	Y+5, r24	; 0x05
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	9b 81       	ldd	r25, Y+3	; 0x03
    3758:	22 e0       	ldi	r18, 0x02	; 2
    375a:	fc 01       	movw	r30, r24
    375c:	23 a7       	std	Z+43, r18	; 0x2b
    375e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3760:	88 2f       	mov	r24, r24
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	82 30       	cpi	r24, 0x02	; 2
    3766:	91 05       	cpc	r25, r1
    3768:	31 f1       	breq	.+76     	; 0x37b6 <xTaskGenericNotifyFromISR+0xd0>
    376a:	83 30       	cpi	r24, 0x03	; 3
    376c:	91 05       	cpc	r25, r1
    376e:	34 f4       	brge	.+12     	; 0x377c <xTaskGenericNotifyFromISR+0x96>
    3770:	00 97       	sbiw	r24, 0x00	; 0
    3772:	09 f4       	brne	.+2      	; 0x3776 <xTaskGenericNotifyFromISR+0x90>
    3774:	4f c0       	rjmp	.+158    	; 0x3814 <xTaskGenericNotifyFromISR+0x12e>
    3776:	01 97       	sbiw	r24, 0x01	; 1
    3778:	39 f0       	breq	.+14     	; 0x3788 <xTaskGenericNotifyFromISR+0xa2>
    377a:	4d c0       	rjmp	.+154    	; 0x3816 <xTaskGenericNotifyFromISR+0x130>
    377c:	83 30       	cpi	r24, 0x03	; 3
    377e:	91 05       	cpc	r25, r1
    3780:	61 f1       	breq	.+88     	; 0x37da <xTaskGenericNotifyFromISR+0xf4>
    3782:	04 97       	sbiw	r24, 0x04	; 4
    3784:	b1 f1       	breq	.+108    	; 0x37f2 <xTaskGenericNotifyFromISR+0x10c>
    3786:	47 c0       	rjmp	.+142    	; 0x3816 <xTaskGenericNotifyFromISR+0x130>
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	9b 81       	ldd	r25, Y+3	; 0x03
    378c:	fc 01       	movw	r30, r24
    378e:	27 a1       	ldd	r18, Z+39	; 0x27
    3790:	30 a5       	ldd	r19, Z+40	; 0x28
    3792:	41 a5       	ldd	r20, Z+41	; 0x29
    3794:	52 a5       	ldd	r21, Z+42	; 0x2a
    3796:	88 85       	ldd	r24, Y+8	; 0x08
    3798:	99 85       	ldd	r25, Y+9	; 0x09
    379a:	aa 85       	ldd	r26, Y+10	; 0x0a
    379c:	bb 85       	ldd	r27, Y+11	; 0x0b
    379e:	82 2b       	or	r24, r18
    37a0:	93 2b       	or	r25, r19
    37a2:	a4 2b       	or	r26, r20
    37a4:	b5 2b       	or	r27, r21
    37a6:	2a 81       	ldd	r18, Y+2	; 0x02
    37a8:	3b 81       	ldd	r19, Y+3	; 0x03
    37aa:	f9 01       	movw	r30, r18
    37ac:	87 a3       	std	Z+39, r24	; 0x27
    37ae:	90 a7       	std	Z+40, r25	; 0x28
    37b0:	a1 a7       	std	Z+41, r26	; 0x29
    37b2:	b2 a7       	std	Z+42, r27	; 0x2a
    37b4:	30 c0       	rjmp	.+96     	; 0x3816 <xTaskGenericNotifyFromISR+0x130>
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ba:	fc 01       	movw	r30, r24
    37bc:	87 a1       	ldd	r24, Z+39	; 0x27
    37be:	90 a5       	ldd	r25, Z+40	; 0x28
    37c0:	a1 a5       	ldd	r26, Z+41	; 0x29
    37c2:	b2 a5       	ldd	r27, Z+42	; 0x2a
    37c4:	01 96       	adiw	r24, 0x01	; 1
    37c6:	a1 1d       	adc	r26, r1
    37c8:	b1 1d       	adc	r27, r1
    37ca:	2a 81       	ldd	r18, Y+2	; 0x02
    37cc:	3b 81       	ldd	r19, Y+3	; 0x03
    37ce:	f9 01       	movw	r30, r18
    37d0:	87 a3       	std	Z+39, r24	; 0x27
    37d2:	90 a7       	std	Z+40, r25	; 0x28
    37d4:	a1 a7       	std	Z+41, r26	; 0x29
    37d6:	b2 a7       	std	Z+42, r27	; 0x2a
    37d8:	1e c0       	rjmp	.+60     	; 0x3816 <xTaskGenericNotifyFromISR+0x130>
    37da:	2a 81       	ldd	r18, Y+2	; 0x02
    37dc:	3b 81       	ldd	r19, Y+3	; 0x03
    37de:	88 85       	ldd	r24, Y+8	; 0x08
    37e0:	99 85       	ldd	r25, Y+9	; 0x09
    37e2:	aa 85       	ldd	r26, Y+10	; 0x0a
    37e4:	bb 85       	ldd	r27, Y+11	; 0x0b
    37e6:	f9 01       	movw	r30, r18
    37e8:	87 a3       	std	Z+39, r24	; 0x27
    37ea:	90 a7       	std	Z+40, r25	; 0x28
    37ec:	a1 a7       	std	Z+41, r26	; 0x29
    37ee:	b2 a7       	std	Z+42, r27	; 0x2a
    37f0:	12 c0       	rjmp	.+36     	; 0x3816 <xTaskGenericNotifyFromISR+0x130>
    37f2:	8d 81       	ldd	r24, Y+5	; 0x05
    37f4:	82 30       	cpi	r24, 0x02	; 2
    37f6:	61 f0       	breq	.+24     	; 0x3810 <xTaskGenericNotifyFromISR+0x12a>
    37f8:	2a 81       	ldd	r18, Y+2	; 0x02
    37fa:	3b 81       	ldd	r19, Y+3	; 0x03
    37fc:	88 85       	ldd	r24, Y+8	; 0x08
    37fe:	99 85       	ldd	r25, Y+9	; 0x09
    3800:	aa 85       	ldd	r26, Y+10	; 0x0a
    3802:	bb 85       	ldd	r27, Y+11	; 0x0b
    3804:	f9 01       	movw	r30, r18
    3806:	87 a3       	std	Z+39, r24	; 0x27
    3808:	90 a7       	std	Z+40, r25	; 0x28
    380a:	a1 a7       	std	Z+41, r26	; 0x29
    380c:	b2 a7       	std	Z+42, r27	; 0x2a
    380e:	03 c0       	rjmp	.+6      	; 0x3816 <xTaskGenericNotifyFromISR+0x130>
    3810:	19 82       	std	Y+1, r1	; 0x01
    3812:	01 c0       	rjmp	.+2      	; 0x3816 <xTaskGenericNotifyFromISR+0x130>
    3814:	00 00       	nop
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	81 30       	cpi	r24, 0x01	; 1
    381a:	09 f0       	breq	.+2      	; 0x381e <xTaskGenericNotifyFromISR+0x138>
    381c:	51 c0       	rjmp	.+162    	; 0x38c0 <xTaskGenericNotifyFromISR+0x1da>
    381e:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <uxSchedulerSuspended>
    3822:	88 23       	and	r24, r24
    3824:	69 f5       	brne	.+90     	; 0x3880 <xTaskGenericNotifyFromISR+0x19a>
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	02 96       	adiw	r24, 0x02	; 2
    382c:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	9b 81       	ldd	r25, Y+3	; 0x03
    3834:	fc 01       	movw	r30, r24
    3836:	96 89       	ldd	r25, Z+22	; 0x16
    3838:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <uxTopReadyPriority>
    383c:	89 17       	cp	r24, r25
    383e:	30 f4       	brcc	.+12     	; 0x384c <xTaskGenericNotifyFromISR+0x166>
    3840:	8a 81       	ldd	r24, Y+2	; 0x02
    3842:	9b 81       	ldd	r25, Y+3	; 0x03
    3844:	fc 01       	movw	r30, r24
    3846:	86 89       	ldd	r24, Z+22	; 0x16
    3848:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <uxTopReadyPriority>
    384c:	8a 81       	ldd	r24, Y+2	; 0x02
    384e:	9b 81       	ldd	r25, Y+3	; 0x03
    3850:	ac 01       	movw	r20, r24
    3852:	4e 5f       	subi	r20, 0xFE	; 254
    3854:	5f 4f       	sbci	r21, 0xFF	; 255
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	9b 81       	ldd	r25, Y+3	; 0x03
    385a:	fc 01       	movw	r30, r24
    385c:	86 89       	ldd	r24, Z+22	; 0x16
    385e:	28 2f       	mov	r18, r24
    3860:	30 e0       	ldi	r19, 0x00	; 0
    3862:	c9 01       	movw	r24, r18
    3864:	88 0f       	add	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	88 0f       	add	r24, r24
    386a:	99 1f       	adc	r25, r25
    386c:	88 0f       	add	r24, r24
    386e:	99 1f       	adc	r25, r25
    3870:	82 0f       	add	r24, r18
    3872:	93 1f       	adc	r25, r19
    3874:	84 5b       	subi	r24, 0xB4	; 180
    3876:	98 4f       	sbci	r25, 0xF8	; 248
    3878:	ba 01       	movw	r22, r20
    387a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    387e:	08 c0       	rjmp	.+16     	; 0x3890 <xTaskGenericNotifyFromISR+0x1aa>
    3880:	8a 81       	ldd	r24, Y+2	; 0x02
    3882:	9b 81       	ldd	r25, Y+3	; 0x03
    3884:	0c 96       	adiw	r24, 0x0c	; 12
    3886:	bc 01       	movw	r22, r24
    3888:	86 e8       	ldi	r24, 0x86	; 134
    388a:	97 e0       	ldi	r25, 0x07	; 7
    388c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>
    3890:	8a 81       	ldd	r24, Y+2	; 0x02
    3892:	9b 81       	ldd	r25, Y+3	; 0x03
    3894:	fc 01       	movw	r30, r24
    3896:	26 89       	ldd	r18, Z+22	; 0x16
    3898:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    389c:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    38a0:	fc 01       	movw	r30, r24
    38a2:	86 89       	ldd	r24, Z+22	; 0x16
    38a4:	82 17       	cp	r24, r18
    38a6:	60 f4       	brcc	.+24     	; 0x38c0 <xTaskGenericNotifyFromISR+0x1da>
    38a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38aa:	98 89       	ldd	r25, Y+16	; 0x10
    38ac:	89 2b       	or	r24, r25
    38ae:	29 f0       	breq	.+10     	; 0x38ba <xTaskGenericNotifyFromISR+0x1d4>
    38b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b2:	98 89       	ldd	r25, Y+16	; 0x10
    38b4:	21 e0       	ldi	r18, 0x01	; 1
    38b6:	fc 01       	movw	r30, r24
    38b8:	20 83       	st	Z, r18
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <xYieldPending>
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	60 96       	adiw	r28, 0x10	; 16
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	de bf       	out	0x3e, r29	; 62
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	cd bf       	out	0x3d, r28	; 61
    38ce:	df 91       	pop	r29
    38d0:	cf 91       	pop	r28
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	ff 90       	pop	r15
    38d8:	ef 90       	pop	r14
    38da:	08 95       	ret

000038dc <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
    {
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	00 d0       	rcall	.+0      	; 0x38e2 <xTaskNotifyStateClear+0x6>
    38e2:	1f 92       	push	r1
    38e4:	1f 92       	push	r1
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	9d 83       	std	Y+5, r25	; 0x05
    38ec:	8c 83       	std	Y+4, r24	; 0x04
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    38ee:	8c 81       	ldd	r24, Y+4	; 0x04
    38f0:	9d 81       	ldd	r25, Y+5	; 0x05
    38f2:	89 2b       	or	r24, r25
    38f4:	29 f4       	brne	.+10     	; 0x3900 <xTaskNotifyStateClear+0x24>
    38f6:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    38fa:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    38fe:	02 c0       	rjmp	.+4      	; 0x3904 <xTaskNotifyStateClear+0x28>
    3900:	8c 81       	ldd	r24, Y+4	; 0x04
    3902:	9d 81       	ldd	r25, Y+5	; 0x05
    3904:	9b 83       	std	Y+3, r25	; 0x03
    3906:	8a 83       	std	Y+2, r24	; 0x02

        taskENTER_CRITICAL();
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    390e:	8a 81       	ldd	r24, Y+2	; 0x02
    3910:	9b 81       	ldd	r25, Y+3	; 0x03
    3912:	fc 01       	movw	r30, r24
    3914:	83 a5       	ldd	r24, Z+43	; 0x2b
    3916:	82 30       	cpi	r24, 0x02	; 2
    3918:	39 f4       	brne	.+14     	; 0x3928 <xTaskNotifyStateClear+0x4c>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    391a:	8a 81       	ldd	r24, Y+2	; 0x02
    391c:	9b 81       	ldd	r25, Y+3	; 0x03
    391e:	fc 01       	movw	r30, r24
    3920:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	89 83       	std	Y+1, r24	; 0x01
    3926:	01 c0       	rjmp	.+2      	; 0x392a <xTaskNotifyStateClear+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
    3928:	19 82       	std	Y+1, r1	; 0x01
            }
        }
        taskEXIT_CRITICAL();
    392a:	0f 90       	pop	r0
    392c:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    }
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	08 95       	ret

00003940 <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3940:	cf 93       	push	r28
    3942:	df 93       	push	r29
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	27 97       	sbiw	r28, 0x07	; 7
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	de bf       	out	0x3e, r29	; 62
    3950:	0f be       	out	0x3f, r0	; 63
    3952:	cd bf       	out	0x3d, r28	; 61
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
    3958:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    395a:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <xTickCount>
    395e:	90 91 a4 07 	lds	r25, 0x07A4	; 0x8007a4 <xTickCount+0x1>
    3962:	9a 83       	std	Y+2, r25	; 0x02
    3964:	89 83       	std	Y+1, r24	; 0x01
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3966:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    396a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    396e:	02 96       	adiw	r24, 0x02	; 2
    3970:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    3974:	8d 81       	ldd	r24, Y+5	; 0x05
    3976:	9e 81       	ldd	r25, Y+6	; 0x06
    3978:	01 96       	adiw	r24, 0x01	; 1
    397a:	71 f4       	brne	.+28     	; 0x3998 <prvAddCurrentTaskToDelayedList+0x58>
    397c:	8f 81       	ldd	r24, Y+7	; 0x07
    397e:	88 23       	and	r24, r24
    3980:	59 f0       	breq	.+22     	; 0x3998 <prvAddCurrentTaskToDelayedList+0x58>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3982:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    3986:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    398a:	02 96       	adiw	r24, 0x02	; 2
    398c:	bc 01       	movw	r22, r24
    398e:	89 e9       	ldi	r24, 0x99	; 153
    3990:	97 e0       	ldi	r25, 0x07	; 7
    3992:	0e 94 53 02 	call	0x4a6	; 0x4a6 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3996:	44 c0       	rjmp	.+136    	; 0x3a20 <prvAddCurrentTaskToDelayedList+0xe0>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    3998:	29 81       	ldd	r18, Y+1	; 0x01
    399a:	3a 81       	ldd	r19, Y+2	; 0x02
    399c:	8d 81       	ldd	r24, Y+5	; 0x05
    399e:	9e 81       	ldd	r25, Y+6	; 0x06
    39a0:	82 0f       	add	r24, r18
    39a2:	93 1f       	adc	r25, r19
    39a4:	9c 83       	std	Y+4, r25	; 0x04
    39a6:	8b 83       	std	Y+3, r24	; 0x03

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    39a8:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    39ac:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    39b0:	2b 81       	ldd	r18, Y+3	; 0x03
    39b2:	3c 81       	ldd	r19, Y+4	; 0x04
    39b4:	fc 01       	movw	r30, r24
    39b6:	33 83       	std	Z+3, r19	; 0x03
    39b8:	22 83       	std	Z+2, r18	; 0x02

            if( xTimeToWake < xConstTickCount )
    39ba:	2b 81       	ldd	r18, Y+3	; 0x03
    39bc:	3c 81       	ldd	r19, Y+4	; 0x04
    39be:	89 81       	ldd	r24, Y+1	; 0x01
    39c0:	9a 81       	ldd	r25, Y+2	; 0x02
    39c2:	28 17       	cp	r18, r24
    39c4:	39 07       	cpc	r19, r25
    39c6:	78 f4       	brcc	.+30     	; 0x39e6 <prvAddCurrentTaskToDelayedList+0xa6>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    39c8:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    39cc:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    39d0:	9c 01       	movw	r18, r24
    39d2:	2e 5f       	subi	r18, 0xFE	; 254
    39d4:	3f 4f       	sbci	r19, 0xFF	; 255
    39d6:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <pxOverflowDelayedTaskList>
    39da:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <pxOverflowDelayedTaskList+0x1>
    39de:	b9 01       	movw	r22, r18
    39e0:	0e 94 a1 02 	call	0x542	; 0x542 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    39e4:	1d c0       	rjmp	.+58     	; 0x3a20 <prvAddCurrentTaskToDelayedList+0xe0>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    39e6:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <__data_end>
    39ea:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <__data_end+0x1>
    39ee:	9c 01       	movw	r18, r24
    39f0:	2e 5f       	subi	r18, 0xFE	; 254
    39f2:	3f 4f       	sbci	r19, 0xFF	; 255
    39f4:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <pxDelayedTaskList>
    39f8:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <pxDelayedTaskList+0x1>
    39fc:	b9 01       	movw	r22, r18
    39fe:	0e 94 a1 02 	call	0x542	; 0x542 <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    3a02:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <xNextTaskUnblockTime>
    3a06:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <xNextTaskUnblockTime+0x1>
    3a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    3a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    3a0e:	28 17       	cp	r18, r24
    3a10:	39 07       	cpc	r19, r25
    3a12:	30 f4       	brcc	.+12     	; 0x3a20 <prvAddCurrentTaskToDelayedList+0xe0>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    3a14:	8b 81       	ldd	r24, Y+3	; 0x03
    3a16:	9c 81       	ldd	r25, Y+4	; 0x04
    3a18:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <xNextTaskUnblockTime+0x1>
    3a1c:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <xNextTaskUnblockTime>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    3a20:	00 00       	nop
    3a22:	27 96       	adiw	r28, 0x07	; 7
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	de bf       	out	0x3e, r29	; 62
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	cd bf       	out	0x3d, r28	; 61
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	08 95       	ret

00003a34 <xTimerCreateTimerTask>:
    3a34:	ef 92       	push	r14
    3a36:	ff 92       	push	r15
    3a38:	0f 93       	push	r16
    3a3a:	cf 93       	push	r28
    3a3c:	df 93       	push	r29
    3a3e:	1f 92       	push	r1
    3a40:	cd b7       	in	r28, 0x3d	; 61
    3a42:	de b7       	in	r29, 0x3e	; 62
    3a44:	19 82       	std	Y+1, r1	; 0x01
    3a46:	a4 d3       	rcall	.+1864   	; 0x4190 <prvCheckForValidListAndQueue>
    3a48:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    3a4c:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    3a50:	89 2b       	or	r24, r25
    3a52:	91 f0       	breq	.+36     	; 0x3a78 <xTimerCreateTimerTask+0x44>
    3a54:	0f 2e       	mov	r0, r31
    3a56:	f8 ec       	ldi	r31, 0xC8	; 200
    3a58:	ef 2e       	mov	r14, r31
    3a5a:	f7 e0       	ldi	r31, 0x07	; 7
    3a5c:	ff 2e       	mov	r15, r31
    3a5e:	f0 2d       	mov	r31, r0
    3a60:	06 e0       	ldi	r16, 0x06	; 6
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	45 e5       	ldi	r20, 0x55	; 85
    3a68:	50 e0       	ldi	r21, 0x00	; 0
    3a6a:	66 e2       	ldi	r22, 0x26	; 38
    3a6c:	72 e0       	ldi	r23, 0x02	; 2
    3a6e:	80 e6       	ldi	r24, 0x60	; 96
    3a70:	91 e0       	ldi	r25, 0x01	; 1
    3a72:	0e 94 20 11 	call	0x2240	; 0x2240 <xTaskCreate>
    3a76:	89 83       	std	Y+1, r24	; 0x01
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	0f 90       	pop	r0
    3a7c:	df 91       	pop	r29
    3a7e:	cf 91       	pop	r28
    3a80:	0f 91       	pop	r16
    3a82:	ff 90       	pop	r15
    3a84:	ef 90       	pop	r14
    3a86:	08 95       	ret

00003a88 <xTimerGenericCommand>:
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    3a94:	2f 97       	sbiw	r28, 0x0f	; 15
    3a96:	0f b6       	in	r0, 0x3f	; 63
    3a98:	f8 94       	cli
    3a9a:	de bf       	out	0x3e, r29	; 62
    3a9c:	0f be       	out	0x3f, r0	; 63
    3a9e:	cd bf       	out	0x3d, r28	; 61
    3aa0:	98 87       	std	Y+8, r25	; 0x08
    3aa2:	8f 83       	std	Y+7, r24	; 0x07
    3aa4:	69 87       	std	Y+9, r22	; 0x09
    3aa6:	5b 87       	std	Y+11, r21	; 0x0b
    3aa8:	4a 87       	std	Y+10, r20	; 0x0a
    3aaa:	3d 87       	std	Y+13, r19	; 0x0d
    3aac:	2c 87       	std	Y+12, r18	; 0x0c
    3aae:	1f 87       	std	Y+15, r17	; 0x0f
    3ab0:	0e 87       	std	Y+14, r16	; 0x0e
    3ab2:	19 82       	std	Y+1, r1	; 0x01
    3ab4:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    3ab8:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    3abc:	89 2b       	or	r24, r25
    3abe:	c9 f1       	breq	.+114    	; 0x3b32 <xTimerGenericCommand+0xaa>
    3ac0:	89 85       	ldd	r24, Y+9	; 0x09
    3ac2:	8a 83       	std	Y+2, r24	; 0x02
    3ac4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ac6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ac8:	9c 83       	std	Y+4, r25	; 0x04
    3aca:	8b 83       	std	Y+3, r24	; 0x03
    3acc:	8f 81       	ldd	r24, Y+7	; 0x07
    3ace:	98 85       	ldd	r25, Y+8	; 0x08
    3ad0:	9e 83       	std	Y+6, r25	; 0x06
    3ad2:	8d 83       	std	Y+5, r24	; 0x05
    3ad4:	89 85       	ldd	r24, Y+9	; 0x09
    3ad6:	86 30       	cpi	r24, 0x06	; 6
    3ad8:	fc f4       	brge	.+62     	; 0x3b18 <xTimerGenericCommand+0x90>
    3ada:	83 da       	rcall	.-2810   	; 0x2fe2 <xTaskGetSchedulerState>
    3adc:	82 30       	cpi	r24, 0x02	; 2
    3ade:	71 f4       	brne	.+28     	; 0x3afc <xTimerGenericCommand+0x74>
    3ae0:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    3ae4:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    3ae8:	4e 85       	ldd	r20, Y+14	; 0x0e
    3aea:	5f 85       	ldd	r21, Y+15	; 0x0f
    3aec:	be 01       	movw	r22, r28
    3aee:	6e 5f       	subi	r22, 0xFE	; 254
    3af0:	7f 4f       	sbci	r23, 0xFF	; 255
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
    3af8:	89 83       	std	Y+1, r24	; 0x01
    3afa:	1b c0       	rjmp	.+54     	; 0x3b32 <xTimerGenericCommand+0xaa>
    3afc:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    3b00:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    3b04:	be 01       	movw	r22, r28
    3b06:	6e 5f       	subi	r22, 0xFE	; 254
    3b08:	7f 4f       	sbci	r23, 0xFF	; 255
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	50 e0       	ldi	r21, 0x00	; 0
    3b10:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
    3b14:	89 83       	std	Y+1, r24	; 0x01
    3b16:	0d c0       	rjmp	.+26     	; 0x3b32 <xTimerGenericCommand+0xaa>
    3b18:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    3b1c:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    3b20:	4c 85       	ldd	r20, Y+12	; 0x0c
    3b22:	5d 85       	ldd	r21, Y+13	; 0x0d
    3b24:	be 01       	movw	r22, r28
    3b26:	6e 5f       	subi	r22, 0xFE	; 254
    3b28:	7f 4f       	sbci	r23, 0xFF	; 255
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <xQueueGenericSendFromISR>
    3b30:	89 83       	std	Y+1, r24	; 0x01
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	2f 96       	adiw	r28, 0x0f	; 15
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	de bf       	out	0x3e, r29	; 62
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	08 95       	ret

00003b4a <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    3b4a:	0f 93       	push	r16
    3b4c:	1f 93       	push	r17
    3b4e:	cf 93       	push	r28
    3b50:	df 93       	push	r29
    3b52:	cd b7       	in	r28, 0x3d	; 61
    3b54:	de b7       	in	r29, 0x3e	; 62
    3b56:	27 97       	sbiw	r28, 0x07	; 7
    3b58:	0f b6       	in	r0, 0x3f	; 63
    3b5a:	f8 94       	cli
    3b5c:	de bf       	out	0x3e, r29	; 62
    3b5e:	0f be       	out	0x3f, r0	; 63
    3b60:	cd bf       	out	0x3d, r28	; 61
    3b62:	9d 83       	std	Y+5, r25	; 0x05
    3b64:	8c 83       	std	Y+4, r24	; 0x04
    3b66:	7f 83       	std	Y+7, r23	; 0x07
    3b68:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    3b6a:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    3b6e:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    3b72:	fc 01       	movw	r30, r24
    3b74:	85 81       	ldd	r24, Z+5	; 0x05
    3b76:	96 81       	ldd	r25, Z+6	; 0x06
    3b78:	fc 01       	movw	r30, r24
    3b7a:	86 81       	ldd	r24, Z+6	; 0x06
    3b7c:	97 81       	ldd	r25, Z+7	; 0x07
    3b7e:	9a 83       	std	Y+2, r25	; 0x02
    3b80:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	9a 81       	ldd	r25, Y+2	; 0x02
    3b86:	02 96       	adiw	r24, 0x02	; 2
    3b88:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b90:	fc 01       	movw	r30, r24
    3b92:	83 89       	ldd	r24, Z+19	; 0x13
    3b94:	88 2f       	mov	r24, r24
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	84 70       	andi	r24, 0x04	; 4
    3b9a:	99 27       	eor	r25, r25
    3b9c:	89 2b       	or	r24, r25
    3b9e:	f9 f0       	breq	.+62     	; 0x3bde <prvProcessExpiredTimer+0x94>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	24 85       	ldd	r18, Z+12	; 0x0c
    3ba8:	35 85       	ldd	r19, Z+13	; 0x0d
    3baa:	8c 81       	ldd	r24, Y+4	; 0x04
    3bac:	9d 81       	ldd	r25, Y+5	; 0x05
    3bae:	b9 01       	movw	r22, r18
    3bb0:	68 0f       	add	r22, r24
    3bb2:	79 1f       	adc	r23, r25
    3bb4:	2c 81       	ldd	r18, Y+4	; 0x04
    3bb6:	3d 81       	ldd	r19, Y+5	; 0x05
    3bb8:	4e 81       	ldd	r20, Y+6	; 0x06
    3bba:	5f 81       	ldd	r21, Y+7	; 0x07
    3bbc:	89 81       	ldd	r24, Y+1	; 0x01
    3bbe:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc0:	e6 d0       	rcall	.+460    	; 0x3d8e <prvInsertTimerInActiveList>
    3bc2:	88 23       	and	r24, r24
    3bc4:	b1 f0       	breq	.+44     	; 0x3bf2 <prvProcessExpiredTimer+0xa8>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    3bc6:	4c 81       	ldd	r20, Y+4	; 0x04
    3bc8:	5d 81       	ldd	r21, Y+5	; 0x05
    3bca:	89 81       	ldd	r24, Y+1	; 0x01
    3bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bce:	00 e0       	ldi	r16, 0x00	; 0
    3bd0:	10 e0       	ldi	r17, 0x00	; 0
    3bd2:	20 e0       	ldi	r18, 0x00	; 0
    3bd4:	30 e0       	ldi	r19, 0x00	; 0
    3bd6:	60 e0       	ldi	r22, 0x00	; 0
    3bd8:	57 df       	rcall	.-338    	; 0x3a88 <xTimerGenericCommand>
    3bda:	8b 83       	std	Y+3, r24	; 0x03
    3bdc:	0a c0       	rjmp	.+20     	; 0x3bf2 <prvProcessExpiredTimer+0xa8>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	9a 81       	ldd	r25, Y+2	; 0x02
    3be2:	fc 01       	movw	r30, r24
    3be4:	83 89       	ldd	r24, Z+19	; 0x13
    3be6:	28 2f       	mov	r18, r24
    3be8:	2e 7f       	andi	r18, 0xFE	; 254
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	fc 01       	movw	r30, r24
    3bf0:	23 8b       	std	Z+19, r18	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3bf2:	89 81       	ldd	r24, Y+1	; 0x01
    3bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf6:	fc 01       	movw	r30, r24
    3bf8:	20 89       	ldd	r18, Z+16	; 0x10
    3bfa:	31 89       	ldd	r19, Z+17	; 0x11
    3bfc:	89 81       	ldd	r24, Y+1	; 0x01
    3bfe:	9a 81       	ldd	r25, Y+2	; 0x02
    3c00:	f9 01       	movw	r30, r18
    3c02:	19 95       	eicall
}
    3c04:	00 00       	nop
    3c06:	27 96       	adiw	r28, 0x07	; 7
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	f8 94       	cli
    3c0c:	de bf       	out	0x3e, r29	; 62
    3c0e:	0f be       	out	0x3f, r0	; 63
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	df 91       	pop	r29
    3c14:	cf 91       	pop	r28
    3c16:	1f 91       	pop	r17
    3c18:	0f 91       	pop	r16
    3c1a:	08 95       	ret

00003c1c <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    3c1c:	cf 93       	push	r28
    3c1e:	df 93       	push	r29
    3c20:	00 d0       	rcall	.+0      	; 0x3c22 <prvProcessTimerOrBlockTask+0x6>
    3c22:	00 d0       	rcall	.+0      	; 0x3c24 <prvProcessTimerOrBlockTask+0x8>
    3c24:	cd b7       	in	r28, 0x3d	; 61
    3c26:	de b7       	in	r29, 0x3e	; 62
    3c28:	9d 83       	std	Y+5, r25	; 0x05
    3c2a:	8c 83       	std	Y+4, r24	; 0x04
    3c2c:	6e 83       	std	Y+6, r22	; 0x06
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    3c2e:	0e 94 54 13 	call	0x26a8	; 0x26a8 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3c32:	ce 01       	movw	r24, r28
    3c34:	03 96       	adiw	r24, 0x03	; 3
    3c36:	7c d0       	rcall	.+248    	; 0x3d30 <prvSampleTimeNow>
    3c38:	9a 83       	std	Y+2, r25	; 0x02
    3c3a:	89 83       	std	Y+1, r24	; 0x01
        if( xTimerListsWereSwitched == pdFALSE )
    3c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3e:	88 23       	and	r24, r24
    3c40:	b1 f5       	brne	.+108    	; 0x3cae <prvProcessTimerOrBlockTask+0x92>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3c42:	8e 81       	ldd	r24, Y+6	; 0x06
    3c44:	88 23       	and	r24, r24
    3c46:	81 f4       	brne	.+32     	; 0x3c68 <prvProcessTimerOrBlockTask+0x4c>
    3c48:	2c 81       	ldd	r18, Y+4	; 0x04
    3c4a:	3d 81       	ldd	r19, Y+5	; 0x05
    3c4c:	89 81       	ldd	r24, Y+1	; 0x01
    3c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c50:	82 17       	cp	r24, r18
    3c52:	93 07       	cpc	r25, r19
    3c54:	48 f0       	brcs	.+18     	; 0x3c68 <prvProcessTimerOrBlockTask+0x4c>
            {
                ( void ) xTaskResumeAll();
    3c56:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    3c5a:	29 81       	ldd	r18, Y+1	; 0x01
    3c5c:	3a 81       	ldd	r19, Y+2	; 0x02
    3c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c60:	9d 81       	ldd	r25, Y+5	; 0x05
    3c62:	b9 01       	movw	r22, r18
    3c64:	72 df       	rcall	.-284    	; 0x3b4a <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3c66:	25 c0       	rjmp	.+74     	; 0x3cb2 <prvProcessTimerOrBlockTask+0x96>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    3c68:	8e 81       	ldd	r24, Y+6	; 0x06
    3c6a:	88 23       	and	r24, r24
    3c6c:	59 f0       	breq	.+22     	; 0x3c84 <prvProcessTimerOrBlockTask+0x68>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    3c6e:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxOverflowTimerList>
    3c72:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxOverflowTimerList+0x1>
    3c76:	fc 01       	movw	r30, r24
    3c78:	90 81       	ld	r25, Z
    3c7a:	81 e0       	ldi	r24, 0x01	; 1
    3c7c:	99 23       	and	r25, r25
    3c7e:	09 f0       	breq	.+2      	; 0x3c82 <prvProcessTimerOrBlockTask+0x66>
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	8e 83       	std	Y+6, r24	; 0x06
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    3c84:	2c 81       	ldd	r18, Y+4	; 0x04
    3c86:	3d 81       	ldd	r19, Y+5	; 0x05
    3c88:	89 81       	ldd	r24, Y+1	; 0x01
    3c8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8c:	28 1b       	sub	r18, r24
    3c8e:	39 0b       	sbc	r19, r25
    3c90:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    3c94:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    3c98:	4e 81       	ldd	r20, Y+6	; 0x06
    3c9a:	b9 01       	movw	r22, r18
    3c9c:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    3ca0:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
    3ca4:	88 23       	and	r24, r24
    3ca6:	29 f4       	brne	.+10     	; 0x3cb2 <prvProcessTimerOrBlockTask+0x96>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    3ca8:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    3cac:	02 c0       	rjmp	.+4      	; 0x3cb2 <prvProcessTimerOrBlockTask+0x96>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    3cae:	0e 94 61 13 	call	0x26c2	; 0x26c2 <xTaskResumeAll>
        }
    }
}
    3cb2:	00 00       	nop
    3cb4:	26 96       	adiw	r28, 0x06	; 6
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	de bf       	out	0x3e, r29	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	cd bf       	out	0x3d, r28	; 61
    3cc0:	df 91       	pop	r29
    3cc2:	cf 91       	pop	r28
    3cc4:	08 95       	ret

00003cc6 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    3cc6:	cf 93       	push	r28
    3cc8:	df 93       	push	r29
    3cca:	00 d0       	rcall	.+0      	; 0x3ccc <prvGetNextExpireTime+0x6>
    3ccc:	1f 92       	push	r1
    3cce:	cd b7       	in	r28, 0x3d	; 61
    3cd0:	de b7       	in	r29, 0x3e	; 62
    3cd2:	9c 83       	std	Y+4, r25	; 0x04
    3cd4:	8b 83       	std	Y+3, r24	; 0x03
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    3cd6:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    3cda:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    3cde:	fc 01       	movw	r30, r24
    3ce0:	90 81       	ld	r25, Z
    3ce2:	81 e0       	ldi	r24, 0x01	; 1
    3ce4:	99 23       	and	r25, r25
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <prvGetNextExpireTime+0x24>
    3ce8:	80 e0       	ldi	r24, 0x00	; 0
    3cea:	28 2f       	mov	r18, r24
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    3cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf8:	fc 01       	movw	r30, r24
    3cfa:	80 81       	ld	r24, Z
    3cfc:	88 23       	and	r24, r24
    3cfe:	69 f4       	brne	.+26     	; 0x3d1a <prvGetNextExpireTime+0x54>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    3d00:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    3d04:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    3d08:	fc 01       	movw	r30, r24
    3d0a:	85 81       	ldd	r24, Z+5	; 0x05
    3d0c:	96 81       	ldd	r25, Z+6	; 0x06
    3d0e:	fc 01       	movw	r30, r24
    3d10:	80 81       	ld	r24, Z
    3d12:	91 81       	ldd	r25, Z+1	; 0x01
    3d14:	9a 83       	std	Y+2, r25	; 0x02
    3d16:	89 83       	std	Y+1, r24	; 0x01
    3d18:	02 c0       	rjmp	.+4      	; 0x3d1e <prvGetNextExpireTime+0x58>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    3d1a:	1a 82       	std	Y+2, r1	; 0x02
    3d1c:	19 82       	std	Y+1, r1	; 0x01
    }

    return xNextExpireTime;
    3d1e:	89 81       	ldd	r24, Y+1	; 0x01
    3d20:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	0f 90       	pop	r0
    3d2a:	df 91       	pop	r29
    3d2c:	cf 91       	pop	r28
    3d2e:	08 95       	ret

00003d30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    3d30:	cf 93       	push	r28
    3d32:	df 93       	push	r29
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <prvSampleTimeNow+0x6>
    3d36:	1f 92       	push	r1
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	9c 83       	std	Y+4, r25	; 0x04
    3d3e:	8b 83       	std	Y+3, r24	; 0x03
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    3d40:	0e 94 f6 13 	call	0x27ec	; 0x27ec <xTaskGetTickCount>
    3d44:	9a 83       	std	Y+2, r25	; 0x02
    3d46:	89 83       	std	Y+1, r24	; 0x01

    if( xTimeNow < xLastTime )
    3d48:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <xLastTime.2432>
    3d4c:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <xLastTime.2432+0x1>
    3d50:	29 81       	ldd	r18, Y+1	; 0x01
    3d52:	3a 81       	ldd	r19, Y+2	; 0x02
    3d54:	28 17       	cp	r18, r24
    3d56:	39 07       	cpc	r19, r25
    3d58:	38 f4       	brcc	.+14     	; 0x3d68 <prvSampleTimeNow+0x38>
    {
        prvSwitchTimerLists();
    3d5a:	7c d1       	rcall	.+760    	; 0x4054 <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    3d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d60:	21 e0       	ldi	r18, 0x01	; 1
    3d62:	fc 01       	movw	r30, r24
    3d64:	20 83       	st	Z, r18
    3d66:	04 c0       	rjmp	.+8      	; 0x3d70 <prvSampleTimeNow+0x40>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    3d68:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
    3d72:	9a 81       	ldd	r25, Y+2	; 0x02
    3d74:	90 93 cb 07 	sts	0x07CB, r25	; 0x8007cb <xLastTime.2432+0x1>
    3d78:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <xLastTime.2432>

    return xTimeNow;
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3d80:	0f 90       	pop	r0
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	df 91       	pop	r29
    3d8a:	cf 91       	pop	r28
    3d8c:	08 95       	ret

00003d8e <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	cd b7       	in	r28, 0x3d	; 61
    3d94:	de b7       	in	r29, 0x3e	; 62
    3d96:	29 97       	sbiw	r28, 0x09	; 9
    3d98:	0f b6       	in	r0, 0x3f	; 63
    3d9a:	f8 94       	cli
    3d9c:	de bf       	out	0x3e, r29	; 62
    3d9e:	0f be       	out	0x3f, r0	; 63
    3da0:	cd bf       	out	0x3d, r28	; 61
    3da2:	9b 83       	std	Y+3, r25	; 0x03
    3da4:	8a 83       	std	Y+2, r24	; 0x02
    3da6:	7d 83       	std	Y+5, r23	; 0x05
    3da8:	6c 83       	std	Y+4, r22	; 0x04
    3daa:	5f 83       	std	Y+7, r21	; 0x07
    3dac:	4e 83       	std	Y+6, r20	; 0x06
    3dae:	39 87       	std	Y+9, r19	; 0x09
    3db0:	28 87       	std	Y+8, r18	; 0x08
BaseType_t xProcessTimerNow = pdFALSE;
    3db2:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	9b 81       	ldd	r25, Y+3	; 0x03
    3db8:	2c 81       	ldd	r18, Y+4	; 0x04
    3dba:	3d 81       	ldd	r19, Y+5	; 0x05
    3dbc:	fc 01       	movw	r30, r24
    3dbe:	33 83       	std	Z+3, r19	; 0x03
    3dc0:	22 83       	std	Z+2, r18	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    3dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    3dc6:	2a 81       	ldd	r18, Y+2	; 0x02
    3dc8:	3b 81       	ldd	r19, Y+3	; 0x03
    3dca:	fc 01       	movw	r30, r24
    3dcc:	31 87       	std	Z+9, r19	; 0x09
    3dce:	20 87       	std	Z+8, r18	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    3dd0:	2c 81       	ldd	r18, Y+4	; 0x04
    3dd2:	3d 81       	ldd	r19, Y+5	; 0x05
    3dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    3dd8:	82 17       	cp	r24, r18
    3dda:	93 07       	cpc	r25, r19
    3ddc:	f0 f0       	brcs	.+60     	; 0x3e1a <prvInsertTimerInActiveList+0x8c>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    3dde:	2e 81       	ldd	r18, Y+6	; 0x06
    3de0:	3f 81       	ldd	r19, Y+7	; 0x07
    3de2:	88 85       	ldd	r24, Y+8	; 0x08
    3de4:	99 85       	ldd	r25, Y+9	; 0x09
    3de6:	28 1b       	sub	r18, r24
    3de8:	39 0b       	sbc	r19, r25
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	9b 81       	ldd	r25, Y+3	; 0x03
    3dee:	fc 01       	movw	r30, r24
    3df0:	84 85       	ldd	r24, Z+12	; 0x0c
    3df2:	95 85       	ldd	r25, Z+13	; 0x0d
    3df4:	28 17       	cp	r18, r24
    3df6:	39 07       	cpc	r19, r25
    3df8:	18 f0       	brcs	.+6      	; 0x3e00 <prvInsertTimerInActiveList+0x72>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    3dfa:	81 e0       	ldi	r24, 0x01	; 1
    3dfc:	89 83       	std	Y+1, r24	; 0x01
    3dfe:	2a c0       	rjmp	.+84     	; 0x3e54 <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    3e00:	8a 81       	ldd	r24, Y+2	; 0x02
    3e02:	9b 81       	ldd	r25, Y+3	; 0x03
    3e04:	9c 01       	movw	r18, r24
    3e06:	2e 5f       	subi	r18, 0xFE	; 254
    3e08:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0a:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxOverflowTimerList>
    3e0e:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxOverflowTimerList+0x1>
    3e12:	b9 01       	movw	r22, r18
    3e14:	0e 94 a1 02 	call	0x542	; 0x542 <vListInsert>
    3e18:	1d c0       	rjmp	.+58     	; 0x3e54 <prvInsertTimerInActiveList+0xc6>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    3e1a:	2e 81       	ldd	r18, Y+6	; 0x06
    3e1c:	3f 81       	ldd	r19, Y+7	; 0x07
    3e1e:	88 85       	ldd	r24, Y+8	; 0x08
    3e20:	99 85       	ldd	r25, Y+9	; 0x09
    3e22:	28 17       	cp	r18, r24
    3e24:	39 07       	cpc	r19, r25
    3e26:	50 f4       	brcc	.+20     	; 0x3e3c <prvInsertTimerInActiveList+0xae>
    3e28:	2c 81       	ldd	r18, Y+4	; 0x04
    3e2a:	3d 81       	ldd	r19, Y+5	; 0x05
    3e2c:	88 85       	ldd	r24, Y+8	; 0x08
    3e2e:	99 85       	ldd	r25, Y+9	; 0x09
    3e30:	28 17       	cp	r18, r24
    3e32:	39 07       	cpc	r19, r25
    3e34:	18 f0       	brcs	.+6      	; 0x3e3c <prvInsertTimerInActiveList+0xae>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	89 83       	std	Y+1, r24	; 0x01
    3e3a:	0c c0       	rjmp	.+24     	; 0x3e54 <prvInsertTimerInActiveList+0xc6>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    3e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e40:	9c 01       	movw	r18, r24
    3e42:	2e 5f       	subi	r18, 0xFE	; 254
    3e44:	3f 4f       	sbci	r19, 0xFF	; 255
    3e46:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    3e4a:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    3e4e:	b9 01       	movw	r22, r18
    3e50:	0e 94 a1 02 	call	0x542	; 0x542 <vListInsert>
        }
    }

    return xProcessTimerNow;
    3e54:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e56:	29 96       	adiw	r28, 0x09	; 9
    3e58:	0f b6       	in	r0, 0x3f	; 63
    3e5a:	f8 94       	cli
    3e5c:	de bf       	out	0x3e, r29	; 62
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	cd bf       	out	0x3d, r28	; 61
    3e62:	df 91       	pop	r29
    3e64:	cf 91       	pop	r28
    3e66:	08 95       	ret

00003e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    3e68:	0f 93       	push	r16
    3e6a:	1f 93       	push	r17
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	2b 97       	sbiw	r28, 0x0b	; 11
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3e80:	ce c0       	rjmp	.+412    	; 0x401e <prvProcessReceivedCommands+0x1b6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3e82:	8e 81       	ldd	r24, Y+6	; 0x06
    3e84:	88 23       	and	r24, r24
    3e86:	0c f4       	brge	.+2      	; 0x3e8a <prvProcessReceivedCommands+0x22>
    3e88:	ca c0       	rjmp	.+404    	; 0x401e <prvProcessReceivedCommands+0x1b6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    3e8a:	89 85       	ldd	r24, Y+9	; 0x09
    3e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e8e:	9a 83       	std	Y+2, r25	; 0x02
    3e90:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
    3e94:	9a 81       	ldd	r25, Y+2	; 0x02
    3e96:	dc 01       	movw	r26, r24
    3e98:	1a 96       	adiw	r26, 0x0a	; 10
    3e9a:	8d 91       	ld	r24, X+
    3e9c:	9c 91       	ld	r25, X
    3e9e:	1b 97       	sbiw	r26, 0x0b	; 11
    3ea0:	89 2b       	or	r24, r25
    3ea2:	29 f0       	breq	.+10     	; 0x3eae <prvProcessReceivedCommands+0x46>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    3ea4:	89 81       	ldd	r24, Y+1	; 0x01
    3ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea8:	02 96       	adiw	r24, 0x02	; 2
    3eaa:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3eae:	ce 01       	movw	r24, r28
    3eb0:	0b 96       	adiw	r24, 0x0b	; 11
    3eb2:	3e df       	rcall	.-388    	; 0x3d30 <prvSampleTimeNow>
    3eb4:	9c 83       	std	Y+4, r25	; 0x04
    3eb6:	8b 83       	std	Y+3, r24	; 0x03

            switch( xMessage.xMessageID )
    3eb8:	8e 81       	ldd	r24, Y+6	; 0x06
    3eba:	08 2e       	mov	r0, r24
    3ebc:	00 0c       	add	r0, r0
    3ebe:	99 0b       	sbc	r25, r25
    3ec0:	09 2e       	mov	r0, r25
    3ec2:	00 0c       	add	r0, r0
    3ec4:	aa 0b       	sbc	r26, r26
    3ec6:	bb 0b       	sbc	r27, r27
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	50 e0       	ldi	r21, 0x00	; 0
    3ecc:	29 e0       	ldi	r18, 0x09	; 9
    3ece:	30 e0       	ldi	r19, 0x00	; 0
    3ed0:	84 1b       	sub	r24, r20
    3ed2:	95 0b       	sbc	r25, r21
    3ed4:	28 17       	cp	r18, r24
    3ed6:	39 07       	cpc	r19, r25
    3ed8:	08 f4       	brcc	.+2      	; 0x3edc <prvProcessReceivedCommands+0x74>
    3eda:	a0 c0       	rjmp	.+320    	; 0x401c <prvProcessReceivedCommands+0x1b4>
    3edc:	fc 01       	movw	r30, r24
    3ede:	88 27       	eor	r24, r24
    3ee0:	ee 58       	subi	r30, 0x8E	; 142
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ee6:	0c 94 01 38 	jmp	0x7002	; 0x7002 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3eea:	89 81       	ldd	r24, Y+1	; 0x01
    3eec:	9a 81       	ldd	r25, Y+2	; 0x02
    3eee:	fc 01       	movw	r30, r24
    3ef0:	83 89       	ldd	r24, Z+19	; 0x13
    3ef2:	28 2f       	mov	r18, r24
    3ef4:	21 60       	ori	r18, 0x01	; 1
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    3efa:	dc 01       	movw	r26, r24
    3efc:	53 96       	adiw	r26, 0x13	; 19
    3efe:	2c 93       	st	X, r18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3f00:	ef 81       	ldd	r30, Y+7	; 0x07
    3f02:	f8 85       	ldd	r31, Y+8	; 0x08
    3f04:	2f 81       	ldd	r18, Y+7	; 0x07
    3f06:	38 85       	ldd	r19, Y+8	; 0x08
    3f08:	89 81       	ldd	r24, Y+1	; 0x01
    3f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	1c 96       	adiw	r26, 0x0c	; 12
    3f10:	8d 91       	ld	r24, X+
    3f12:	9c 91       	ld	r25, X
    3f14:	1d 97       	sbiw	r26, 0x0d	; 13
    3f16:	b9 01       	movw	r22, r18
    3f18:	68 0f       	add	r22, r24
    3f1a:	79 1f       	adc	r23, r25
    3f1c:	4b 81       	ldd	r20, Y+3	; 0x03
    3f1e:	5c 81       	ldd	r21, Y+4	; 0x04
    3f20:	89 81       	ldd	r24, Y+1	; 0x01
    3f22:	9a 81       	ldd	r25, Y+2	; 0x02
    3f24:	9f 01       	movw	r18, r30
    3f26:	33 df       	rcall	.-410    	; 0x3d8e <prvInsertTimerInActiveList>
    3f28:	88 23       	and	r24, r24
    3f2a:	09 f4       	brne	.+2      	; 0x3f2e <prvProcessReceivedCommands+0xc6>
    3f2c:	78 c0       	rjmp	.+240    	; 0x401e <prvProcessReceivedCommands+0x1b6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	9a 81       	ldd	r25, Y+2	; 0x02
    3f32:	fc 01       	movw	r30, r24
    3f34:	20 89       	ldd	r18, Z+16	; 0x10
    3f36:	31 89       	ldd	r19, Z+17	; 0x11
    3f38:	89 81       	ldd	r24, Y+1	; 0x01
    3f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3c:	f9 01       	movw	r30, r18
    3f3e:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    3f40:	89 81       	ldd	r24, Y+1	; 0x01
    3f42:	9a 81       	ldd	r25, Y+2	; 0x02
    3f44:	dc 01       	movw	r26, r24
    3f46:	53 96       	adiw	r26, 0x13	; 19
    3f48:	8c 91       	ld	r24, X
    3f4a:	88 2f       	mov	r24, r24
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	84 70       	andi	r24, 0x04	; 4
    3f50:	99 27       	eor	r25, r25
    3f52:	89 2b       	or	r24, r25
    3f54:	09 f4       	brne	.+2      	; 0x3f58 <prvProcessReceivedCommands+0xf0>
    3f56:	63 c0       	rjmp	.+198    	; 0x401e <prvProcessReceivedCommands+0x1b6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    3f58:	2f 81       	ldd	r18, Y+7	; 0x07
    3f5a:	38 85       	ldd	r19, Y+8	; 0x08
    3f5c:	89 81       	ldd	r24, Y+1	; 0x01
    3f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f60:	fc 01       	movw	r30, r24
    3f62:	84 85       	ldd	r24, Z+12	; 0x0c
    3f64:	95 85       	ldd	r25, Z+13	; 0x0d
    3f66:	a9 01       	movw	r20, r18
    3f68:	48 0f       	add	r20, r24
    3f6a:	59 1f       	adc	r21, r25
    3f6c:	89 81       	ldd	r24, Y+1	; 0x01
    3f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f70:	00 e0       	ldi	r16, 0x00	; 0
    3f72:	10 e0       	ldi	r17, 0x00	; 0
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	60 e0       	ldi	r22, 0x00	; 0
    3f7a:	86 dd       	rcall	.-1268   	; 0x3a88 <xTimerGenericCommand>
    3f7c:	8d 83       	std	Y+5, r24	; 0x05
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    3f7e:	4f c0       	rjmp	.+158    	; 0x401e <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3f80:	89 81       	ldd	r24, Y+1	; 0x01
    3f82:	9a 81       	ldd	r25, Y+2	; 0x02
    3f84:	dc 01       	movw	r26, r24
    3f86:	53 96       	adiw	r26, 0x13	; 19
    3f88:	8c 91       	ld	r24, X
    3f8a:	28 2f       	mov	r18, r24
    3f8c:	2e 7f       	andi	r18, 0xFE	; 254
    3f8e:	89 81       	ldd	r24, Y+1	; 0x01
    3f90:	9a 81       	ldd	r25, Y+2	; 0x02
    3f92:	fc 01       	movw	r30, r24
    3f94:	23 8b       	std	Z+19, r18	; 0x13
                    break;
    3f96:	43 c0       	rjmp	.+134    	; 0x401e <prvProcessReceivedCommands+0x1b6>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	53 96       	adiw	r26, 0x13	; 19
    3fa0:	8c 91       	ld	r24, X
    3fa2:	28 2f       	mov	r18, r24
    3fa4:	21 60       	ori	r18, 0x01	; 1
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    3faa:	fc 01       	movw	r30, r24
    3fac:	23 8b       	std	Z+19, r18	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3fae:	2f 81       	ldd	r18, Y+7	; 0x07
    3fb0:	38 85       	ldd	r19, Y+8	; 0x08
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
    3fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	1d 96       	adiw	r26, 0x0d	; 13
    3fba:	3c 93       	st	X, r19
    3fbc:	2e 93       	st	-X, r18
    3fbe:	1c 97       	sbiw	r26, 0x0c	; 12
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fc4:	fc 01       	movw	r30, r24
    3fc6:	24 85       	ldd	r18, Z+12	; 0x0c
    3fc8:	35 85       	ldd	r19, Z+13	; 0x0d
    3fca:	8b 81       	ldd	r24, Y+3	; 0x03
    3fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fce:	b9 01       	movw	r22, r18
    3fd0:	68 0f       	add	r22, r24
    3fd2:	79 1f       	adc	r23, r25
    3fd4:	2b 81       	ldd	r18, Y+3	; 0x03
    3fd6:	3c 81       	ldd	r19, Y+4	; 0x04
    3fd8:	4b 81       	ldd	r20, Y+3	; 0x03
    3fda:	5c 81       	ldd	r21, Y+4	; 0x04
    3fdc:	89 81       	ldd	r24, Y+1	; 0x01
    3fde:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe0:	d6 de       	rcall	.-596    	; 0x3d8e <prvInsertTimerInActiveList>
                    break;
    3fe2:	1d c0       	rjmp	.+58     	; 0x401e <prvProcessReceivedCommands+0x1b6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3fe4:	89 81       	ldd	r24, Y+1	; 0x01
    3fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe8:	dc 01       	movw	r26, r24
    3fea:	53 96       	adiw	r26, 0x13	; 19
    3fec:	8c 91       	ld	r24, X
    3fee:	88 2f       	mov	r24, r24
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	82 70       	andi	r24, 0x02	; 2
    3ff4:	99 27       	eor	r25, r25
    3ff6:	89 2b       	or	r24, r25
    3ff8:	29 f4       	brne	.+10     	; 0x4004 <prvProcessReceivedCommands+0x19c>
                        {
                            vPortFree( pxTimer );
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ffe:	0e 94 ef 01 	call	0x3de	; 0x3de <vPortFree>
    4002:	0d c0       	rjmp	.+26     	; 0x401e <prvProcessReceivedCommands+0x1b6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    4004:	89 81       	ldd	r24, Y+1	; 0x01
    4006:	9a 81       	ldd	r25, Y+2	; 0x02
    4008:	fc 01       	movw	r30, r24
    400a:	83 89       	ldd	r24, Z+19	; 0x13
    400c:	28 2f       	mov	r18, r24
    400e:	2e 7f       	andi	r18, 0xFE	; 254
    4010:	89 81       	ldd	r24, Y+1	; 0x01
    4012:	9a 81       	ldd	r25, Y+2	; 0x02
    4014:	dc 01       	movw	r26, r24
    4016:	53 96       	adiw	r26, 0x13	; 19
    4018:	2c 93       	st	X, r18
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    401a:	01 c0       	rjmp	.+2      	; 0x401e <prvProcessReceivedCommands+0x1b6>

                default    :
                    /* Don't expect to get here. */
                    break;
    401c:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    401e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    4022:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    4026:	9e 01       	movw	r18, r28
    4028:	2a 5f       	subi	r18, 0xFA	; 250
    402a:	3f 4f       	sbci	r19, 0xFF	; 255
    402c:	40 e0       	ldi	r20, 0x00	; 0
    402e:	50 e0       	ldi	r21, 0x00	; 0
    4030:	b9 01       	movw	r22, r18
    4032:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueReceive>
    4036:	88 23       	and	r24, r24
    4038:	09 f0       	breq	.+2      	; 0x403c <prvProcessReceivedCommands+0x1d4>
    403a:	23 cf       	rjmp	.-442    	; 0x3e82 <prvProcessReceivedCommands+0x1a>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    403c:	00 00       	nop
    403e:	2b 96       	adiw	r28, 0x0b	; 11
    4040:	0f b6       	in	r0, 0x3f	; 63
    4042:	f8 94       	cli
    4044:	de bf       	out	0x3e, r29	; 62
    4046:	0f be       	out	0x3f, r0	; 63
    4048:	cd bf       	out	0x3d, r28	; 61
    404a:	df 91       	pop	r29
    404c:	cf 91       	pop	r28
    404e:	1f 91       	pop	r17
    4050:	0f 91       	pop	r16
    4052:	08 95       	ret

00004054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    4054:	0f 93       	push	r16
    4056:	1f 93       	push	r17
    4058:	cf 93       	push	r28
    405a:	df 93       	push	r29
    405c:	cd b7       	in	r28, 0x3d	; 61
    405e:	de b7       	in	r29, 0x3e	; 62
    4060:	29 97       	sbiw	r28, 0x09	; 9
    4062:	0f b6       	in	r0, 0x3f	; 63
    4064:	f8 94       	cli
    4066:	de bf       	out	0x3e, r29	; 62
    4068:	0f be       	out	0x3f, r0	; 63
    406a:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    406c:	68 c0       	rjmp	.+208    	; 0x413e <prvSwitchTimerLists+0xea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    406e:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    4072:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    4076:	fc 01       	movw	r30, r24
    4078:	85 81       	ldd	r24, Z+5	; 0x05
    407a:	96 81       	ldd	r25, Z+6	; 0x06
    407c:	fc 01       	movw	r30, r24
    407e:	80 81       	ld	r24, Z
    4080:	91 81       	ldd	r25, Z+1	; 0x01
    4082:	9a 83       	std	Y+2, r25	; 0x02
    4084:	89 83       	std	Y+1, r24	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    4086:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    408a:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    408e:	fc 01       	movw	r30, r24
    4090:	85 81       	ldd	r24, Z+5	; 0x05
    4092:	96 81       	ldd	r25, Z+6	; 0x06
    4094:	fc 01       	movw	r30, r24
    4096:	86 81       	ldd	r24, Z+6	; 0x06
    4098:	97 81       	ldd	r25, Z+7	; 0x07
    409a:	9c 83       	std	Y+4, r25	; 0x04
    409c:	8b 83       	std	Y+3, r24	; 0x03
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    409e:	8b 81       	ldd	r24, Y+3	; 0x03
    40a0:	9c 81       	ldd	r25, Y+4	; 0x04
    40a2:	02 96       	adiw	r24, 0x02	; 2
    40a4:	0e 94 19 03 	call	0x632	; 0x632 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    40a8:	8b 81       	ldd	r24, Y+3	; 0x03
    40aa:	9c 81       	ldd	r25, Y+4	; 0x04
    40ac:	fc 01       	movw	r30, r24
    40ae:	20 89       	ldd	r18, Z+16	; 0x10
    40b0:	31 89       	ldd	r19, Z+17	; 0x11
    40b2:	8b 81       	ldd	r24, Y+3	; 0x03
    40b4:	9c 81       	ldd	r25, Y+4	; 0x04
    40b6:	f9 01       	movw	r30, r18
    40b8:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    40ba:	8b 81       	ldd	r24, Y+3	; 0x03
    40bc:	9c 81       	ldd	r25, Y+4	; 0x04
    40be:	fc 01       	movw	r30, r24
    40c0:	83 89       	ldd	r24, Z+19	; 0x13
    40c2:	88 2f       	mov	r24, r24
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	84 70       	andi	r24, 0x04	; 4
    40c8:	99 27       	eor	r25, r25
    40ca:	89 2b       	or	r24, r25
    40cc:	c1 f1       	breq	.+112    	; 0x413e <prvSwitchTimerLists+0xea>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    40ce:	8b 81       	ldd	r24, Y+3	; 0x03
    40d0:	9c 81       	ldd	r25, Y+4	; 0x04
    40d2:	fc 01       	movw	r30, r24
    40d4:	24 85       	ldd	r18, Z+12	; 0x0c
    40d6:	35 85       	ldd	r19, Z+13	; 0x0d
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	9a 81       	ldd	r25, Y+2	; 0x02
    40dc:	82 0f       	add	r24, r18
    40de:	93 1f       	adc	r25, r19
    40e0:	9e 83       	std	Y+6, r25	; 0x06
    40e2:	8d 83       	std	Y+5, r24	; 0x05
            if( xReloadTime > xNextExpireTime )
    40e4:	2d 81       	ldd	r18, Y+5	; 0x05
    40e6:	3e 81       	ldd	r19, Y+6	; 0x06
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	9a 81       	ldd	r25, Y+2	; 0x02
    40ec:	82 17       	cp	r24, r18
    40ee:	93 07       	cpc	r25, r19
    40f0:	d8 f4       	brcc	.+54     	; 0x4128 <prvSwitchTimerLists+0xd4>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    40f2:	8b 81       	ldd	r24, Y+3	; 0x03
    40f4:	9c 81       	ldd	r25, Y+4	; 0x04
    40f6:	2d 81       	ldd	r18, Y+5	; 0x05
    40f8:	3e 81       	ldd	r19, Y+6	; 0x06
    40fa:	fc 01       	movw	r30, r24
    40fc:	33 83       	std	Z+3, r19	; 0x03
    40fe:	22 83       	std	Z+2, r18	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    4100:	8b 81       	ldd	r24, Y+3	; 0x03
    4102:	9c 81       	ldd	r25, Y+4	; 0x04
    4104:	2b 81       	ldd	r18, Y+3	; 0x03
    4106:	3c 81       	ldd	r19, Y+4	; 0x04
    4108:	fc 01       	movw	r30, r24
    410a:	31 87       	std	Z+9, r19	; 0x09
    410c:	20 87       	std	Z+8, r18	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	9c 81       	ldd	r25, Y+4	; 0x04
    4112:	9c 01       	movw	r18, r24
    4114:	2e 5f       	subi	r18, 0xFE	; 254
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    411c:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    4120:	b9 01       	movw	r22, r18
    4122:	0e 94 a1 02 	call	0x542	; 0x542 <vListInsert>
    4126:	0b c0       	rjmp	.+22     	; 0x413e <prvSwitchTimerLists+0xea>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    4128:	49 81       	ldd	r20, Y+1	; 0x01
    412a:	5a 81       	ldd	r21, Y+2	; 0x02
    412c:	8b 81       	ldd	r24, Y+3	; 0x03
    412e:	9c 81       	ldd	r25, Y+4	; 0x04
    4130:	00 e0       	ldi	r16, 0x00	; 0
    4132:	10 e0       	ldi	r17, 0x00	; 0
    4134:	20 e0       	ldi	r18, 0x00	; 0
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	a6 dc       	rcall	.-1716   	; 0x3a88 <xTimerGenericCommand>
    413c:	8f 83       	std	Y+7, r24	; 0x07

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    413e:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    4142:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    4146:	fc 01       	movw	r30, r24
    4148:	80 81       	ld	r24, Z
    414a:	88 23       	and	r24, r24
    414c:	09 f0       	breq	.+2      	; 0x4150 <prvSwitchTimerLists+0xfc>
    414e:	8f cf       	rjmp	.-226    	; 0x406e <prvSwitchTimerLists+0x1a>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    4150:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <pxCurrentTimerList>
    4154:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <pxCurrentTimerList+0x1>
    4158:	99 87       	std	Y+9, r25	; 0x09
    415a:	88 87       	std	Y+8, r24	; 0x08
    pxCurrentTimerList = pxOverflowTimerList;
    415c:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <pxOverflowTimerList>
    4160:	90 91 c5 07 	lds	r25, 0x07C5	; 0x8007c5 <pxOverflowTimerList+0x1>
    4164:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <pxCurrentTimerList+0x1>
    4168:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    416c:	88 85       	ldd	r24, Y+8	; 0x08
    416e:	99 85       	ldd	r25, Y+9	; 0x09
    4170:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pxOverflowTimerList+0x1>
    4174:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pxOverflowTimerList>
}
    4178:	00 00       	nop
    417a:	29 96       	adiw	r28, 0x09	; 9
    417c:	0f b6       	in	r0, 0x3f	; 63
    417e:	f8 94       	cli
    4180:	de bf       	out	0x3e, r29	; 62
    4182:	0f be       	out	0x3f, r0	; 63
    4184:	cd bf       	out	0x3d, r28	; 61
    4186:	df 91       	pop	r29
    4188:	cf 91       	pop	r28
    418a:	1f 91       	pop	r17
    418c:	0f 91       	pop	r16
    418e:	08 95       	ret

00004190 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    4198:	0f b6       	in	r0, 0x3f	; 63
    419a:	f8 94       	cli
    419c:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    419e:	80 91 c6 07 	lds	r24, 0x07C6	; 0x8007c6 <xTimerQueue>
    41a2:	90 91 c7 07 	lds	r25, 0x07C7	; 0x8007c7 <xTimerQueue+0x1>
    41a6:	89 2b       	or	r24, r25
    41a8:	e9 f4       	brne	.+58     	; 0x41e4 <prvCheckForValidListAndQueue+0x54>
        {
            vListInitialise( &xActiveTimerList1 );
    41aa:	80 eb       	ldi	r24, 0xB0	; 176
    41ac:	97 e0       	ldi	r25, 0x07	; 7
    41ae:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    41b2:	89 eb       	ldi	r24, 0xB9	; 185
    41b4:	97 e0       	ldi	r25, 0x07	; 7
    41b6:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    41ba:	80 eb       	ldi	r24, 0xB0	; 176
    41bc:	97 e0       	ldi	r25, 0x07	; 7
    41be:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <pxCurrentTimerList+0x1>
    41c2:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    41c6:	89 eb       	ldi	r24, 0xB9	; 185
    41c8:	97 e0       	ldi	r25, 0x07	; 7
    41ca:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <pxOverflowTimerList+0x1>
    41ce:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    41d2:	40 e0       	ldi	r20, 0x00	; 0
    41d4:	65 e0       	ldi	r22, 0x05	; 5
    41d6:	8a e0       	ldi	r24, 0x0A	; 10
    41d8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <xQueueGenericCreate>
    41dc:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <xTimerQueue+0x1>
    41e0:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    41e4:	0f 90       	pop	r0
    41e6:	0f be       	out	0x3f, r0	; 63
}
    41e8:	00 00       	nop
    41ea:	df 91       	pop	r29
    41ec:	cf 91       	pop	r28
    41ee:	08 95       	ret

000041f0 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    41f0:	cf 93       	push	r28
    41f2:	df 93       	push	r29
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
//     if (serialEventRun) serialEventRun();
}
    41f8:	00 00       	nop
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	08 95       	ret

00004200 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    4200:	cf 93       	push	r28
    4202:	df 93       	push	r29
    4204:	cd b7       	in	r28, 0x3d	; 61
    4206:	de b7       	in	r29, 0x3e	; 62
    4208:	2e 97       	sbiw	r28, 0x0e	; 14
    420a:	0f b6       	in	r0, 0x3f	; 63
    420c:	f8 94       	cli
    420e:	de bf       	out	0x3e, r29	; 62
    4210:	0f be       	out	0x3f, r0	; 63
    4212:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4214:	84 e2       	ldi	r24, 0x24	; 36
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	24 e2       	ldi	r18, 0x24	; 36
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	f9 01       	movw	r30, r18
    421e:	20 81       	ld	r18, Z
    4220:	20 68       	ori	r18, 0x80	; 128
    4222:	fc 01       	movw	r30, r24
    4224:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4226:	85 e2       	ldi	r24, 0x25	; 37
    4228:	90 e0       	ldi	r25, 0x00	; 0
    422a:	25 e2       	ldi	r18, 0x25	; 37
    422c:	30 e0       	ldi	r19, 0x00	; 0
    422e:	f9 01       	movw	r30, r18
    4230:	20 81       	ld	r18, Z
    4232:	20 68       	ori	r18, 0x80	; 128
    4234:	fc 01       	movw	r30, r24
    4236:	20 83       	st	Z, r18
    4238:	80 e0       	ldi	r24, 0x00	; 0
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	a8 e4       	ldi	r26, 0x48	; 72
    423e:	b2 e4       	ldi	r27, 0x42	; 66
    4240:	89 83       	std	Y+1, r24	; 0x01
    4242:	9a 83       	std	Y+2, r25	; 0x02
    4244:	ab 83       	std	Y+3, r26	; 0x03
    4246:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4248:	20 e0       	ldi	r18, 0x00	; 0
    424a:	30 e0       	ldi	r19, 0x00	; 0
    424c:	4a e7       	ldi	r20, 0x7A	; 122
    424e:	55 e4       	ldi	r21, 0x45	; 69
    4250:	69 81       	ldd	r22, Y+1	; 0x01
    4252:	7a 81       	ldd	r23, Y+2	; 0x02
    4254:	8b 81       	ldd	r24, Y+3	; 0x03
    4256:	9c 81       	ldd	r25, Y+4	; 0x04
    4258:	0c d5       	rcall	.+2584   	; 0x4c72 <__mulsf3>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	9e 83       	std	Y+6, r25	; 0x06
    4262:	af 83       	std	Y+7, r26	; 0x07
    4264:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	40 e8       	ldi	r20, 0x80	; 128
    426c:	5f e3       	ldi	r21, 0x3F	; 63
    426e:	6d 81       	ldd	r22, Y+5	; 0x05
    4270:	7e 81       	ldd	r23, Y+6	; 0x06
    4272:	8f 81       	ldd	r24, Y+7	; 0x07
    4274:	98 85       	ldd	r25, Y+8	; 0x08
    4276:	7c d4       	rcall	.+2296   	; 0x4b70 <__cmpsf2>
    4278:	88 23       	and	r24, r24
    427a:	2c f4       	brge	.+10     	; 0x4286 <vApplicationMallocFailedHook+0x86>
		__ticks = 1;
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	9a 87       	std	Y+10, r25	; 0x0a
    4282:	89 87       	std	Y+9, r24	; 0x09
    4284:	3b c0       	rjmp	.+118    	; 0x42fc <vApplicationMallocFailedHook+0xfc>
	else if (__tmp > 65535)
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	3f ef       	ldi	r19, 0xFF	; 255
    428a:	4f e7       	ldi	r20, 0x7F	; 127
    428c:	57 e4       	ldi	r21, 0x47	; 71
    428e:	6d 81       	ldd	r22, Y+5	; 0x05
    4290:	7e 81       	ldd	r23, Y+6	; 0x06
    4292:	8f 81       	ldd	r24, Y+7	; 0x07
    4294:	98 85       	ldd	r25, Y+8	; 0x08
    4296:	e9 d4       	rcall	.+2514   	; 0x4c6a <__gesf2>
    4298:	18 16       	cp	r1, r24
    429a:	3c f5       	brge	.+78     	; 0x42ea <vApplicationMallocFailedHook+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    429c:	20 e0       	ldi	r18, 0x00	; 0
    429e:	30 e0       	ldi	r19, 0x00	; 0
    42a0:	40 e2       	ldi	r20, 0x20	; 32
    42a2:	51 e4       	ldi	r21, 0x41	; 65
    42a4:	69 81       	ldd	r22, Y+1	; 0x01
    42a6:	7a 81       	ldd	r23, Y+2	; 0x02
    42a8:	8b 81       	ldd	r24, Y+3	; 0x03
    42aa:	9c 81       	ldd	r25, Y+4	; 0x04
    42ac:	e2 d4       	rcall	.+2500   	; 0x4c72 <__mulsf3>
    42ae:	dc 01       	movw	r26, r24
    42b0:	cb 01       	movw	r24, r22
    42b2:	bc 01       	movw	r22, r24
    42b4:	cd 01       	movw	r24, r26
    42b6:	60 d4       	rcall	.+2240   	; 0x4b78 <__fixunssfsi>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	9a 87       	std	Y+10, r25	; 0x0a
    42be:	89 87       	std	Y+9, r24	; 0x09
    42c0:	0f c0       	rjmp	.+30     	; 0x42e0 <vApplicationMallocFailedHook+0xe0>
    42c2:	80 e9       	ldi	r24, 0x90	; 144
    42c4:	91 e0       	ldi	r25, 0x01	; 1
    42c6:	9c 87       	std	Y+12, r25	; 0x0c
    42c8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    42ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    42cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	f1 f7       	brne	.-4      	; 0x42ce <vApplicationMallocFailedHook+0xce>
    42d2:	9c 87       	std	Y+12, r25	; 0x0c
    42d4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d6:	89 85       	ldd	r24, Y+9	; 0x09
    42d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	9a 87       	std	Y+10, r25	; 0x0a
    42de:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e0:	89 85       	ldd	r24, Y+9	; 0x09
    42e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    42e4:	89 2b       	or	r24, r25
    42e6:	69 f7       	brne	.-38     	; 0x42c2 <vApplicationMallocFailedHook+0xc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42e8:	13 c0       	rjmp	.+38     	; 0x4310 <vApplicationMallocFailedHook+0x110>
    42ea:	6d 81       	ldd	r22, Y+5	; 0x05
    42ec:	7e 81       	ldd	r23, Y+6	; 0x06
    42ee:	8f 81       	ldd	r24, Y+7	; 0x07
    42f0:	98 85       	ldd	r25, Y+8	; 0x08
    42f2:	42 d4       	rcall	.+2180   	; 0x4b78 <__fixunssfsi>
    42f4:	dc 01       	movw	r26, r24
    42f6:	cb 01       	movw	r24, r22
    42f8:	9a 87       	std	Y+10, r25	; 0x0a
    42fa:	89 87       	std	Y+9, r24	; 0x09
    42fc:	89 85       	ldd	r24, Y+9	; 0x09
    42fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    4300:	9e 87       	std	Y+14, r25	; 0x0e
    4302:	8d 87       	std	Y+13, r24	; 0x0d
    4304:	8d 85       	ldd	r24, Y+13	; 0x0d
    4306:	9e 85       	ldd	r25, Y+14	; 0x0e
    4308:	01 97       	sbiw	r24, 0x01	; 1
    430a:	f1 f7       	brne	.-4      	; 0x4308 <vApplicationMallocFailedHook+0x108>
    430c:	9e 87       	std	Y+14, r25	; 0x0e
    430e:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    4310:	83 e2       	ldi	r24, 0x23	; 35
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	23 e2       	ldi	r18, 0x23	; 35
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	f9 01       	movw	r30, r18
    431a:	20 81       	ld	r18, Z
    431c:	20 68       	ori	r18, 0x80	; 128
    431e:	fc 01       	movw	r30, r24
    4320:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED fast blink.

#endif

    }
    4322:	8a cf       	rjmp	.-236    	; 0x4238 <vApplicationMallocFailedHook+0x38>

00004324 <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    4324:	cf 93       	push	r28
    4326:	df 93       	push	r29
    4328:	cd b7       	in	r28, 0x3d	; 61
    432a:	de b7       	in	r29, 0x3e	; 62
    432c:	62 97       	sbiw	r28, 0x12	; 18
    432e:	0f b6       	in	r0, 0x3f	; 63
    4330:	f8 94       	cli
    4332:	de bf       	out	0x3e, r29	; 62
    4334:	0f be       	out	0x3f, r0	; 63
    4336:	cd bf       	out	0x3d, r28	; 61
    4338:	98 8b       	std	Y+16, r25	; 0x10
    433a:	8f 87       	std	Y+15, r24	; 0x0f
    433c:	7a 8b       	std	Y+18, r23	; 0x12
    433e:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    4340:	84 e2       	ldi	r24, 0x24	; 36
    4342:	90 e0       	ldi	r25, 0x00	; 0
    4344:	24 e2       	ldi	r18, 0x24	; 36
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	f9 01       	movw	r30, r18
    434a:	20 81       	ld	r18, Z
    434c:	20 68       	ori	r18, 0x80	; 128
    434e:	fc 01       	movw	r30, r24
    4350:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    4352:	85 e2       	ldi	r24, 0x25	; 37
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	25 e2       	ldi	r18, 0x25	; 37
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	f9 01       	movw	r30, r18
    435c:	20 81       	ld	r18, Z
    435e:	20 68       	ori	r18, 0x80	; 128
    4360:	fc 01       	movw	r30, r24
    4362:	20 83       	st	Z, r18
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	aa ef       	ldi	r26, 0xFA	; 250
    436a:	b4 e4       	ldi	r27, 0x44	; 68
    436c:	89 83       	std	Y+1, r24	; 0x01
    436e:	9a 83       	std	Y+2, r25	; 0x02
    4370:	ab 83       	std	Y+3, r26	; 0x03
    4372:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    4374:	20 e0       	ldi	r18, 0x00	; 0
    4376:	30 e0       	ldi	r19, 0x00	; 0
    4378:	4a e7       	ldi	r20, 0x7A	; 122
    437a:	55 e4       	ldi	r21, 0x45	; 69
    437c:	69 81       	ldd	r22, Y+1	; 0x01
    437e:	7a 81       	ldd	r23, Y+2	; 0x02
    4380:	8b 81       	ldd	r24, Y+3	; 0x03
    4382:	9c 81       	ldd	r25, Y+4	; 0x04
    4384:	76 d4       	rcall	.+2284   	; 0x4c72 <__mulsf3>
    4386:	dc 01       	movw	r26, r24
    4388:	cb 01       	movw	r24, r22
    438a:	8d 83       	std	Y+5, r24	; 0x05
    438c:	9e 83       	std	Y+6, r25	; 0x06
    438e:	af 83       	std	Y+7, r26	; 0x07
    4390:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    4392:	20 e0       	ldi	r18, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	40 e8       	ldi	r20, 0x80	; 128
    4398:	5f e3       	ldi	r21, 0x3F	; 63
    439a:	6d 81       	ldd	r22, Y+5	; 0x05
    439c:	7e 81       	ldd	r23, Y+6	; 0x06
    439e:	8f 81       	ldd	r24, Y+7	; 0x07
    43a0:	98 85       	ldd	r25, Y+8	; 0x08
    43a2:	e6 d3       	rcall	.+1996   	; 0x4b70 <__cmpsf2>
    43a4:	88 23       	and	r24, r24
    43a6:	2c f4       	brge	.+10     	; 0x43b2 <vApplicationStackOverflowHook+0x8e>
		__ticks = 1;
    43a8:	81 e0       	ldi	r24, 0x01	; 1
    43aa:	90 e0       	ldi	r25, 0x00	; 0
    43ac:	9a 87       	std	Y+10, r25	; 0x0a
    43ae:	89 87       	std	Y+9, r24	; 0x09
    43b0:	3b c0       	rjmp	.+118    	; 0x4428 <vApplicationStackOverflowHook+0x104>
	else if (__tmp > 65535)
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	3f ef       	ldi	r19, 0xFF	; 255
    43b6:	4f e7       	ldi	r20, 0x7F	; 127
    43b8:	57 e4       	ldi	r21, 0x47	; 71
    43ba:	6d 81       	ldd	r22, Y+5	; 0x05
    43bc:	7e 81       	ldd	r23, Y+6	; 0x06
    43be:	8f 81       	ldd	r24, Y+7	; 0x07
    43c0:	98 85       	ldd	r25, Y+8	; 0x08
    43c2:	53 d4       	rcall	.+2214   	; 0x4c6a <__gesf2>
    43c4:	18 16       	cp	r1, r24
    43c6:	3c f5       	brge	.+78     	; 0x4416 <vApplicationStackOverflowHook+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	40 e2       	ldi	r20, 0x20	; 32
    43ce:	51 e4       	ldi	r21, 0x41	; 65
    43d0:	69 81       	ldd	r22, Y+1	; 0x01
    43d2:	7a 81       	ldd	r23, Y+2	; 0x02
    43d4:	8b 81       	ldd	r24, Y+3	; 0x03
    43d6:	9c 81       	ldd	r25, Y+4	; 0x04
    43d8:	4c d4       	rcall	.+2200   	; 0x4c72 <__mulsf3>
    43da:	dc 01       	movw	r26, r24
    43dc:	cb 01       	movw	r24, r22
    43de:	bc 01       	movw	r22, r24
    43e0:	cd 01       	movw	r24, r26
    43e2:	ca d3       	rcall	.+1940   	; 0x4b78 <__fixunssfsi>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	9a 87       	std	Y+10, r25	; 0x0a
    43ea:	89 87       	std	Y+9, r24	; 0x09
    43ec:	0f c0       	rjmp	.+30     	; 0x440c <vApplicationStackOverflowHook+0xe8>
    43ee:	80 e9       	ldi	r24, 0x90	; 144
    43f0:	91 e0       	ldi	r25, 0x01	; 1
    43f2:	9c 87       	std	Y+12, r25	; 0x0c
    43f4:	8b 87       	std	Y+11, r24	; 0x0b
    43f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    43f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	f1 f7       	brne	.-4      	; 0x43fa <vApplicationStackOverflowHook+0xd6>
    43fe:	9c 87       	std	Y+12, r25	; 0x0c
    4400:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4402:	89 85       	ldd	r24, Y+9	; 0x09
    4404:	9a 85       	ldd	r25, Y+10	; 0x0a
    4406:	01 97       	sbiw	r24, 0x01	; 1
    4408:	9a 87       	std	Y+10, r25	; 0x0a
    440a:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440c:	89 85       	ldd	r24, Y+9	; 0x09
    440e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4410:	89 2b       	or	r24, r25
    4412:	69 f7       	brne	.-38     	; 0x43ee <vApplicationStackOverflowHook+0xca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4414:	13 c0       	rjmp	.+38     	; 0x443c <vApplicationStackOverflowHook+0x118>
    4416:	6d 81       	ldd	r22, Y+5	; 0x05
    4418:	7e 81       	ldd	r23, Y+6	; 0x06
    441a:	8f 81       	ldd	r24, Y+7	; 0x07
    441c:	98 85       	ldd	r25, Y+8	; 0x08
    441e:	ac d3       	rcall	.+1880   	; 0x4b78 <__fixunssfsi>
    4420:	dc 01       	movw	r26, r24
    4422:	cb 01       	movw	r24, r22
    4424:	9a 87       	std	Y+10, r25	; 0x0a
    4426:	89 87       	std	Y+9, r24	; 0x09
    4428:	89 85       	ldd	r24, Y+9	; 0x09
    442a:	9a 85       	ldd	r25, Y+10	; 0x0a
    442c:	9e 87       	std	Y+14, r25	; 0x0e
    442e:	8d 87       	std	Y+13, r24	; 0x0d
    4430:	8d 85       	ldd	r24, Y+13	; 0x0d
    4432:	9e 85       	ldd	r25, Y+14	; 0x0e
    4434:	01 97       	sbiw	r24, 0x01	; 1
    4436:	f1 f7       	brne	.-4      	; 0x4434 <vApplicationStackOverflowHook+0x110>
    4438:	9e 87       	std	Y+14, r25	; 0x0e
    443a:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    443c:	83 e2       	ldi	r24, 0x23	; 35
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	23 e2       	ldi	r18, 0x23	; 35
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	f9 01       	movw	r30, r18
    4446:	20 81       	ld	r18, Z
    4448:	20 68       	ori	r18, 0x80	; 128
    444a:	fc 01       	movw	r30, r24
    444c:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

    }
    444e:	8a cf       	rjmp	.-236    	; 0x4364 <vApplicationStackOverflowHook+0x40>

00004450 <_lora_setup>:

static char _out_buf[100];

static uint16_t global_co2=0;
static void _lora_setup(void)
{
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	1f 92       	push	r1
    4456:	1f 92       	push	r1
    4458:	cd b7       	in	r28, 0x3d	; 61
    445a:	de b7       	in	r29, 0x3e	; 62
	e_LoRa_return_code_t rc;
	//led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
	
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
    445c:	0e 94 e3 2d 	call	0x5bc6	; 0x5bc6 <lora_driver_rn2483_factory_reset>
    4460:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    4464:	29 2f       	mov	r18, r25
    4466:	2f 93       	push	r18
    4468:	8f 93       	push	r24
    446a:	8e e2       	ldi	r24, 0x2E	; 46
    446c:	92 e0       	ldi	r25, 0x02	; 2
    446e:	89 2f       	mov	r24, r25
    4470:	8f 93       	push	r24
    4472:	8e e2       	ldi	r24, 0x2E	; 46
    4474:	92 e0       	ldi	r25, 0x02	; 2
    4476:	8f 93       	push	r24
    4478:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	0f 90       	pop	r0
    4482:	0f 90       	pop	r0
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
    4484:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <lora_driver_configure_to_eu868>
    4488:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    448c:	29 2f       	mov	r18, r25
    448e:	2f 93       	push	r18
    4490:	8f 93       	push	r24
    4492:	81 e4       	ldi	r24, 0x41	; 65
    4494:	92 e0       	ldi	r25, 0x02	; 2
    4496:	89 2f       	mov	r24, r25
    4498:	8f 93       	push	r24
    449a:	81 e4       	ldi	r24, 0x41	; 65
    449c:	92 e0       	ldi	r25, 0x02	; 2
    449e:	8f 93       	push	r24
    44a0:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    44a4:	0f 90       	pop	r0
    44a6:	0f 90       	pop	r0
    44a8:	0f 90       	pop	r0
    44aa:	0f 90       	pop	r0

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
    44ac:	82 ee       	ldi	r24, 0xE2	; 226
    44ae:	97 e0       	ldi	r25, 0x07	; 7
    44b0:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <lora_driver_get_rn2483_hweui>
    44b4:	8a 83       	std	Y+2, r24	; 0x02
	printf("Get HWEUI >%s<: %s\n",lora_driver_map_return_code_to_text(rc), _out_buf);
    44b6:	8a 81       	ldd	r24, Y+2	; 0x02
    44b8:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    44bc:	9c 01       	movw	r18, r24
    44be:	82 ee       	ldi	r24, 0xE2	; 226
    44c0:	97 e0       	ldi	r25, 0x07	; 7
    44c2:	89 2f       	mov	r24, r25
    44c4:	8f 93       	push	r24
    44c6:	82 ee       	ldi	r24, 0xE2	; 226
    44c8:	97 e0       	ldi	r25, 0x07	; 7
    44ca:	8f 93       	push	r24
    44cc:	83 2f       	mov	r24, r19
    44ce:	8f 93       	push	r24
    44d0:	82 2f       	mov	r24, r18
    44d2:	8f 93       	push	r24
    44d4:	8a e5       	ldi	r24, 0x5A	; 90
    44d6:	92 e0       	ldi	r25, 0x02	; 2
    44d8:	89 2f       	mov	r24, r25
    44da:	8f 93       	push	r24
    44dc:	8a e5       	ldi	r24, 0x5A	; 90
    44de:	92 e0       	ldi	r25, 0x02	; 2
    44e0:	8f 93       	push	r24
    44e2:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    44e6:	0f 90       	pop	r0
    44e8:	0f 90       	pop	r0
    44ea:	0f 90       	pop	r0
    44ec:	0f 90       	pop	r0
    44ee:	0f 90       	pop	r0
    44f0:	0f 90       	pop	r0

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
    44f2:	82 ee       	ldi	r24, 0xE2	; 226
    44f4:	97 e0       	ldi	r25, 0x07	; 7
    44f6:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <lora_driver_set_device_identifier>
    44fa:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    44fe:	29 2f       	mov	r18, r25
    4500:	2f 93       	push	r18
    4502:	8f 93       	push	r24
    4504:	82 ee       	ldi	r24, 0xE2	; 226
    4506:	97 e0       	ldi	r25, 0x07	; 7
    4508:	89 2f       	mov	r24, r25
    450a:	8f 93       	push	r24
    450c:	82 ee       	ldi	r24, 0xE2	; 226
    450e:	97 e0       	ldi	r25, 0x07	; 7
    4510:	8f 93       	push	r24
    4512:	8e e6       	ldi	r24, 0x6E	; 110
    4514:	92 e0       	ldi	r25, 0x02	; 2
    4516:	89 2f       	mov	r24, r25
    4518:	8f 93       	push	r24
    451a:	8e e6       	ldi	r24, 0x6E	; 110
    451c:	92 e0       	ldi	r25, 0x02	; 2
    451e:	8f 93       	push	r24
    4520:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    4524:	0f 90       	pop	r0
    4526:	0f 90       	pop	r0
    4528:	0f 90       	pop	r0
    452a:	0f 90       	pop	r0
    452c:	0f 90       	pop	r0
    452e:	0f 90       	pop	r0

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,_out_buf)));
    4530:	42 ee       	ldi	r20, 0xE2	; 226
    4532:	57 e0       	ldi	r21, 0x07	; 7
    4534:	63 e8       	ldi	r22, 0x83	; 131
    4536:	72 e0       	ldi	r23, 0x02	; 2
    4538:	84 ea       	ldi	r24, 0xA4	; 164
    453a:	92 e0       	ldi	r25, 0x02	; 2
    453c:	0e 94 ee 2f 	call	0x5fdc	; 0x5fdc <lora_driver_set_otaa_identity>
    4540:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    4544:	29 2f       	mov	r18, r25
    4546:	2f 93       	push	r18
    4548:	8f 93       	push	r24
    454a:	82 ee       	ldi	r24, 0xE2	; 226
    454c:	97 e0       	ldi	r25, 0x07	; 7
    454e:	89 2f       	mov	r24, r25
    4550:	8f 93       	push	r24
    4552:	82 ee       	ldi	r24, 0xE2	; 226
    4554:	97 e0       	ldi	r25, 0x07	; 7
    4556:	8f 93       	push	r24
    4558:	83 e8       	ldi	r24, 0x83	; 131
    455a:	92 e0       	ldi	r25, 0x02	; 2
    455c:	89 2f       	mov	r24, r25
    455e:	8f 93       	push	r24
    4560:	83 e8       	ldi	r24, 0x83	; 131
    4562:	92 e0       	ldi	r25, 0x02	; 2
    4564:	8f 93       	push	r24
    4566:	84 ea       	ldi	r24, 0xA4	; 164
    4568:	92 e0       	ldi	r25, 0x02	; 2
    456a:	89 2f       	mov	r24, r25
    456c:	8f 93       	push	r24
    456e:	84 ea       	ldi	r24, 0xA4	; 164
    4570:	92 e0       	ldi	r25, 0x02	; 2
    4572:	8f 93       	push	r24
    4574:	85 eb       	ldi	r24, 0xB5	; 181
    4576:	92 e0       	ldi	r25, 0x02	; 2
    4578:	89 2f       	mov	r24, r25
    457a:	8f 93       	push	r24
    457c:	85 eb       	ldi	r24, 0xB5	; 181
    457e:	92 e0       	ldi	r25, 0x02	; 2
    4580:	8f 93       	push	r24
    4582:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    4586:	8d b7       	in	r24, 0x3d	; 61
    4588:	9e b7       	in	r25, 0x3e	; 62
    458a:	0a 96       	adiw	r24, 0x0a	; 10
    458c:	0f b6       	in	r0, 0x3f	; 63
    458e:	f8 94       	cli
    4590:	de bf       	out	0x3e, r29	; 62
    4592:	0f be       	out	0x3f, r0	; 63
    4594:	cd bf       	out	0x3d, r28	; 61

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_map_return_code_to_text(lora_driver_save_mac()));
    4596:	0e 94 44 2e 	call	0x5c88	; 0x5c88 <lora_driver_save_mac>
    459a:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    459e:	29 2f       	mov	r18, r25
    45a0:	2f 93       	push	r18
    45a2:	8f 93       	push	r24
    45a4:	8b ee       	ldi	r24, 0xEB	; 235
    45a6:	92 e0       	ldi	r25, 0x02	; 2
    45a8:	89 2f       	mov	r24, r25
    45aa:	8f 93       	push	r24
    45ac:	8b ee       	ldi	r24, 0xEB	; 235
    45ae:	92 e0       	ldi	r25, 0x02	; 2
    45b0:	8f 93       	push	r24
    45b2:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    45b6:	0f 90       	pop	r0
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
    45be:	81 e0       	ldi	r24, 0x01	; 1
    45c0:	0e 94 05 2f 	call	0x5e0a	; 0x5e0a <lora_driver_set_adaptive_data_rate>
    45c4:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    45c8:	29 2f       	mov	r18, r25
    45ca:	2f 93       	push	r18
    45cc:	8f 93       	push	r24
    45ce:	8a ef       	ldi	r24, 0xFA	; 250
    45d0:	92 e0       	ldi	r25, 0x02	; 2
    45d2:	89 2f       	mov	r24, r25
    45d4:	8f 93       	push	r24
    45d6:	8a ef       	ldi	r24, 0xFA	; 250
    45d8:	92 e0       	ldi	r25, 0x02	; 2
    45da:	8f 93       	push	r24
    45dc:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    45e0:	0f 90       	pop	r0
    45e2:	0f 90       	pop	r0
    45e4:	0f 90       	pop	r0
    45e6:	0f 90       	pop	r0
	
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
    45e8:	85 e0       	ldi	r24, 0x05	; 5
    45ea:	89 83       	std	Y+1, r24	; 0x01
	do {
		rc = lora_driver_join(LoRa_OTAA);
    45ec:	80 e0       	ldi	r24, 0x00	; 0
    45ee:	0e 94 4a 2e 	call	0x5c94	; 0x5c94 <lora_driver_join>
    45f2:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    45f4:	8a 81       	ldd	r24, Y+2	; 0x02
    45f6:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    45fa:	9c 01       	movw	r18, r24
    45fc:	89 81       	ldd	r24, Y+1	; 0x01
    45fe:	88 2f       	mov	r24, r24
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	43 2f       	mov	r20, r19
    4604:	4f 93       	push	r20
    4606:	2f 93       	push	r18
    4608:	29 2f       	mov	r18, r25
    460a:	2f 93       	push	r18
    460c:	8f 93       	push	r24
    460e:	8b e1       	ldi	r24, 0x1B	; 27
    4610:	93 e0       	ldi	r25, 0x03	; 3
    4612:	89 2f       	mov	r24, r25
    4614:	8f 93       	push	r24
    4616:	8b e1       	ldi	r24, 0x1B	; 27
    4618:	93 e0       	ldi	r25, 0x03	; 3
    461a:	8f 93       	push	r24
    461c:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    4620:	0f 90       	pop	r0
    4622:	0f 90       	pop	r0
    4624:	0f 90       	pop	r0
    4626:	0f 90       	pop	r0
    4628:	0f 90       	pop	r0
    462a:	0f 90       	pop	r0

		if ( rc != LoRa_ACCEPTED)
    462c:	8a 81       	ldd	r24, Y+2	; 0x02
    462e:	88 30       	cpi	r24, 0x08	; 8
    4630:	59 f0       	breq	.+22     	; 0x4648 <_lora_setup+0x1f8>
		{
			// Make the red led pulse to tell something went wrong
			//led_long_puls(led_ST1); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    4632:	8f e2       	ldi	r24, 0x2F	; 47
    4634:	90 e0       	ldi	r25, 0x00	; 0
    4636:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	81 50       	subi	r24, 0x01	; 1
    463e:	89 83       	std	Y+1, r24	; 0x01
    4640:	89 81       	ldd	r24, Y+1	; 0x01
    4642:	88 23       	and	r24, r24
    4644:	99 f6       	brne	.-90     	; 0x45ec <_lora_setup+0x19c>
    4646:	01 c0       	rjmp	.+2      	; 0x464a <_lora_setup+0x1fa>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
    4648:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LoRa_ACCEPTED)
    464a:	8a 81       	ldd	r24, Y+2	; 0x02
    464c:	88 30       	cpi	r24, 0x08	; 8
    464e:	19 f0       	breq	.+6      	; 0x4656 <_lora_setup+0x206>
		//led_fast_blink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    4650:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
		}
    4654:	fd cf       	rjmp	.-6      	; 0x4650 <_lora_setup+0x200>
	}
}
    4656:	00 00       	nop
    4658:	0f 90       	pop	r0
    465a:	0f 90       	pop	r0
    465c:	df 91       	pop	r29
    465e:	cf 91       	pop	r28
    4660:	08 95       	ret

00004662 <create_tasks_and_semaphores>:

void create_tasks_and_semaphores(void)
{
    4662:	ef 92       	push	r14
    4664:	ff 92       	push	r15
    4666:	0f 93       	push	r16
    4668:	cf 93       	push	r28
    466a:	df 93       	push	r29
    466c:	cd b7       	in	r28, 0x3d	; 61
    466e:	de b7       	in	r29, 0x3e	; 62
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	
	
	if ( xPrintfSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    4670:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    4674:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    4678:	89 2b       	or	r24, r25
    467a:	c1 f4       	brne	.+48     	; 0x46ac <create_tasks_and_semaphores+0x4a>
	{
		xPrintfSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	0e 94 a4 07 	call	0xf48	; 0xf48 <xQueueCreateMutex>
    4682:	90 93 a3 09 	sts	0x09A3, r25	; 0x8009a3 <xPrintfSemaphore+0x1>
    4686:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <xPrintfSemaphore>
		if ( ( xPrintfSemaphore ) != NULL )
    468a:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    468e:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    4692:	89 2b       	or	r24, r25
    4694:	59 f0       	breq	.+22     	; 0x46ac <create_tasks_and_semaphores+0x4a>
		{
			xSemaphoreGive( ( xPrintfSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    4696:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    469a:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    469e:	20 e0       	ldi	r18, 0x00	; 0
    46a0:	40 e0       	ldi	r20, 0x00	; 0
    46a2:	50 e0       	ldi	r21, 0x00	; 0
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	70 e0       	ldi	r23, 0x00	; 0
    46a8:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		}
	}
	if ( xCo2Semaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    46ac:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <xCo2Semaphore>
    46b0:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <xCo2Semaphore+0x1>
    46b4:	89 2b       	or	r24, r25
    46b6:	c1 f4       	brne	.+48     	; 0x46e8 <create_tasks_and_semaphores+0x86>
	{
		xCo2Semaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	0e 94 a4 07 	call	0xf48	; 0xf48 <xQueueCreateMutex>
    46be:	90 93 ad 09 	sts	0x09AD, r25	; 0x8009ad <xCo2Semaphore+0x1>
    46c2:	80 93 ac 09 	sts	0x09AC, r24	; 0x8009ac <xCo2Semaphore>
		if ( ( xCo2Semaphore ) != NULL )
    46c6:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <xCo2Semaphore>
    46ca:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <xCo2Semaphore+0x1>
    46ce:	89 2b       	or	r24, r25
    46d0:	59 f0       	breq	.+22     	; 0x46e8 <create_tasks_and_semaphores+0x86>
		{
			xSemaphoreGive( ( xCo2Semaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    46d2:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <xCo2Semaphore>
    46d6:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <xCo2Semaphore+0x1>
    46da:	20 e0       	ldi	r18, 0x00	; 0
    46dc:	40 e0       	ldi	r20, 0x00	; 0
    46de:	50 e0       	ldi	r21, 0x00	; 0
    46e0:	60 e0       	ldi	r22, 0x00	; 0
    46e2:	70 e0       	ldi	r23, 0x00	; 0
    46e4:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		}
	}
			
	//Create queues
	temp_q = xQueueCreate(1, sizeof(uint16_t));	
    46e8:	40 e0       	ldi	r20, 0x00	; 0
    46ea:	62 e0       	ldi	r22, 0x02	; 2
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <xQueueGenericCreate>
    46f2:	90 93 a5 09 	sts	0x09A5, r25	; 0x8009a5 <temp_q+0x1>
    46f6:	80 93 a4 09 	sts	0x09A4, r24	; 0x8009a4 <temp_q>
	hum_q = xQueueCreate(1, sizeof(uint16_t));	
    46fa:	40 e0       	ldi	r20, 0x00	; 0
    46fc:	62 e0       	ldi	r22, 0x02	; 2
    46fe:	81 e0       	ldi	r24, 0x01	; 1
    4700:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <xQueueGenericCreate>
    4704:	90 93 af 09 	sts	0x09AF, r25	; 0x8009af <hum_q+0x1>
    4708:	80 93 ae 09 	sts	0x09AE, r24	; 0x8009ae <hum_q>
	co2_q = xQueueCreate(1, sizeof(uint16_t));
    470c:	40 e0       	ldi	r20, 0x00	; 0
    470e:	62 e0       	ldi	r22, 0x02	; 2
    4710:	81 e0       	ldi	r24, 0x01	; 1
    4712:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <xQueueGenericCreate>
    4716:	90 93 a7 09 	sts	0x09A7, r25	; 0x8009a7 <co2_q+0x1>
    471a:	80 93 a6 09 	sts	0x09A6, r24	; 0x8009a6 <co2_q>
	
	//Create tasks	
	xTaskCreate(
    471e:	0f 2e       	mov	r0, r31
    4720:	fa ea       	ldi	r31, 0xAA	; 170
    4722:	ef 2e       	mov	r14, r31
    4724:	f9 e0       	ldi	r31, 0x09	; 9
    4726:	ff 2e       	mov	r15, r31
    4728:	f0 2d       	mov	r31, r0
    472a:	02 e0       	ldi	r16, 0x02	; 2
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	4c ee       	ldi	r20, 0xEC	; 236
    4732:	51 e0       	ldi	r21, 0x01	; 1
    4734:	6b e3       	ldi	r22, 0x3B	; 59
    4736:	73 e0       	ldi	r23, 0x03	; 3
    4738:	88 eb       	ldi	r24, 0xB8	; 184
    473a:	93 e2       	ldi	r25, 0x23	; 35
    473c:	0e 94 20 11 	call	0x2240	; 0x2240 <xTaskCreate>
	,	configMINIMAL_STACK_SIZE+300 
	,	NULL
	,	2
	,	&temp_hum_co2_task_handle);
	
	xTaskCreate(
    4740:	0f 2e       	mov	r0, r31
    4742:	f8 ea       	ldi	r31, 0xA8	; 168
    4744:	ef 2e       	mov	r14, r31
    4746:	f9 e0       	ldi	r31, 0x09	; 9
    4748:	ff 2e       	mov	r15, r31
    474a:	f0 2d       	mov	r31, r0
    474c:	02 e0       	ldi	r16, 0x02	; 2
    474e:	20 e0       	ldi	r18, 0x00	; 0
    4750:	30 e0       	ldi	r19, 0x00	; 0
    4752:	4c ee       	ldi	r20, 0xEC	; 236
    4754:	51 e0       	ldi	r21, 0x01	; 1
    4756:	66 e5       	ldi	r22, 0x56	; 86
    4758:	73 e0       	ldi	r23, 0x03	; 3
    475a:	8d e4       	ldi	r24, 0x4D	; 77
    475c:	94 e2       	ldi	r25, 0x24	; 36
    475e:	0e 94 20 11 	call	0x2240	; 0x2240 <xTaskCreate>
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  &lora_task_handle);
	
	
}
    4762:	00 00       	nop
    4764:	df 91       	pop	r29
    4766:	cf 91       	pop	r28
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	ef 90       	pop	r14
    476e:	08 95       	ret

00004770 <temp_hum_co2_task>:

void temp_hum_co2_task( void *pvParameters )
{
    4770:	cf 93       	push	r28
    4772:	df 93       	push	r29
    4774:	00 d0       	rcall	.+0      	; 0x4776 <temp_hum_co2_task+0x6>
    4776:	00 d0       	rcall	.+0      	; 0x4778 <temp_hum_co2_task+0x8>
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	9e 83       	std	Y+6, r25	; 0x06
    477e:	8d 83       	std	Y+5, r24	; 0x05
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
    4780:	61 e0       	ldi	r22, 0x01	; 1
    4782:	70 e0       	ldi	r23, 0x00	; 0
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <vTaskSetApplicationTaskTag>
	#endif
		
	uint16_t temperature =0;
    478c:	1a 82       	std	Y+2, r1	; 0x02
    478e:	19 82       	std	Y+1, r1	; 0x01
	uint16_t humidity=0;		
    4790:	1c 82       	std	Y+4, r1	; 0x04
    4792:	1b 82       	std	Y+3, r1	; 0x03
		
	for(;;)
	{		
		
		if (HIH8120_OK != hih8120Wakeup()){
    4794:	5c d7       	rcall	.+3768   	; 0x564e <hih8120Wakeup>
			//printf("wake up failed\n");
		}				
		vTaskDelay(100);		
    4796:	84 e6       	ldi	r24, 0x64	; 100
    4798:	90 e0       	ldi	r25, 0x00	; 0
    479a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskDelay>
		if (HIH8120_OK != hih8120Meassure()){
    479e:	6b d7       	rcall	.+3798   	; 0x5676 <hih8120Meassure>
			//printf("data polling failed\n");
		}			
		vTaskDelay(100);		
    47a0:	84 e6       	ldi	r24, 0x64	; 100
    47a2:	90 e0       	ldi	r25, 0x00	; 0
    47a4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskDelay>
				
		//get measurements
		
		temperature=hih8120GetTemperature_x10();
    47a8:	ac d7       	rcall	.+3928   	; 0x5702 <hih8120GetTemperature_x10>
    47aa:	9a 83       	std	Y+2, r25	; 0x02
		humidity=hih8120GetHumidityPercent_x10();
    47ac:	89 83       	std	Y+1, r24	; 0x01
    47ae:	87 d7       	rcall	.+3854   	; 0x56be <hih8120GetHumidityPercent_x10>
    47b0:	9c 83       	std	Y+4, r25	; 0x04
    47b2:	8b 83       	std	Y+3, r24	; 0x03
		xSemaphoreTake(xPrintfSemaphore,portMAX_DELAY);		
    47b4:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    47b8:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    47bc:	6f ef       	ldi	r22, 0xFF	; 255
    47be:	7f ef       	ldi	r23, 0xFF	; 255
    47c0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <xQueueSemaphoreTake>
		printf("PROD:Temp: %d\n", temperature);
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	9a 81       	ldd	r25, Y+2	; 0x02
    47c8:	29 2f       	mov	r18, r25
    47ca:	2f 93       	push	r18
    47cc:	8f 93       	push	r24
    47ce:	8d e5       	ldi	r24, 0x5D	; 93
    47d0:	93 e0       	ldi	r25, 0x03	; 3
    47d2:	89 2f       	mov	r24, r25
    47d4:	8f 93       	push	r24
    47d6:	8d e5       	ldi	r24, 0x5D	; 93
    47d8:	93 e0       	ldi	r25, 0x03	; 3
    47da:	8f 93       	push	r24
    47dc:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    47e0:	0f 90       	pop	r0
    47e2:	0f 90       	pop	r0
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
		printf("PROD:Hum: %d\n", humidity);		
    47e8:	8b 81       	ldd	r24, Y+3	; 0x03
    47ea:	9c 81       	ldd	r25, Y+4	; 0x04
    47ec:	29 2f       	mov	r18, r25
    47ee:	2f 93       	push	r18
    47f0:	8f 93       	push	r24
    47f2:	8c e6       	ldi	r24, 0x6C	; 108
    47f4:	93 e0       	ldi	r25, 0x03	; 3
    47f6:	89 2f       	mov	r24, r25
    47f8:	8f 93       	push	r24
    47fa:	8c e6       	ldi	r24, 0x6C	; 108
    47fc:	93 e0       	ldi	r25, 0x03	; 3
    47fe:	8f 93       	push	r24
    4800:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    4804:	0f 90       	pop	r0
    4806:	0f 90       	pop	r0
    4808:	0f 90       	pop	r0
    480a:	0f 90       	pop	r0
		xSemaphoreGive(xPrintfSemaphore);		
    480c:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    4810:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	50 e0       	ldi	r21, 0x00	; 0
    481a:	60 e0       	ldi	r22, 0x00	; 0
    481c:	70 e0       	ldi	r23, 0x00	; 0
    481e:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		
		//send humidity and temperature to the queue.		
		xQueueSend(temp_q, //queue handle
    4822:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <temp_q>
    4826:	90 91 a5 09 	lds	r25, 0x09A5	; 0x8009a5 <temp_q+0x1>
    482a:	20 e0       	ldi	r18, 0x00	; 0
    482c:	40 e0       	ldi	r20, 0x00	; 0
    482e:	50 e0       	ldi	r21, 0x00	; 0
    4830:	be 01       	movw	r22, r28
    4832:	6f 5f       	subi	r22, 0xFF	; 255
    4834:	7f 4f       	sbci	r23, 0xFF	; 255
    4836:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		(void*) &temperature,	//pointer to the temp
		0);						
				
		xQueueSend(hum_q,	//queue handle
    483a:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <hum_q>
    483e:	90 91 af 09 	lds	r25, 0x09AF	; 0x8009af <hum_q+0x1>
    4842:	be 01       	movw	r22, r28
    4844:	6d 5f       	subi	r22, 0xFD	; 253
    4846:	7f 4f       	sbci	r23, 0xFF	; 255
    4848:	20 e0       	ldi	r18, 0x00	; 0
    484a:	40 e0       	ldi	r20, 0x00	; 0
    484c:	50 e0       	ldi	r21, 0x00	; 0
    484e:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		(void*) &humidity,	//pointer to the humidity
		0);		
		//get co2 and wait for co2 semaphore
		getCo2();
    4852:	3d d1       	rcall	.+634    	; 0x4ace <getCo2>
		xSemaphoreTake(xCo2Semaphore,portMAX_DELAY);
    4854:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <xCo2Semaphore>
    4858:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <xCo2Semaphore+0x1>
    485c:	6f ef       	ldi	r22, 0xFF	; 255
    485e:	7f ef       	ldi	r23, 0xFF	; 255
    4860:	0e 94 72 09 	call	0x12e4	; 0x12e4 <xQueueSemaphoreTake>
		
		xQueueSend(co2_q,
    4864:	80 91 a6 09 	lds	r24, 0x09A6	; 0x8009a6 <co2_q>
    4868:	90 91 a7 09 	lds	r25, 0x09A7	; 0x8009a7 <co2_q+0x1>
    486c:	20 e0       	ldi	r18, 0x00	; 0
    486e:	40 e0       	ldi	r20, 0x00	; 0
    4870:	50 e0       	ldi	r21, 0x00	; 0
    4872:	66 e4       	ldi	r22, 0x46	; 70
    4874:	78 e0       	ldi	r23, 0x08	; 8
    4876:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		(void*) &global_co2,
		0);
		xSemaphoreGive(xCo2Semaphore);
    487a:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <xCo2Semaphore>
    487e:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <xCo2Semaphore+0x1>
    4882:	20 e0       	ldi	r18, 0x00	; 0
    4884:	40 e0       	ldi	r20, 0x00	; 0
    4886:	50 e0       	ldi	r21, 0x00	; 0
    4888:	60 e0       	ldi	r22, 0x00	; 0
    488a:	70 e0       	ldi	r23, 0x00	; 0
    488c:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		
		vTaskDelay(7000);
    4890:	88 e5       	ldi	r24, 0x58	; 88
    4892:	9b e1       	ldi	r25, 0x1B	; 27
    4894:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskDelay>
		/*xSemaphoreTake(xPrintfSemaphore,portMAX_DELAY);
		UBaseType_t spaces = uxQueueSpacesAvailable(temp_hum_co2_q);
		printf("PROD:Q SP: %d\n", spaces);		
		xSemaphoreGive(xPrintfSemaphore);	*/
		
	}
    4898:	7d cf       	rjmp	.-262    	; 0x4794 <temp_hum_co2_task+0x24>

0000489a <lora_handler_task>:
	
}


void lora_handler_task( void *pvParameters )
{
    489a:	cf 93       	push	r28
    489c:	df 93       	push	r29
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
    48a2:	2b 97       	sbiw	r28, 0x0b	; 11
    48a4:	0f b6       	in	r0, 0x3f	; 63
    48a6:	f8 94       	cli
    48a8:	de bf       	out	0x3e, r29	; 62
    48aa:	0f be       	out	0x3f, r0	; 63
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	9b 87       	std	Y+11, r25	; 0x0b
    48b0:	8a 87       	std	Y+10, r24	; 0x0a
	
	lora_driver_reset_rn2483(1);
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <lora_driver_reset_rn2483>
	vTaskDelay(2);
    48b8:	82 e0       	ldi	r24, 0x02	; 2
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskDelay>
	lora_driver_reset_rn2483(0);
    48c0:	80 e0       	ldi	r24, 0x00	; 0
    48c2:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <lora_driver_reset_rn2483>
	vTaskDelay(150);
    48c6:	86 e9       	ldi	r24, 0x96	; 150
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskDelay>
	
	e_LoRa_return_code_t rc;
		
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    48ce:	0e 94 8c 2d 	call	0x5b18	; 0x5b18 <lora_driver_flush_buffers>
	_lora_setup();
    48d2:	be dd       	rcall	.-1156   	; 0x4450 <_lora_setup>
		
	uint16_t co2_fromQueue=0;
    48d4:	1d 82       	std	Y+5, r1	; 0x05
    48d6:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t temp_fromQueue=0;
    48d8:	1f 82       	std	Y+7, r1	; 0x07
    48da:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t hum_fromQueue=0;
    48dc:	19 86       	std	Y+9, r1	; 0x09
    48de:	18 86       	std	Y+8, r1	; 0x08
			
	for(;;){
				
		BaseType_t em1 =xQueueReceive(temp_q, // queue handle
    48e0:	80 91 a4 09 	lds	r24, 0x09A4	; 0x8009a4 <temp_q>
    48e4:	90 91 a5 09 	lds	r25, 0x09A5	; 0x8009a5 <temp_q+0x1>
    48e8:	9e 01       	movw	r18, r28
    48ea:	2a 5f       	subi	r18, 0xFA	; 250
    48ec:	3f 4f       	sbci	r19, 0xFF	; 255
    48ee:	4f ef       	ldi	r20, 0xFF	; 255
    48f0:	5f ef       	ldi	r21, 0xFF	; 255
    48f2:	b9 01       	movw	r22, r18
    48f4:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueReceive>
    48f8:	89 83       	std	Y+1, r24	; 0x01
									  &temp_fromQueue, // address of temperature placeholder
									  portMAX_DELAY);			  // time out if the queue is empty
											
		BaseType_t em2 =xQueueReceive(hum_q, // queue handle
    48fa:	80 91 ae 09 	lds	r24, 0x09AE	; 0x8009ae <hum_q>
    48fe:	90 91 af 09 	lds	r25, 0x09AF	; 0x8009af <hum_q+0x1>
    4902:	9e 01       	movw	r18, r28
    4904:	28 5f       	subi	r18, 0xF8	; 248
    4906:	3f 4f       	sbci	r19, 0xFF	; 255
    4908:	4f ef       	ldi	r20, 0xFF	; 255
    490a:	5f ef       	ldi	r21, 0xFF	; 255
    490c:	b9 01       	movw	r22, r18
    490e:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueReceive>
    4912:	8a 83       	std	Y+2, r24	; 0x02
									  &hum_fromQueue, // address of humidity placeholder
									  portMAX_DELAY);			  // time out if the queue is empty
		
		BaseType_t em3 =xQueueReceive(co2_q,
    4914:	80 91 a6 09 	lds	r24, 0x09A6	; 0x8009a6 <co2_q>
    4918:	90 91 a7 09 	lds	r25, 0x09A7	; 0x8009a7 <co2_q+0x1>
    491c:	9e 01       	movw	r18, r28
    491e:	2c 5f       	subi	r18, 0xFC	; 252
    4920:	3f 4f       	sbci	r19, 0xFF	; 255
    4922:	4f ef       	ldi	r20, 0xFF	; 255
    4924:	5f ef       	ldi	r21, 0xFF	; 255
    4926:	b9 01       	movw	r22, r18
    4928:	0e 94 c9 08 	call	0x1192	; 0x1192 <xQueueReceive>
    492c:	8b 83       	std	Y+3, r24	; 0x03
									  &co2_fromQueue,
									  portMAX_DELAY);	
		/* PRINTING RESULTS AND AVAILABLE SPACES IN THE QUEUE AFTER RECEIVING */
		xSemaphoreTake(xPrintfSemaphore,portMAX_DELAY);										  
    492e:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    4932:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    4936:	6f ef       	ldi	r22, 0xFF	; 255
    4938:	7f ef       	ldi	r23, 0xFF	; 255
    493a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <xQueueSemaphoreTake>
		printf("READER:TEMPERATURE FR Q: %d\n", temp_fromQueue);									  	
    493e:	8e 81       	ldd	r24, Y+6	; 0x06
    4940:	9f 81       	ldd	r25, Y+7	; 0x07
    4942:	29 2f       	mov	r18, r25
    4944:	2f 93       	push	r18
    4946:	8f 93       	push	r24
    4948:	8a e7       	ldi	r24, 0x7A	; 122
    494a:	93 e0       	ldi	r25, 0x03	; 3
    494c:	89 2f       	mov	r24, r25
    494e:	8f 93       	push	r24
    4950:	8a e7       	ldi	r24, 0x7A	; 122
    4952:	93 e0       	ldi	r25, 0x03	; 3
    4954:	8f 93       	push	r24
    4956:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    495a:	0f 90       	pop	r0
    495c:	0f 90       	pop	r0
    495e:	0f 90       	pop	r0
    4960:	0f 90       	pop	r0
		printf("READER:HUMIDITY FR Q: %d\n", hum_fromQueue);
    4962:	88 85       	ldd	r24, Y+8	; 0x08
    4964:	99 85       	ldd	r25, Y+9	; 0x09
    4966:	29 2f       	mov	r18, r25
    4968:	2f 93       	push	r18
    496a:	8f 93       	push	r24
    496c:	87 e9       	ldi	r24, 0x97	; 151
    496e:	93 e0       	ldi	r25, 0x03	; 3
    4970:	89 2f       	mov	r24, r25
    4972:	8f 93       	push	r24
    4974:	87 e9       	ldi	r24, 0x97	; 151
    4976:	93 e0       	ldi	r25, 0x03	; 3
    4978:	8f 93       	push	r24
    497a:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    497e:	0f 90       	pop	r0
    4980:	0f 90       	pop	r0
    4982:	0f 90       	pop	r0
    4984:	0f 90       	pop	r0
		printf("READER:CO2 FR Q: %d\n", co2_fromQueue);						
    4986:	8c 81       	ldd	r24, Y+4	; 0x04
    4988:	9d 81       	ldd	r25, Y+5	; 0x05
    498a:	29 2f       	mov	r18, r25
    498c:	2f 93       	push	r18
    498e:	8f 93       	push	r24
    4990:	81 eb       	ldi	r24, 0xB1	; 177
    4992:	93 e0       	ldi	r25, 0x03	; 3
    4994:	89 2f       	mov	r24, r25
    4996:	8f 93       	push	r24
    4998:	81 eb       	ldi	r24, 0xB1	; 177
    499a:	93 e0       	ldi	r25, 0x03	; 3
    499c:	8f 93       	push	r24
    499e:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    49a2:	0f 90       	pop	r0
    49a4:	0f 90       	pop	r0
    49a6:	0f 90       	pop	r0
    49a8:	0f 90       	pop	r0
		xSemaphoreGive(xPrintfSemaphore);
    49aa:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    49ae:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	40 e0       	ldi	r20, 0x00	; 0
    49b6:	50 e0       	ldi	r21, 0x00	; 0
    49b8:	60 e0       	ldi	r22, 0x00	; 0
    49ba:	70 e0       	ldi	r23, 0x00	; 0
    49bc:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		
		_uplink_payload.len =6;
    49c0:	86 e0       	ldi	r24, 0x06	; 6
    49c2:	80 93 cd 07 	sts	0x07CD, r24	; 0x8007cd <_uplink_payload+0x1>
		_uplink_payload.port_no =1;
    49c6:	81 e0       	ldi	r24, 0x01	; 1
    49c8:	80 93 cc 07 	sts	0x07CC, r24	; 0x8007cc <_uplink_payload>
		_uplink_payload.bytes[0] = temp_fromQueue >> 8;
    49cc:	8e 81       	ldd	r24, Y+6	; 0x06
    49ce:	9f 81       	ldd	r25, Y+7	; 0x07
    49d0:	89 2f       	mov	r24, r25
    49d2:	99 27       	eor	r25, r25
    49d4:	80 93 ce 07 	sts	0x07CE, r24	; 0x8007ce <_uplink_payload+0x2>
		_uplink_payload.bytes[1] = temp_fromQueue & 0xFF;
    49d8:	8e 81       	ldd	r24, Y+6	; 0x06
    49da:	9f 81       	ldd	r25, Y+7	; 0x07
    49dc:	80 93 cf 07 	sts	0x07CF, r24	; 0x8007cf <_uplink_payload+0x3>
		_uplink_payload.bytes[2] = hum_fromQueue >> 8;
    49e0:	88 85       	ldd	r24, Y+8	; 0x08
    49e2:	99 85       	ldd	r25, Y+9	; 0x09
    49e4:	89 2f       	mov	r24, r25
    49e6:	99 27       	eor	r25, r25
    49e8:	80 93 d0 07 	sts	0x07D0, r24	; 0x8007d0 <_uplink_payload+0x4>
		_uplink_payload.bytes[3] = hum_fromQueue & 0xFF;
    49ec:	88 85       	ldd	r24, Y+8	; 0x08
    49ee:	99 85       	ldd	r25, Y+9	; 0x09
    49f0:	80 93 d1 07 	sts	0x07D1, r24	; 0x8007d1 <_uplink_payload+0x5>
		_uplink_payload.bytes[4] = co2_fromQueue >> 8;
    49f4:	8c 81       	ldd	r24, Y+4	; 0x04
    49f6:	9d 81       	ldd	r25, Y+5	; 0x05
    49f8:	89 2f       	mov	r24, r25
    49fa:	99 27       	eor	r25, r25
    49fc:	80 93 d2 07 	sts	0x07D2, r24	; 0x8007d2 <_uplink_payload+0x6>
		_uplink_payload.bytes[5] = co2_fromQueue & 0xFF;
    4a00:	8c 81       	ldd	r24, Y+4	; 0x04
    4a02:	9d 81       	ldd	r25, Y+5	; 0x05
    4a04:	80 93 d3 07 	sts	0x07D3, r24	; 0x8007d3 <_uplink_payload+0x7>
			
		//send the payload
		xSemaphoreTake(xPrintfSemaphore,portMAX_DELAY);			
    4a08:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    4a0c:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    4a10:	6f ef       	ldi	r22, 0xFF	; 255
    4a12:	7f ef       	ldi	r23, 0xFF	; 255
    4a14:	0e 94 72 09 	call	0x12e4	; 0x12e4 <xQueueSemaphoreTake>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(true, &_uplink_payload)));
    4a18:	6c ec       	ldi	r22, 0xCC	; 204
    4a1a:	77 e0       	ldi	r23, 0x07	; 7
    4a1c:	81 e0       	ldi	r24, 0x01	; 1
    4a1e:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <lora_driver_sent_upload_message>
    4a22:	0e 94 0f 30 	call	0x601e	; 0x601e <lora_driver_map_return_code_to_text>
    4a26:	29 2f       	mov	r18, r25
    4a28:	2f 93       	push	r18
    4a2a:	8f 93       	push	r24
    4a2c:	86 ec       	ldi	r24, 0xC6	; 198
    4a2e:	93 e0       	ldi	r25, 0x03	; 3
    4a30:	89 2f       	mov	r24, r25
    4a32:	8f 93       	push	r24
    4a34:	86 ec       	ldi	r24, 0xC6	; 198
    4a36:	93 e0       	ldi	r25, 0x03	; 3
    4a38:	8f 93       	push	r24
    4a3a:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	0f 90       	pop	r0
    4a44:	0f 90       	pop	r0
		xSemaphoreGive(xPrintfSemaphore);
    4a46:	80 91 a2 09 	lds	r24, 0x09A2	; 0x8009a2 <xPrintfSemaphore>
    4a4a:	90 91 a3 09 	lds	r25, 0x09A3	; 0x8009a3 <xPrintfSemaphore+0x1>
    4a4e:	20 e0       	ldi	r18, 0x00	; 0
    4a50:	40 e0       	ldi	r20, 0x00	; 0
    4a52:	50 e0       	ldi	r21, 0x00	; 0
    4a54:	60 e0       	ldi	r22, 0x00	; 0
    4a56:	70 e0       	ldi	r23, 0x00	; 0
    4a58:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
					
		}	
    4a5c:	41 cf       	rjmp	.-382    	; 0x48e0 <lora_handler_task+0x46>

00004a5e <my_co2_call_back>:
}

void my_co2_call_back(uint16_t ppm){
    4a5e:	cf 93       	push	r28
    4a60:	df 93       	push	r29
    4a62:	1f 92       	push	r1
    4a64:	1f 92       	push	r1
    4a66:	cd b7       	in	r28, 0x3d	; 61
    4a68:	de b7       	in	r29, 0x3e	; 62
    4a6a:	9a 83       	std	Y+2, r25	; 0x02
    4a6c:	89 83       	std	Y+1, r24	; 0x01
		
	printf("CO2 ppm is: %d\n",ppm); //check the value
    4a6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a70:	8f 93       	push	r24
    4a72:	89 81       	ldd	r24, Y+1	; 0x01
    4a74:	8f 93       	push	r24
    4a76:	8b ed       	ldi	r24, 0xDB	; 219
    4a78:	93 e0       	ldi	r25, 0x03	; 3
    4a7a:	89 2f       	mov	r24, r25
    4a7c:	8f 93       	push	r24
    4a7e:	8b ed       	ldi	r24, 0xDB	; 219
    4a80:	93 e0       	ldi	r25, 0x03	; 3
    4a82:	8f 93       	push	r24
    4a84:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	0f 90       	pop	r0
	xSemaphoreTake(xCo2Semaphore,portMAX_DELAY);
    4a90:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <xCo2Semaphore>
    4a94:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <xCo2Semaphore+0x1>
    4a98:	6f ef       	ldi	r22, 0xFF	; 255
    4a9a:	7f ef       	ldi	r23, 0xFF	; 255
    4a9c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <xQueueSemaphoreTake>
	global_co2=ppm;
    4aa0:	89 81       	ldd	r24, Y+1	; 0x01
    4aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa4:	90 93 47 08 	sts	0x0847, r25	; 0x800847 <global_co2+0x1>
    4aa8:	80 93 46 08 	sts	0x0846, r24	; 0x800846 <global_co2>
	xSemaphoreGive(xCo2Semaphore);
    4aac:	80 91 ac 09 	lds	r24, 0x09AC	; 0x8009ac <xCo2Semaphore>
    4ab0:	90 91 ad 09 	lds	r25, 0x09AD	; 0x8009ad <xCo2Semaphore+0x1>
    4ab4:	20 e0       	ldi	r18, 0x00	; 0
    4ab6:	40 e0       	ldi	r20, 0x00	; 0
    4ab8:	50 e0       	ldi	r21, 0x00	; 0
    4aba:	60 e0       	ldi	r22, 0x00	; 0
    4abc:	70 e0       	ldi	r23, 0x00	; 0
    4abe:	0e 94 c2 07 	call	0xf84	; 0xf84 <xQueueGenericSend>
		
}
    4ac2:	00 00       	nop
    4ac4:	0f 90       	pop	r0
    4ac6:	0f 90       	pop	r0
    4ac8:	df 91       	pop	r29
    4aca:	cf 91       	pop	r28
    4acc:	08 95       	ret

00004ace <getCo2>:

void getCo2(){
    4ace:	cf 93       	push	r28
    4ad0:	df 93       	push	r29
    4ad2:	00 d0       	rcall	.+0      	; 0x4ad4 <getCo2+0x6>
    4ad4:	cd b7       	in	r28, 0x3d	; 61
    4ad6:	de b7       	in	r29, 0x3e	; 62
	uint16_t ppm=0;
    4ad8:	1a 82       	std	Y+2, r1	; 0x02
    4ada:	19 82       	std	Y+1, r1	; 0x01
	mh_z19_return_code_t rc;	
	rc = mh_z19_take_meassuring();	 
    4adc:	0e 94 67 31 	call	0x62ce	; 0x62ce <mh_z19_take_meassuring>
    4ae0:	8b 83       	std	Y+3, r24	; 0x03
}
    4ae2:	00 00       	nop
    4ae4:	0f 90       	pop	r0
    4ae6:	0f 90       	pop	r0
    4ae8:	0f 90       	pop	r0
    4aea:	df 91       	pop	r29
    4aec:	cf 91       	pop	r28
    4aee:	08 95       	ret

00004af0 <main>:

int main(void)
{
    4af0:	cf 93       	push	r28
    4af2:	df 93       	push	r29
    4af4:	cd b7       	in	r28, 0x3d	; 61
    4af6:	de b7       	in	r29, 0x3e	; 62
	mh_z19_create(ser_USART3, my_co2_call_back);
    4af8:	6f e2       	ldi	r22, 0x2F	; 47
    4afa:	75 e2       	ldi	r23, 0x25	; 37
    4afc:	83 e0       	ldi	r24, 0x03	; 3
    4afe:	0e 94 38 31 	call	0x6270	; 0x6270 <mh_z19_create>
	stdioCreate(0);
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	5f d1       	rcall	.+702    	; 0x4dc4 <stdioCreate>
	sei();		
	initHIH8210();
    4b06:	78 94       	sei
	initLora();	
    4b08:	09 d0       	rcall	.+18     	; 0x4b1c <initHIH8210>
    4b0a:	26 d0       	rcall	.+76     	; 0x4b58 <initLora>
	puts("Program Started");
    4b0c:	8b ee       	ldi	r24, 0xEB	; 235
    4b0e:	93 e0       	ldi	r25, 0x03	; 3
    4b10:	0e 94 bf 3a 	call	0x757e	; 0x757e <puts>
	
	create_tasks_and_semaphores();				
    4b14:	a6 dd       	rcall	.-1204   	; 0x4662 <create_tasks_and_semaphores>
	vTaskStartScheduler();
    4b16:	0e 94 11 13 	call	0x2622	; 0x2622 <vTaskStartScheduler>
			
	while (1)
	{				
	}
    4b1a:	ff cf       	rjmp	.-2      	; 0x4b1a <main+0x2a>

00004b1c <initHIH8210>:
}

void initHIH8210(void){
    4b1c:	cf 93       	push	r28
    4b1e:	df 93       	push	r29
    4b20:	cd b7       	in	r28, 0x3d	; 61
    4b22:	de b7       	in	r29, 0x3e	; 62
	if (HIH8120_OK == hih8120Create())
    4b24:	7d d5       	rcall	.+2810   	; 0x5620 <hih8120Create>
    4b26:	88 23       	and	r24, r24
    4b28:	99 f4       	brne	.+38     	; 0x4b50 <initHIH8210+0x34>
	{
		//DRIVER CREATED, CHECK OUTPUT
		printf("hih8210Create return code is: %d  We need 0\n", hih8120Create());
    4b2a:	7a d5       	rcall	.+2804   	; 0x5620 <hih8120Create>
    4b2c:	88 2f       	mov	r24, r24
    4b2e:	90 e0       	ldi	r25, 0x00	; 0
    4b30:	29 2f       	mov	r18, r25
    4b32:	2f 93       	push	r18
    4b34:	8f 93       	push	r24
    4b36:	8b ef       	ldi	r24, 0xFB	; 251
    4b38:	93 e0       	ldi	r25, 0x03	; 3
    4b3a:	89 2f       	mov	r24, r25
    4b3c:	8f 93       	push	r24
    4b3e:	8b ef       	ldi	r24, 0xFB	; 251
    4b40:	93 e0       	ldi	r25, 0x03	; 3
    4b42:	8f 93       	push	r24
    4b44:	0e 94 ac 3a 	call	0x7558	; 0x7558 <printf>
    4b48:	0f 90       	pop	r0
    4b4a:	0f 90       	pop	r0
    4b4c:	0f 90       	pop	r0
    4b4e:	0f 90       	pop	r0
    4b50:	00 00       	nop
	}
}
    4b52:	df 91       	pop	r29
    4b54:	cf 91       	pop	r28
    4b56:	08 95       	ret

00004b58 <initLora>:
    4b58:	cf 93       	push	r28

void initLora(void){
    4b5a:	df 93       	push	r29
    4b5c:	cd b7       	in	r28, 0x3d	; 61
    4b5e:	de b7       	in	r29, 0x3e	; 62
	hal_create(LED_TASK_PRIORITY);
    4b60:	87 e0       	ldi	r24, 0x07	; 7
    4b62:	ff d4       	rcall	.+2558   	; 0x5562 <hal_create>
	lora_driver_create(ser_USART1);
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	df d7       	rcall	.+4030   	; 0x5b26 <lora_driver_create>
}
    4b68:	00 00       	nop
    4b6a:	df 91       	pop	r29
    4b6c:	cf 91       	pop	r28
    4b6e:	08 95       	ret

00004b70 <__cmpsf2>:
    4b70:	2f d0       	rcall	.+94     	; 0x4bd0 <__fp_cmp>
    4b72:	08 f4       	brcc	.+2      	; 0x4b76 <__cmpsf2+0x6>
    4b74:	81 e0       	ldi	r24, 0x01	; 1
    4b76:	08 95       	ret

00004b78 <__fixunssfsi>:
    4b78:	57 d0       	rcall	.+174    	; 0x4c28 <__fp_splitA>
    4b7a:	88 f0       	brcs	.+34     	; 0x4b9e <__fixunssfsi+0x26>
    4b7c:	9f 57       	subi	r25, 0x7F	; 127
    4b7e:	90 f0       	brcs	.+36     	; 0x4ba4 <__fixunssfsi+0x2c>
    4b80:	b9 2f       	mov	r27, r25
    4b82:	99 27       	eor	r25, r25
    4b84:	b7 51       	subi	r27, 0x17	; 23
    4b86:	a0 f0       	brcs	.+40     	; 0x4bb0 <__fixunssfsi+0x38>
    4b88:	d1 f0       	breq	.+52     	; 0x4bbe <__fixunssfsi+0x46>
    4b8a:	66 0f       	add	r22, r22
    4b8c:	77 1f       	adc	r23, r23
    4b8e:	88 1f       	adc	r24, r24
    4b90:	99 1f       	adc	r25, r25
    4b92:	1a f0       	brmi	.+6      	; 0x4b9a <__fixunssfsi+0x22>
    4b94:	ba 95       	dec	r27
    4b96:	c9 f7       	brne	.-14     	; 0x4b8a <__fixunssfsi+0x12>
    4b98:	12 c0       	rjmp	.+36     	; 0x4bbe <__fixunssfsi+0x46>
    4b9a:	b1 30       	cpi	r27, 0x01	; 1
    4b9c:	81 f0       	breq	.+32     	; 0x4bbe <__fixunssfsi+0x46>
    4b9e:	5e d0       	rcall	.+188    	; 0x4c5c <__fp_zero>
    4ba0:	b1 e0       	ldi	r27, 0x01	; 1
    4ba2:	08 95       	ret
    4ba4:	5b c0       	rjmp	.+182    	; 0x4c5c <__fp_zero>
    4ba6:	67 2f       	mov	r22, r23
    4ba8:	78 2f       	mov	r23, r24
    4baa:	88 27       	eor	r24, r24
    4bac:	b8 5f       	subi	r27, 0xF8	; 248
    4bae:	39 f0       	breq	.+14     	; 0x4bbe <__fixunssfsi+0x46>
    4bb0:	b9 3f       	cpi	r27, 0xF9	; 249
    4bb2:	cc f3       	brlt	.-14     	; 0x4ba6 <__fixunssfsi+0x2e>
    4bb4:	86 95       	lsr	r24
    4bb6:	77 95       	ror	r23
    4bb8:	67 95       	ror	r22
    4bba:	b3 95       	inc	r27
    4bbc:	d9 f7       	brne	.-10     	; 0x4bb4 <__fixunssfsi+0x3c>
    4bbe:	3e f4       	brtc	.+14     	; 0x4bce <__fixunssfsi+0x56>
    4bc0:	90 95       	com	r25
    4bc2:	80 95       	com	r24
    4bc4:	70 95       	com	r23
    4bc6:	61 95       	neg	r22
    4bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    4bca:	8f 4f       	sbci	r24, 0xFF	; 255
    4bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    4bce:	08 95       	ret

00004bd0 <__fp_cmp>:
    4bd0:	99 0f       	add	r25, r25
    4bd2:	00 08       	sbc	r0, r0
    4bd4:	55 0f       	add	r21, r21
    4bd6:	aa 0b       	sbc	r26, r26
    4bd8:	e0 e8       	ldi	r30, 0x80	; 128
    4bda:	fe ef       	ldi	r31, 0xFE	; 254
    4bdc:	16 16       	cp	r1, r22
    4bde:	17 06       	cpc	r1, r23
    4be0:	e8 07       	cpc	r30, r24
    4be2:	f9 07       	cpc	r31, r25
    4be4:	c0 f0       	brcs	.+48     	; 0x4c16 <__fp_cmp+0x46>
    4be6:	12 16       	cp	r1, r18
    4be8:	13 06       	cpc	r1, r19
    4bea:	e4 07       	cpc	r30, r20
    4bec:	f5 07       	cpc	r31, r21
    4bee:	98 f0       	brcs	.+38     	; 0x4c16 <__fp_cmp+0x46>
    4bf0:	62 1b       	sub	r22, r18
    4bf2:	73 0b       	sbc	r23, r19
    4bf4:	84 0b       	sbc	r24, r20
    4bf6:	95 0b       	sbc	r25, r21
    4bf8:	39 f4       	brne	.+14     	; 0x4c08 <__fp_cmp+0x38>
    4bfa:	0a 26       	eor	r0, r26
    4bfc:	61 f0       	breq	.+24     	; 0x4c16 <__fp_cmp+0x46>
    4bfe:	23 2b       	or	r18, r19
    4c00:	24 2b       	or	r18, r20
    4c02:	25 2b       	or	r18, r21
    4c04:	21 f4       	brne	.+8      	; 0x4c0e <__fp_cmp+0x3e>
    4c06:	08 95       	ret
    4c08:	0a 26       	eor	r0, r26
    4c0a:	09 f4       	brne	.+2      	; 0x4c0e <__fp_cmp+0x3e>
    4c0c:	a1 40       	sbci	r26, 0x01	; 1
    4c0e:	a6 95       	lsr	r26
    4c10:	8f ef       	ldi	r24, 0xFF	; 255
    4c12:	81 1d       	adc	r24, r1
    4c14:	81 1d       	adc	r24, r1
    4c16:	08 95       	ret

00004c18 <__fp_split3>:
    4c18:	57 fd       	sbrc	r21, 7
    4c1a:	90 58       	subi	r25, 0x80	; 128
    4c1c:	44 0f       	add	r20, r20
    4c1e:	55 1f       	adc	r21, r21
    4c20:	59 f0       	breq	.+22     	; 0x4c38 <__fp_splitA+0x10>
    4c22:	5f 3f       	cpi	r21, 0xFF	; 255
    4c24:	71 f0       	breq	.+28     	; 0x4c42 <__fp_splitA+0x1a>
    4c26:	47 95       	ror	r20

00004c28 <__fp_splitA>:
    4c28:	88 0f       	add	r24, r24
    4c2a:	97 fb       	bst	r25, 7
    4c2c:	99 1f       	adc	r25, r25
    4c2e:	61 f0       	breq	.+24     	; 0x4c48 <__fp_splitA+0x20>
    4c30:	9f 3f       	cpi	r25, 0xFF	; 255
    4c32:	79 f0       	breq	.+30     	; 0x4c52 <__fp_splitA+0x2a>
    4c34:	87 95       	ror	r24
    4c36:	08 95       	ret
    4c38:	12 16       	cp	r1, r18
    4c3a:	13 06       	cpc	r1, r19
    4c3c:	14 06       	cpc	r1, r20
    4c3e:	55 1f       	adc	r21, r21
    4c40:	f2 cf       	rjmp	.-28     	; 0x4c26 <__fp_split3+0xe>
    4c42:	46 95       	lsr	r20
    4c44:	f1 df       	rcall	.-30     	; 0x4c28 <__fp_splitA>
    4c46:	08 c0       	rjmp	.+16     	; 0x4c58 <__fp_splitA+0x30>
    4c48:	16 16       	cp	r1, r22
    4c4a:	17 06       	cpc	r1, r23
    4c4c:	18 06       	cpc	r1, r24
    4c4e:	99 1f       	adc	r25, r25
    4c50:	f1 cf       	rjmp	.-30     	; 0x4c34 <__fp_splitA+0xc>
    4c52:	86 95       	lsr	r24
    4c54:	71 05       	cpc	r23, r1
    4c56:	61 05       	cpc	r22, r1
    4c58:	08 94       	sec
    4c5a:	08 95       	ret

00004c5c <__fp_zero>:
    4c5c:	e8 94       	clt

00004c5e <__fp_szero>:
    4c5e:	bb 27       	eor	r27, r27
    4c60:	66 27       	eor	r22, r22
    4c62:	77 27       	eor	r23, r23
    4c64:	cb 01       	movw	r24, r22
    4c66:	97 f9       	bld	r25, 7
    4c68:	08 95       	ret

00004c6a <__gesf2>:
    4c6a:	b2 df       	rcall	.-156    	; 0x4bd0 <__fp_cmp>
    4c6c:	08 f4       	brcc	.+2      	; 0x4c70 <__gesf2+0x6>
    4c6e:	8f ef       	ldi	r24, 0xFF	; 255
    4c70:	08 95       	ret

00004c72 <__mulsf3>:
    4c72:	0b d0       	rcall	.+22     	; 0x4c8a <__mulsf3x>
    4c74:	78 c0       	rjmp	.+240    	; 0x4d66 <__fp_round>
    4c76:	69 d0       	rcall	.+210    	; 0x4d4a <__fp_pscA>
    4c78:	28 f0       	brcs	.+10     	; 0x4c84 <__mulsf3+0x12>
    4c7a:	6e d0       	rcall	.+220    	; 0x4d58 <__fp_pscB>
    4c7c:	18 f0       	brcs	.+6      	; 0x4c84 <__mulsf3+0x12>
    4c7e:	95 23       	and	r25, r21
    4c80:	09 f0       	breq	.+2      	; 0x4c84 <__mulsf3+0x12>
    4c82:	5a c0       	rjmp	.+180    	; 0x4d38 <__fp_inf>
    4c84:	5f c0       	rjmp	.+190    	; 0x4d44 <__fp_nan>
    4c86:	11 24       	eor	r1, r1
    4c88:	ea cf       	rjmp	.-44     	; 0x4c5e <__fp_szero>

00004c8a <__mulsf3x>:
    4c8a:	c6 df       	rcall	.-116    	; 0x4c18 <__fp_split3>
    4c8c:	a0 f3       	brcs	.-24     	; 0x4c76 <__mulsf3+0x4>

00004c8e <__mulsf3_pse>:
    4c8e:	95 9f       	mul	r25, r21
    4c90:	d1 f3       	breq	.-12     	; 0x4c86 <__mulsf3+0x14>
    4c92:	95 0f       	add	r25, r21
    4c94:	50 e0       	ldi	r21, 0x00	; 0
    4c96:	55 1f       	adc	r21, r21
    4c98:	62 9f       	mul	r22, r18
    4c9a:	f0 01       	movw	r30, r0
    4c9c:	72 9f       	mul	r23, r18
    4c9e:	bb 27       	eor	r27, r27
    4ca0:	f0 0d       	add	r31, r0
    4ca2:	b1 1d       	adc	r27, r1
    4ca4:	63 9f       	mul	r22, r19
    4ca6:	aa 27       	eor	r26, r26
    4ca8:	f0 0d       	add	r31, r0
    4caa:	b1 1d       	adc	r27, r1
    4cac:	aa 1f       	adc	r26, r26
    4cae:	64 9f       	mul	r22, r20
    4cb0:	66 27       	eor	r22, r22
    4cb2:	b0 0d       	add	r27, r0
    4cb4:	a1 1d       	adc	r26, r1
    4cb6:	66 1f       	adc	r22, r22
    4cb8:	82 9f       	mul	r24, r18
    4cba:	22 27       	eor	r18, r18
    4cbc:	b0 0d       	add	r27, r0
    4cbe:	a1 1d       	adc	r26, r1
    4cc0:	62 1f       	adc	r22, r18
    4cc2:	73 9f       	mul	r23, r19
    4cc4:	b0 0d       	add	r27, r0
    4cc6:	a1 1d       	adc	r26, r1
    4cc8:	62 1f       	adc	r22, r18
    4cca:	83 9f       	mul	r24, r19
    4ccc:	a0 0d       	add	r26, r0
    4cce:	61 1d       	adc	r22, r1
    4cd0:	22 1f       	adc	r18, r18
    4cd2:	74 9f       	mul	r23, r20
    4cd4:	33 27       	eor	r19, r19
    4cd6:	a0 0d       	add	r26, r0
    4cd8:	61 1d       	adc	r22, r1
    4cda:	23 1f       	adc	r18, r19
    4cdc:	84 9f       	mul	r24, r20
    4cde:	60 0d       	add	r22, r0
    4ce0:	21 1d       	adc	r18, r1
    4ce2:	82 2f       	mov	r24, r18
    4ce4:	76 2f       	mov	r23, r22
    4ce6:	6a 2f       	mov	r22, r26
    4ce8:	11 24       	eor	r1, r1
    4cea:	9f 57       	subi	r25, 0x7F	; 127
    4cec:	50 40       	sbci	r21, 0x00	; 0
    4cee:	8a f0       	brmi	.+34     	; 0x4d12 <__mulsf3_pse+0x84>
    4cf0:	e1 f0       	breq	.+56     	; 0x4d2a <__mulsf3_pse+0x9c>
    4cf2:	88 23       	and	r24, r24
    4cf4:	4a f0       	brmi	.+18     	; 0x4d08 <__mulsf3_pse+0x7a>
    4cf6:	ee 0f       	add	r30, r30
    4cf8:	ff 1f       	adc	r31, r31
    4cfa:	bb 1f       	adc	r27, r27
    4cfc:	66 1f       	adc	r22, r22
    4cfe:	77 1f       	adc	r23, r23
    4d00:	88 1f       	adc	r24, r24
    4d02:	91 50       	subi	r25, 0x01	; 1
    4d04:	50 40       	sbci	r21, 0x00	; 0
    4d06:	a9 f7       	brne	.-22     	; 0x4cf2 <__mulsf3_pse+0x64>
    4d08:	9e 3f       	cpi	r25, 0xFE	; 254
    4d0a:	51 05       	cpc	r21, r1
    4d0c:	70 f0       	brcs	.+28     	; 0x4d2a <__mulsf3_pse+0x9c>
    4d0e:	14 c0       	rjmp	.+40     	; 0x4d38 <__fp_inf>
    4d10:	a6 cf       	rjmp	.-180    	; 0x4c5e <__fp_szero>
    4d12:	5f 3f       	cpi	r21, 0xFF	; 255
    4d14:	ec f3       	brlt	.-6      	; 0x4d10 <__mulsf3_pse+0x82>
    4d16:	98 3e       	cpi	r25, 0xE8	; 232
    4d18:	dc f3       	brlt	.-10     	; 0x4d10 <__mulsf3_pse+0x82>
    4d1a:	86 95       	lsr	r24
    4d1c:	77 95       	ror	r23
    4d1e:	67 95       	ror	r22
    4d20:	b7 95       	ror	r27
    4d22:	f7 95       	ror	r31
    4d24:	e7 95       	ror	r30
    4d26:	9f 5f       	subi	r25, 0xFF	; 255
    4d28:	c1 f7       	brne	.-16     	; 0x4d1a <__mulsf3_pse+0x8c>
    4d2a:	fe 2b       	or	r31, r30
    4d2c:	88 0f       	add	r24, r24
    4d2e:	91 1d       	adc	r25, r1
    4d30:	96 95       	lsr	r25
    4d32:	87 95       	ror	r24
    4d34:	97 f9       	bld	r25, 7
    4d36:	08 95       	ret

00004d38 <__fp_inf>:
    4d38:	97 f9       	bld	r25, 7
    4d3a:	9f 67       	ori	r25, 0x7F	; 127
    4d3c:	80 e8       	ldi	r24, 0x80	; 128
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	60 e0       	ldi	r22, 0x00	; 0
    4d42:	08 95       	ret

00004d44 <__fp_nan>:
    4d44:	9f ef       	ldi	r25, 0xFF	; 255
    4d46:	80 ec       	ldi	r24, 0xC0	; 192
    4d48:	08 95       	ret

00004d4a <__fp_pscA>:
    4d4a:	00 24       	eor	r0, r0
    4d4c:	0a 94       	dec	r0
    4d4e:	16 16       	cp	r1, r22
    4d50:	17 06       	cpc	r1, r23
    4d52:	18 06       	cpc	r1, r24
    4d54:	09 06       	cpc	r0, r25
    4d56:	08 95       	ret

00004d58 <__fp_pscB>:
    4d58:	00 24       	eor	r0, r0
    4d5a:	0a 94       	dec	r0
    4d5c:	12 16       	cp	r1, r18
    4d5e:	13 06       	cpc	r1, r19
    4d60:	14 06       	cpc	r1, r20
    4d62:	05 06       	cpc	r0, r21
    4d64:	08 95       	ret

00004d66 <__fp_round>:
    4d66:	09 2e       	mov	r0, r25
    4d68:	03 94       	inc	r0
    4d6a:	00 0c       	add	r0, r0
    4d6c:	11 f4       	brne	.+4      	; 0x4d72 <__fp_round+0xc>
    4d6e:	88 23       	and	r24, r24
    4d70:	52 f0       	brmi	.+20     	; 0x4d86 <__fp_round+0x20>
    4d72:	bb 0f       	add	r27, r27
    4d74:	40 f4       	brcc	.+16     	; 0x4d86 <__fp_round+0x20>
    4d76:	bf 2b       	or	r27, r31
    4d78:	11 f4       	brne	.+4      	; 0x4d7e <__fp_round+0x18>
    4d7a:	60 ff       	sbrs	r22, 0
    4d7c:	04 c0       	rjmp	.+8      	; 0x4d86 <__fp_round+0x20>
    4d7e:	6f 5f       	subi	r22, 0xFF	; 255
    4d80:	7f 4f       	sbci	r23, 0xFF	; 255
    4d82:	8f 4f       	sbci	r24, 0xFF	; 255
    4d84:	9f 4f       	sbci	r25, 0xFF	; 255
    4d86:	08 95       	ret

00004d88 <usart_getchar>:
    4d88:	cf 93       	push	r28
    4d8a:	df 93       	push	r29
    4d8c:	1f 92       	push	r1
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
    4d92:	be 01       	movw	r22, r28
    4d94:	6f 5f       	subi	r22, 0xFF	; 255
    4d96:	7f 4f       	sbci	r23, 0xFF	; 255
    4d98:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_com_serial_instance>
    4d9c:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <_com_serial_instance+0x1>
    4da0:	4d d1       	rcall	.+666    	; 0x503c <serial_get_byte>
    4da2:	81 11       	cpse	r24, r1
    4da4:	f6 cf       	rjmp	.-20     	; 0x4d92 <usart_getchar+0xa>
    4da6:	89 81       	ldd	r24, Y+1	; 0x01
    4da8:	90 e0       	ldi	r25, 0x00	; 0
    4daa:	0f 90       	pop	r0
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	08 95       	ret

00004db2 <usart_putchar>:
    4db2:	68 2f       	mov	r22, r24
    4db4:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_com_serial_instance>
    4db8:	90 91 49 08 	lds	r25, 0x0849	; 0x800849 <_com_serial_instance+0x1>
    4dbc:	ca d0       	rcall	.+404    	; 0x4f52 <serial_send_byte>
    4dbe:	80 e0       	ldi	r24, 0x00	; 0
    4dc0:	90 e0       	ldi	r25, 0x00	; 0
    4dc2:	08 95       	ret

00004dc4 <stdioCreate>:
    4dc4:	8f 92       	push	r8
    4dc6:	9f 92       	push	r9
    4dc8:	af 92       	push	r10
    4dca:	cf 92       	push	r12
    4dcc:	ef 92       	push	r14
    4dce:	0f 93       	push	r16
    4dd0:	81 2c       	mov	r8, r1
    4dd2:	91 2c       	mov	r9, r1
    4dd4:	68 94       	set
    4dd6:	aa 24       	eor	r10, r10
    4dd8:	a7 f8       	bld	r10, 7
    4dda:	68 94       	set
    4ddc:	cc 24       	eor	r12, r12
    4dde:	c7 f8       	bld	r12, 7
    4de0:	e1 2c       	mov	r14, r1
    4de2:	00 e0       	ldi	r16, 0x00	; 0
    4de4:	23 e0       	ldi	r18, 0x03	; 3
    4de6:	40 e0       	ldi	r20, 0x00	; 0
    4de8:	51 ee       	ldi	r21, 0xE1	; 225
    4dea:	60 e0       	ldi	r22, 0x00	; 0
    4dec:	70 e0       	ldi	r23, 0x00	; 0
    4dee:	13 d0       	rcall	.+38     	; 0x4e16 <serial_new_instance>
    4df0:	90 93 49 08 	sts	0x0849, r25	; 0x800849 <_com_serial_instance+0x1>
    4df4:	80 93 48 08 	sts	0x0848, r24	; 0x800848 <_com_serial_instance>
    4df8:	ea ec       	ldi	r30, 0xCA	; 202
    4dfa:	f9 e0       	ldi	r31, 0x09	; 9
    4dfc:	86 e0       	ldi	r24, 0x06	; 6
    4dfe:	92 e0       	ldi	r25, 0x02	; 2
    4e00:	91 83       	std	Z+1, r25	; 0x01
    4e02:	80 83       	st	Z, r24
    4e04:	93 83       	std	Z+3, r25	; 0x03
    4e06:	82 83       	std	Z+2, r24	; 0x02
    4e08:	0f 91       	pop	r16
    4e0a:	ef 90       	pop	r14
    4e0c:	cf 90       	pop	r12
    4e0e:	af 90       	pop	r10
    4e10:	9f 90       	pop	r9
    4e12:	8f 90       	pop	r8
    4e14:	08 95       	ret

00004e16 <serial_new_instance>:
    4e16:	2f 92       	push	r2
    4e18:	3f 92       	push	r3
    4e1a:	4f 92       	push	r4
    4e1c:	5f 92       	push	r5
    4e1e:	6f 92       	push	r6
    4e20:	7f 92       	push	r7
    4e22:	8f 92       	push	r8
    4e24:	9f 92       	push	r9
    4e26:	af 92       	push	r10
    4e28:	cf 92       	push	r12
    4e2a:	ef 92       	push	r14
    4e2c:	ff 92       	push	r15
    4e2e:	0f 93       	push	r16
    4e30:	1f 93       	push	r17
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	cd b7       	in	r28, 0x3d	; 61
    4e38:	de b7       	in	r29, 0x3e	; 62
    4e3a:	f8 2e       	mov	r15, r24
    4e3c:	2a 01       	movw	r4, r20
    4e3e:	3b 01       	movw	r6, r22
    4e40:	88 e0       	ldi	r24, 0x08	; 8
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	0e 94 23 38 	call	0x7046	; 0x7046 <malloc>
    4e48:	8c 01       	movw	r16, r24
    4e4a:	8f 2d       	mov	r24, r15
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	88 0f       	add	r24, r24
    4e50:	99 1f       	adc	r25, r25
    4e52:	fc 01       	movw	r30, r24
    4e54:	e6 5b       	subi	r30, 0xB6	; 182
    4e56:	f7 4f       	sbci	r31, 0xF7	; 247
    4e58:	11 83       	std	Z+1, r17	; 0x01
    4e5a:	00 83       	st	Z, r16
    4e5c:	fc 01       	movw	r30, r24
    4e5e:	ec 5e       	subi	r30, 0xEC	; 236
    4e60:	fd 4f       	sbci	r31, 0xFD	; 253
    4e62:	80 81       	ld	r24, Z
    4e64:	91 81       	ldd	r25, Z+1	; 0x01
    4e66:	d8 01       	movw	r26, r16
    4e68:	8d 93       	st	X+, r24
    4e6a:	9c 93       	st	X, r25
    4e6c:	6c 2d       	mov	r22, r12
    4e6e:	70 e0       	ldi	r23, 0x00	; 0
    4e70:	84 e0       	ldi	r24, 0x04	; 4
    4e72:	90 e0       	ldi	r25, 0x00	; 0
    4e74:	0e 94 09 38 	call	0x7012	; 0x7012 <calloc>
    4e78:	1c 01       	movw	r2, r24
    4e7a:	61 e0       	ldi	r22, 0x01	; 1
    4e7c:	70 e0       	ldi	r23, 0x00	; 0
    4e7e:	86 e0       	ldi	r24, 0x06	; 6
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	0e 94 09 38 	call	0x7012	; 0x7012 <calloc>
    4e86:	7c 01       	movw	r14, r24
    4e88:	4c 2d       	mov	r20, r12
    4e8a:	b1 01       	movw	r22, r2
    4e8c:	4b d3       	rcall	.+1686   	; 0x5524 <fifo_init>
    4e8e:	f8 01       	movw	r30, r16
    4e90:	f5 82       	std	Z+5, r15	; 0x05
    4e92:	e4 82       	std	Z+4, r14	; 0x04
    4e94:	6a 2d       	mov	r22, r10
    4e96:	70 e0       	ldi	r23, 0x00	; 0
    4e98:	84 e0       	ldi	r24, 0x04	; 4
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	0e 94 09 38 	call	0x7012	; 0x7012 <calloc>
    4ea0:	1c 01       	movw	r2, r24
    4ea2:	61 e0       	ldi	r22, 0x01	; 1
    4ea4:	70 e0       	ldi	r23, 0x00	; 0
    4ea6:	86 e0       	ldi	r24, 0x06	; 6
    4ea8:	90 e0       	ldi	r25, 0x00	; 0
    4eaa:	0e 94 09 38 	call	0x7012	; 0x7012 <calloc>
    4eae:	7c 01       	movw	r14, r24
    4eb0:	4a 2d       	mov	r20, r10
    4eb2:	b1 01       	movw	r22, r2
    4eb4:	37 d3       	rcall	.+1646   	; 0x5524 <fifo_init>
    4eb6:	d8 01       	movw	r26, r16
    4eb8:	13 96       	adiw	r26, 0x03	; 3
    4eba:	fc 92       	st	X, r15
    4ebc:	ee 92       	st	-X, r14
    4ebe:	12 97       	sbiw	r26, 0x02	; 2
    4ec0:	17 96       	adiw	r26, 0x07	; 7
    4ec2:	9c 92       	st	X, r9
    4ec4:	8e 92       	st	-X, r8
    4ec6:	16 97       	sbiw	r26, 0x06	; 6
    4ec8:	ff b6       	in	r15, 0x3f	; 63
    4eca:	f8 94       	cli
    4ecc:	ed 91       	ld	r30, X+
    4ece:	fc 91       	ld	r31, X
    4ed0:	11 97       	sbiw	r26, 0x01	; 1
    4ed2:	36 97       	sbiw	r30, 0x06	; 6
    4ed4:	80 81       	ld	r24, Z
    4ed6:	82 60       	ori	r24, 0x02	; 2
    4ed8:	80 83       	st	Z, r24
    4eda:	8d 90       	ld	r8, X+
    4edc:	9c 90       	ld	r9, X
    4ede:	c3 01       	movw	r24, r6
    4ee0:	b2 01       	movw	r22, r4
    4ee2:	0e 94 19 34 	call	0x6832	; 0x6832 <__floatunsisf>
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	40 e0       	ldi	r20, 0x00	; 0
    4eec:	51 e4       	ldi	r21, 0x41	; 65
    4eee:	c1 de       	rcall	.-638    	; 0x4c72 <__mulsf3>
    4ef0:	9b 01       	movw	r18, r22
    4ef2:	ac 01       	movw	r20, r24
    4ef4:	60 e0       	ldi	r22, 0x00	; 0
    4ef6:	74 e2       	ldi	r23, 0x24	; 36
    4ef8:	84 e7       	ldi	r24, 0x74	; 116
    4efa:	9b e4       	ldi	r25, 0x4B	; 75
    4efc:	0e 94 a1 33 	call	0x6742	; 0x6742 <__divsf3>
    4f00:	20 e0       	ldi	r18, 0x00	; 0
    4f02:	30 e0       	ldi	r19, 0x00	; 0
    4f04:	40 e8       	ldi	r20, 0x80	; 128
    4f06:	5f e3       	ldi	r21, 0x3F	; 63
    4f08:	0e 94 35 33 	call	0x666a	; 0x666a <__subsf3>
    4f0c:	35 de       	rcall	.-918    	; 0x4b78 <__fixunssfsi>
    4f0e:	f4 01       	movw	r30, r8
    4f10:	32 97       	sbiw	r30, 0x02	; 2
    4f12:	60 83       	st	Z, r22
    4f14:	d8 01       	movw	r26, r16
    4f16:	ed 91       	ld	r30, X+
    4f18:	fc 91       	ld	r31, X
    4f1a:	11 97       	sbiw	r26, 0x01	; 1
    4f1c:	35 97       	sbiw	r30, 0x05	; 5
    4f1e:	88 e9       	ldi	r24, 0x98	; 152
    4f20:	80 83       	st	Z, r24
    4f22:	ed 91       	ld	r30, X+
    4f24:	fc 91       	ld	r31, X
    4f26:	34 97       	sbiw	r30, 0x04	; 4
    4f28:	86 e0       	ldi	r24, 0x06	; 6
    4f2a:	80 83       	st	Z, r24
    4f2c:	ff be       	out	0x3f, r15	; 63
    4f2e:	c8 01       	movw	r24, r16
    4f30:	df 91       	pop	r29
    4f32:	cf 91       	pop	r28
    4f34:	1f 91       	pop	r17
    4f36:	0f 91       	pop	r16
    4f38:	ff 90       	pop	r15
    4f3a:	ef 90       	pop	r14
    4f3c:	cf 90       	pop	r12
    4f3e:	af 90       	pop	r10
    4f40:	9f 90       	pop	r9
    4f42:	8f 90       	pop	r8
    4f44:	7f 90       	pop	r7
    4f46:	6f 90       	pop	r6
    4f48:	5f 90       	pop	r5
    4f4a:	4f 90       	pop	r4
    4f4c:	3f 90       	pop	r3
    4f4e:	2f 90       	pop	r2
    4f50:	08 95       	ret

00004f52 <serial_send_byte>:
    4f52:	cf 93       	push	r28
    4f54:	df 93       	push	r29
    4f56:	ec 01       	movw	r28, r24
    4f58:	ea 81       	ldd	r30, Y+2	; 0x02
    4f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    4f5c:	93 81       	ldd	r25, Z+3	; 0x03
    4f5e:	82 81       	ldd	r24, Z+2	; 0x02
    4f60:	25 81       	ldd	r18, Z+5	; 0x05
    4f62:	98 1b       	sub	r25, r24
    4f64:	92 23       	and	r25, r18
    4f66:	84 81       	ldd	r24, Z+4	; 0x04
    4f68:	98 17       	cp	r25, r24
    4f6a:	a1 f0       	breq	.+40     	; 0x4f94 <serial_send_byte+0x42>
    4f6c:	93 81       	ldd	r25, Z+3	; 0x03
    4f6e:	26 95       	lsr	r18
    4f70:	29 23       	and	r18, r25
    4f72:	a0 81       	ld	r26, Z
    4f74:	b1 81       	ldd	r27, Z+1	; 0x01
    4f76:	a2 0f       	add	r26, r18
    4f78:	b1 1d       	adc	r27, r1
    4f7a:	6c 93       	st	X, r22
    4f7c:	9f 5f       	subi	r25, 0xFF	; 255
    4f7e:	25 81       	ldd	r18, Z+5	; 0x05
    4f80:	92 23       	and	r25, r18
    4f82:	93 83       	std	Z+3, r25	; 0x03
    4f84:	e8 81       	ld	r30, Y
    4f86:	f9 81       	ldd	r31, Y+1	; 0x01
    4f88:	35 97       	sbiw	r30, 0x05	; 5
    4f8a:	80 81       	ld	r24, Z
    4f8c:	80 62       	ori	r24, 0x20	; 32
    4f8e:	80 83       	st	Z, r24
    4f90:	80 e0       	ldi	r24, 0x00	; 0
    4f92:	01 c0       	rjmp	.+2      	; 0x4f96 <serial_send_byte+0x44>
    4f94:	82 e0       	ldi	r24, 0x02	; 2
    4f96:	df 91       	pop	r29
    4f98:	cf 91       	pop	r28
    4f9a:	08 95       	ret

00004f9c <serial_send_bytes>:
    4f9c:	ef 92       	push	r14
    4f9e:	ff 92       	push	r15
    4fa0:	0f 93       	push	r16
    4fa2:	1f 93       	push	r17
    4fa4:	cf 93       	push	r28
    4fa6:	df 93       	push	r29
    4fa8:	7c 01       	movw	r14, r24
    4faa:	dc 01       	movw	r26, r24
    4fac:	12 96       	adiw	r26, 0x02	; 2
    4fae:	ed 91       	ld	r30, X+
    4fb0:	fc 91       	ld	r31, X
    4fb2:	13 97       	sbiw	r26, 0x03	; 3
    4fb4:	93 81       	ldd	r25, Z+3	; 0x03
    4fb6:	82 81       	ldd	r24, Z+2	; 0x02
    4fb8:	98 1b       	sub	r25, r24
    4fba:	85 81       	ldd	r24, Z+5	; 0x05
    4fbc:	98 23       	and	r25, r24
    4fbe:	84 81       	ldd	r24, Z+4	; 0x04
    4fc0:	89 1b       	sub	r24, r25
    4fc2:	86 17       	cp	r24, r22
    4fc4:	98 f1       	brcs	.+102    	; 0x502c <serial_send_bytes+0x90>
    4fc6:	66 23       	and	r22, r22
    4fc8:	41 f1       	breq	.+80     	; 0x501a <serial_send_bytes+0x7e>
    4fca:	84 2f       	mov	r24, r20
    4fcc:	95 2f       	mov	r25, r21
    4fce:	dc 01       	movw	r26, r24
    4fd0:	61 50       	subi	r22, 0x01	; 1
    4fd2:	46 2f       	mov	r20, r22
    4fd4:	50 e0       	ldi	r21, 0x00	; 0
    4fd6:	4f 5f       	subi	r20, 0xFF	; 255
    4fd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4fda:	48 0f       	add	r20, r24
    4fdc:	59 1f       	adc	r21, r25
    4fde:	e7 01       	movw	r28, r14
    4fe0:	ea 81       	ldd	r30, Y+2	; 0x02
    4fe2:	fb 81       	ldd	r31, Y+3	; 0x03
    4fe4:	93 81       	ldd	r25, Z+3	; 0x03
    4fe6:	82 81       	ldd	r24, Z+2	; 0x02
    4fe8:	25 81       	ldd	r18, Z+5	; 0x05
    4fea:	98 1b       	sub	r25, r24
    4fec:	92 23       	and	r25, r18
    4fee:	84 81       	ldd	r24, Z+4	; 0x04
    4ff0:	98 17       	cp	r25, r24
    4ff2:	79 f0       	breq	.+30     	; 0x5012 <serial_send_bytes+0x76>
    4ff4:	8c 91       	ld	r24, X
    4ff6:	93 81       	ldd	r25, Z+3	; 0x03
    4ff8:	26 95       	lsr	r18
    4ffa:	29 23       	and	r18, r25
    4ffc:	60 81       	ld	r22, Z
    4ffe:	71 81       	ldd	r23, Z+1	; 0x01
    5000:	8b 01       	movw	r16, r22
    5002:	02 0f       	add	r16, r18
    5004:	11 1d       	adc	r17, r1
    5006:	e8 01       	movw	r28, r16
    5008:	88 83       	st	Y, r24
    500a:	9f 5f       	subi	r25, 0xFF	; 255
    500c:	85 81       	ldd	r24, Z+5	; 0x05
    500e:	98 23       	and	r25, r24
    5010:	93 83       	std	Z+3, r25	; 0x03
    5012:	11 96       	adiw	r26, 0x01	; 1
    5014:	a4 17       	cp	r26, r20
    5016:	b5 07       	cpc	r27, r21
    5018:	11 f7       	brne	.-60     	; 0x4fde <serial_send_bytes+0x42>
    501a:	d7 01       	movw	r26, r14
    501c:	ed 91       	ld	r30, X+
    501e:	fc 91       	ld	r31, X
    5020:	35 97       	sbiw	r30, 0x05	; 5
    5022:	80 81       	ld	r24, Z
    5024:	80 62       	ori	r24, 0x20	; 32
    5026:	80 83       	st	Z, r24
    5028:	80 e0       	ldi	r24, 0x00	; 0
    502a:	01 c0       	rjmp	.+2      	; 0x502e <serial_send_bytes+0x92>
    502c:	82 e0       	ldi	r24, 0x02	; 2
    502e:	df 91       	pop	r29
    5030:	cf 91       	pop	r28
    5032:	1f 91       	pop	r17
    5034:	0f 91       	pop	r16
    5036:	ff 90       	pop	r15
    5038:	ef 90       	pop	r14
    503a:	08 95       	ret

0000503c <serial_get_byte>:
    503c:	dc 01       	movw	r26, r24
    503e:	14 96       	adiw	r26, 0x04	; 4
    5040:	ed 91       	ld	r30, X+
    5042:	fc 91       	ld	r31, X
    5044:	15 97       	sbiw	r26, 0x05	; 5
    5046:	93 81       	ldd	r25, Z+3	; 0x03
    5048:	82 81       	ldd	r24, Z+2	; 0x02
    504a:	98 17       	cp	r25, r24
    504c:	89 f0       	breq	.+34     	; 0x5070 <serial_get_byte+0x34>
    504e:	92 81       	ldd	r25, Z+2	; 0x02
    5050:	85 81       	ldd	r24, Z+5	; 0x05
    5052:	86 95       	lsr	r24
    5054:	89 23       	and	r24, r25
    5056:	a0 81       	ld	r26, Z
    5058:	b1 81       	ldd	r27, Z+1	; 0x01
    505a:	a8 0f       	add	r26, r24
    505c:	b1 1d       	adc	r27, r1
    505e:	8c 91       	ld	r24, X
    5060:	db 01       	movw	r26, r22
    5062:	8c 93       	st	X, r24
    5064:	9f 5f       	subi	r25, 0xFF	; 255
    5066:	85 81       	ldd	r24, Z+5	; 0x05
    5068:	98 23       	and	r25, r24
    506a:	92 83       	std	Z+2, r25	; 0x02
    506c:	80 e0       	ldi	r24, 0x00	; 0
    506e:	08 95       	ret
    5070:	83 e0       	ldi	r24, 0x03	; 3
    5072:	08 95       	ret

00005074 <__vector_25>:
    5074:	1f 92       	push	r1
    5076:	0f 92       	push	r0
    5078:	0f b6       	in	r0, 0x3f	; 63
    507a:	0f 92       	push	r0
    507c:	11 24       	eor	r1, r1
    507e:	0b b6       	in	r0, 0x3b	; 59
    5080:	0f 92       	push	r0
    5082:	2f 93       	push	r18
    5084:	3f 93       	push	r19
    5086:	4f 93       	push	r20
    5088:	5f 93       	push	r21
    508a:	6f 93       	push	r22
    508c:	7f 93       	push	r23
    508e:	8f 93       	push	r24
    5090:	9f 93       	push	r25
    5092:	af 93       	push	r26
    5094:	bf 93       	push	r27
    5096:	cf 93       	push	r28
    5098:	df 93       	push	r29
    509a:	ef 93       	push	r30
    509c:	ff 93       	push	r31
    509e:	a0 91 4a 08 	lds	r26, 0x084A	; 0x80084a <_ser_handle>
    50a2:	b0 91 4b 08 	lds	r27, 0x084B	; 0x80084b <_ser_handle+0x1>
    50a6:	10 97       	sbiw	r26, 0x00	; 0
    50a8:	11 f1       	breq	.+68     	; 0x50ee <__vector_25+0x7a>
    50aa:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    50ae:	14 96       	adiw	r26, 0x04	; 4
    50b0:	ed 91       	ld	r30, X+
    50b2:	fc 91       	ld	r31, X
    50b4:	15 97       	sbiw	r26, 0x05	; 5
    50b6:	93 81       	ldd	r25, Z+3	; 0x03
    50b8:	82 81       	ldd	r24, Z+2	; 0x02
    50ba:	25 81       	ldd	r18, Z+5	; 0x05
    50bc:	98 1b       	sub	r25, r24
    50be:	92 23       	and	r25, r18
    50c0:	84 81       	ldd	r24, Z+4	; 0x04
    50c2:	98 17       	cp	r25, r24
    50c4:	61 f0       	breq	.+24     	; 0x50de <__vector_25+0x6a>
    50c6:	83 81       	ldd	r24, Z+3	; 0x03
    50c8:	26 95       	lsr	r18
    50ca:	28 23       	and	r18, r24
    50cc:	c0 81       	ld	r28, Z
    50ce:	d1 81       	ldd	r29, Z+1	; 0x01
    50d0:	c2 0f       	add	r28, r18
    50d2:	d1 1d       	adc	r29, r1
    50d4:	68 83       	st	Y, r22
    50d6:	8f 5f       	subi	r24, 0xFF	; 255
    50d8:	95 81       	ldd	r25, Z+5	; 0x05
    50da:	89 23       	and	r24, r25
    50dc:	83 83       	std	Z+3, r24	; 0x03
    50de:	16 96       	adiw	r26, 0x06	; 6
    50e0:	ed 91       	ld	r30, X+
    50e2:	fc 91       	ld	r31, X
    50e4:	17 97       	sbiw	r26, 0x07	; 7
    50e6:	30 97       	sbiw	r30, 0x00	; 0
    50e8:	11 f0       	breq	.+4      	; 0x50ee <__vector_25+0x7a>
    50ea:	cd 01       	movw	r24, r26
    50ec:	19 95       	eicall
    50ee:	ff 91       	pop	r31
    50f0:	ef 91       	pop	r30
    50f2:	df 91       	pop	r29
    50f4:	cf 91       	pop	r28
    50f6:	bf 91       	pop	r27
    50f8:	af 91       	pop	r26
    50fa:	9f 91       	pop	r25
    50fc:	8f 91       	pop	r24
    50fe:	7f 91       	pop	r23
    5100:	6f 91       	pop	r22
    5102:	5f 91       	pop	r21
    5104:	4f 91       	pop	r20
    5106:	3f 91       	pop	r19
    5108:	2f 91       	pop	r18
    510a:	0f 90       	pop	r0
    510c:	0b be       	out	0x3b, r0	; 59
    510e:	0f 90       	pop	r0
    5110:	0f be       	out	0x3f, r0	; 63
    5112:	0f 90       	pop	r0
    5114:	1f 90       	pop	r1
    5116:	18 95       	reti

00005118 <__vector_26>:
    5118:	1f 92       	push	r1
    511a:	0f 92       	push	r0
    511c:	0f b6       	in	r0, 0x3f	; 63
    511e:	0f 92       	push	r0
    5120:	11 24       	eor	r1, r1
    5122:	0b b6       	in	r0, 0x3b	; 59
    5124:	0f 92       	push	r0
    5126:	2f 93       	push	r18
    5128:	8f 93       	push	r24
    512a:	9f 93       	push	r25
    512c:	af 93       	push	r26
    512e:	bf 93       	push	r27
    5130:	ef 93       	push	r30
    5132:	ff 93       	push	r31
    5134:	e0 91 4a 08 	lds	r30, 0x084A	; 0x80084a <_ser_handle>
    5138:	f0 91 4b 08 	lds	r31, 0x084B	; 0x80084b <_ser_handle+0x1>
    513c:	30 97       	sbiw	r30, 0x00	; 0
    513e:	b9 f0       	breq	.+46     	; 0x516e <__vector_26+0x56>
    5140:	02 80       	ldd	r0, Z+2	; 0x02
    5142:	f3 81       	ldd	r31, Z+3	; 0x03
    5144:	e0 2d       	mov	r30, r0
    5146:	93 81       	ldd	r25, Z+3	; 0x03
    5148:	82 81       	ldd	r24, Z+2	; 0x02
    514a:	98 17       	cp	r25, r24
    514c:	b1 f0       	breq	.+44     	; 0x517a <__vector_26+0x62>
    514e:	92 81       	ldd	r25, Z+2	; 0x02
    5150:	85 81       	ldd	r24, Z+5	; 0x05
    5152:	28 2f       	mov	r18, r24
    5154:	26 95       	lsr	r18
    5156:	29 23       	and	r18, r25
    5158:	a0 81       	ld	r26, Z
    515a:	b1 81       	ldd	r27, Z+1	; 0x01
    515c:	a2 0f       	add	r26, r18
    515e:	b1 1d       	adc	r27, r1
    5160:	2c 91       	ld	r18, X
    5162:	9f 5f       	subi	r25, 0xFF	; 255
    5164:	89 23       	and	r24, r25
    5166:	82 83       	std	Z+2, r24	; 0x02
    5168:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    516c:	0b c0       	rjmp	.+22     	; 0x5184 <__vector_26+0x6c>
    516e:	e1 ec       	ldi	r30, 0xC1	; 193
    5170:	f0 e0       	ldi	r31, 0x00	; 0
    5172:	80 81       	ld	r24, Z
    5174:	8f 7d       	andi	r24, 0xDF	; 223
    5176:	80 83       	st	Z, r24
    5178:	05 c0       	rjmp	.+10     	; 0x5184 <__vector_26+0x6c>
    517a:	e1 ec       	ldi	r30, 0xC1	; 193
    517c:	f0 e0       	ldi	r31, 0x00	; 0
    517e:	80 81       	ld	r24, Z
    5180:	8f 7d       	andi	r24, 0xDF	; 223
    5182:	80 83       	st	Z, r24
    5184:	ff 91       	pop	r31
    5186:	ef 91       	pop	r30
    5188:	bf 91       	pop	r27
    518a:	af 91       	pop	r26
    518c:	9f 91       	pop	r25
    518e:	8f 91       	pop	r24
    5190:	2f 91       	pop	r18
    5192:	0f 90       	pop	r0
    5194:	0b be       	out	0x3b, r0	; 59
    5196:	0f 90       	pop	r0
    5198:	0f be       	out	0x3f, r0	; 63
    519a:	0f 90       	pop	r0
    519c:	1f 90       	pop	r1
    519e:	18 95       	reti

000051a0 <__vector_36>:
    51a0:	1f 92       	push	r1
    51a2:	0f 92       	push	r0
    51a4:	0f b6       	in	r0, 0x3f	; 63
    51a6:	0f 92       	push	r0
    51a8:	11 24       	eor	r1, r1
    51aa:	0b b6       	in	r0, 0x3b	; 59
    51ac:	0f 92       	push	r0
    51ae:	2f 93       	push	r18
    51b0:	3f 93       	push	r19
    51b2:	4f 93       	push	r20
    51b4:	5f 93       	push	r21
    51b6:	6f 93       	push	r22
    51b8:	7f 93       	push	r23
    51ba:	8f 93       	push	r24
    51bc:	9f 93       	push	r25
    51be:	af 93       	push	r26
    51c0:	bf 93       	push	r27
    51c2:	cf 93       	push	r28
    51c4:	df 93       	push	r29
    51c6:	ef 93       	push	r30
    51c8:	ff 93       	push	r31
    51ca:	a0 91 4c 08 	lds	r26, 0x084C	; 0x80084c <_ser_handle+0x2>
    51ce:	b0 91 4d 08 	lds	r27, 0x084D	; 0x80084d <_ser_handle+0x3>
    51d2:	10 97       	sbiw	r26, 0x00	; 0
    51d4:	11 f1       	breq	.+68     	; 0x521a <__vector_36+0x7a>
    51d6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    51da:	14 96       	adiw	r26, 0x04	; 4
    51dc:	ed 91       	ld	r30, X+
    51de:	fc 91       	ld	r31, X
    51e0:	15 97       	sbiw	r26, 0x05	; 5
    51e2:	93 81       	ldd	r25, Z+3	; 0x03
    51e4:	82 81       	ldd	r24, Z+2	; 0x02
    51e6:	25 81       	ldd	r18, Z+5	; 0x05
    51e8:	98 1b       	sub	r25, r24
    51ea:	92 23       	and	r25, r18
    51ec:	84 81       	ldd	r24, Z+4	; 0x04
    51ee:	98 17       	cp	r25, r24
    51f0:	61 f0       	breq	.+24     	; 0x520a <__vector_36+0x6a>
    51f2:	83 81       	ldd	r24, Z+3	; 0x03
    51f4:	26 95       	lsr	r18
    51f6:	28 23       	and	r18, r24
    51f8:	c0 81       	ld	r28, Z
    51fa:	d1 81       	ldd	r29, Z+1	; 0x01
    51fc:	c2 0f       	add	r28, r18
    51fe:	d1 1d       	adc	r29, r1
    5200:	68 83       	st	Y, r22
    5202:	8f 5f       	subi	r24, 0xFF	; 255
    5204:	95 81       	ldd	r25, Z+5	; 0x05
    5206:	89 23       	and	r24, r25
    5208:	83 83       	std	Z+3, r24	; 0x03
    520a:	16 96       	adiw	r26, 0x06	; 6
    520c:	ed 91       	ld	r30, X+
    520e:	fc 91       	ld	r31, X
    5210:	17 97       	sbiw	r26, 0x07	; 7
    5212:	30 97       	sbiw	r30, 0x00	; 0
    5214:	11 f0       	breq	.+4      	; 0x521a <__vector_36+0x7a>
    5216:	cd 01       	movw	r24, r26
    5218:	19 95       	eicall
    521a:	ff 91       	pop	r31
    521c:	ef 91       	pop	r30
    521e:	df 91       	pop	r29
    5220:	cf 91       	pop	r28
    5222:	bf 91       	pop	r27
    5224:	af 91       	pop	r26
    5226:	9f 91       	pop	r25
    5228:	8f 91       	pop	r24
    522a:	7f 91       	pop	r23
    522c:	6f 91       	pop	r22
    522e:	5f 91       	pop	r21
    5230:	4f 91       	pop	r20
    5232:	3f 91       	pop	r19
    5234:	2f 91       	pop	r18
    5236:	0f 90       	pop	r0
    5238:	0b be       	out	0x3b, r0	; 59
    523a:	0f 90       	pop	r0
    523c:	0f be       	out	0x3f, r0	; 63
    523e:	0f 90       	pop	r0
    5240:	1f 90       	pop	r1
    5242:	18 95       	reti

00005244 <__vector_37>:
    5244:	1f 92       	push	r1
    5246:	0f 92       	push	r0
    5248:	0f b6       	in	r0, 0x3f	; 63
    524a:	0f 92       	push	r0
    524c:	11 24       	eor	r1, r1
    524e:	0b b6       	in	r0, 0x3b	; 59
    5250:	0f 92       	push	r0
    5252:	2f 93       	push	r18
    5254:	8f 93       	push	r24
    5256:	9f 93       	push	r25
    5258:	af 93       	push	r26
    525a:	bf 93       	push	r27
    525c:	ef 93       	push	r30
    525e:	ff 93       	push	r31
    5260:	e0 91 4c 08 	lds	r30, 0x084C	; 0x80084c <_ser_handle+0x2>
    5264:	f0 91 4d 08 	lds	r31, 0x084D	; 0x80084d <_ser_handle+0x3>
    5268:	30 97       	sbiw	r30, 0x00	; 0
    526a:	b9 f0       	breq	.+46     	; 0x529a <__vector_37+0x56>
    526c:	02 80       	ldd	r0, Z+2	; 0x02
    526e:	f3 81       	ldd	r31, Z+3	; 0x03
    5270:	e0 2d       	mov	r30, r0
    5272:	93 81       	ldd	r25, Z+3	; 0x03
    5274:	82 81       	ldd	r24, Z+2	; 0x02
    5276:	98 17       	cp	r25, r24
    5278:	b1 f0       	breq	.+44     	; 0x52a6 <__vector_37+0x62>
    527a:	92 81       	ldd	r25, Z+2	; 0x02
    527c:	85 81       	ldd	r24, Z+5	; 0x05
    527e:	28 2f       	mov	r18, r24
    5280:	26 95       	lsr	r18
    5282:	29 23       	and	r18, r25
    5284:	a0 81       	ld	r26, Z
    5286:	b1 81       	ldd	r27, Z+1	; 0x01
    5288:	a2 0f       	add	r26, r18
    528a:	b1 1d       	adc	r27, r1
    528c:	2c 91       	ld	r18, X
    528e:	9f 5f       	subi	r25, 0xFF	; 255
    5290:	89 23       	and	r24, r25
    5292:	82 83       	std	Z+2, r24	; 0x02
    5294:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5298:	0b c0       	rjmp	.+22     	; 0x52b0 <__vector_37+0x6c>
    529a:	e9 ec       	ldi	r30, 0xC9	; 201
    529c:	f0 e0       	ldi	r31, 0x00	; 0
    529e:	80 81       	ld	r24, Z
    52a0:	8f 7d       	andi	r24, 0xDF	; 223
    52a2:	80 83       	st	Z, r24
    52a4:	05 c0       	rjmp	.+10     	; 0x52b0 <__vector_37+0x6c>
    52a6:	e9 ec       	ldi	r30, 0xC9	; 201
    52a8:	f0 e0       	ldi	r31, 0x00	; 0
    52aa:	80 81       	ld	r24, Z
    52ac:	8f 7d       	andi	r24, 0xDF	; 223
    52ae:	80 83       	st	Z, r24
    52b0:	ff 91       	pop	r31
    52b2:	ef 91       	pop	r30
    52b4:	bf 91       	pop	r27
    52b6:	af 91       	pop	r26
    52b8:	9f 91       	pop	r25
    52ba:	8f 91       	pop	r24
    52bc:	2f 91       	pop	r18
    52be:	0f 90       	pop	r0
    52c0:	0b be       	out	0x3b, r0	; 59
    52c2:	0f 90       	pop	r0
    52c4:	0f be       	out	0x3f, r0	; 63
    52c6:	0f 90       	pop	r0
    52c8:	1f 90       	pop	r1
    52ca:	18 95       	reti

000052cc <__vector_51>:
    52cc:	1f 92       	push	r1
    52ce:	0f 92       	push	r0
    52d0:	0f b6       	in	r0, 0x3f	; 63
    52d2:	0f 92       	push	r0
    52d4:	11 24       	eor	r1, r1
    52d6:	0b b6       	in	r0, 0x3b	; 59
    52d8:	0f 92       	push	r0
    52da:	2f 93       	push	r18
    52dc:	3f 93       	push	r19
    52de:	4f 93       	push	r20
    52e0:	5f 93       	push	r21
    52e2:	6f 93       	push	r22
    52e4:	7f 93       	push	r23
    52e6:	8f 93       	push	r24
    52e8:	9f 93       	push	r25
    52ea:	af 93       	push	r26
    52ec:	bf 93       	push	r27
    52ee:	cf 93       	push	r28
    52f0:	df 93       	push	r29
    52f2:	ef 93       	push	r30
    52f4:	ff 93       	push	r31
    52f6:	a0 91 4e 08 	lds	r26, 0x084E	; 0x80084e <_ser_handle+0x4>
    52fa:	b0 91 4f 08 	lds	r27, 0x084F	; 0x80084f <_ser_handle+0x5>
    52fe:	10 97       	sbiw	r26, 0x00	; 0
    5300:	11 f1       	breq	.+68     	; 0x5346 <__vector_51+0x7a>
    5302:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    5306:	14 96       	adiw	r26, 0x04	; 4
    5308:	ed 91       	ld	r30, X+
    530a:	fc 91       	ld	r31, X
    530c:	15 97       	sbiw	r26, 0x05	; 5
    530e:	93 81       	ldd	r25, Z+3	; 0x03
    5310:	82 81       	ldd	r24, Z+2	; 0x02
    5312:	25 81       	ldd	r18, Z+5	; 0x05
    5314:	98 1b       	sub	r25, r24
    5316:	92 23       	and	r25, r18
    5318:	84 81       	ldd	r24, Z+4	; 0x04
    531a:	98 17       	cp	r25, r24
    531c:	61 f0       	breq	.+24     	; 0x5336 <__vector_51+0x6a>
    531e:	83 81       	ldd	r24, Z+3	; 0x03
    5320:	26 95       	lsr	r18
    5322:	28 23       	and	r18, r24
    5324:	c0 81       	ld	r28, Z
    5326:	d1 81       	ldd	r29, Z+1	; 0x01
    5328:	c2 0f       	add	r28, r18
    532a:	d1 1d       	adc	r29, r1
    532c:	68 83       	st	Y, r22
    532e:	8f 5f       	subi	r24, 0xFF	; 255
    5330:	95 81       	ldd	r25, Z+5	; 0x05
    5332:	89 23       	and	r24, r25
    5334:	83 83       	std	Z+3, r24	; 0x03
    5336:	16 96       	adiw	r26, 0x06	; 6
    5338:	ed 91       	ld	r30, X+
    533a:	fc 91       	ld	r31, X
    533c:	17 97       	sbiw	r26, 0x07	; 7
    533e:	30 97       	sbiw	r30, 0x00	; 0
    5340:	11 f0       	breq	.+4      	; 0x5346 <__vector_51+0x7a>
    5342:	cd 01       	movw	r24, r26
    5344:	19 95       	eicall
    5346:	ff 91       	pop	r31
    5348:	ef 91       	pop	r30
    534a:	df 91       	pop	r29
    534c:	cf 91       	pop	r28
    534e:	bf 91       	pop	r27
    5350:	af 91       	pop	r26
    5352:	9f 91       	pop	r25
    5354:	8f 91       	pop	r24
    5356:	7f 91       	pop	r23
    5358:	6f 91       	pop	r22
    535a:	5f 91       	pop	r21
    535c:	4f 91       	pop	r20
    535e:	3f 91       	pop	r19
    5360:	2f 91       	pop	r18
    5362:	0f 90       	pop	r0
    5364:	0b be       	out	0x3b, r0	; 59
    5366:	0f 90       	pop	r0
    5368:	0f be       	out	0x3f, r0	; 63
    536a:	0f 90       	pop	r0
    536c:	1f 90       	pop	r1
    536e:	18 95       	reti

00005370 <__vector_52>:
    5370:	1f 92       	push	r1
    5372:	0f 92       	push	r0
    5374:	0f b6       	in	r0, 0x3f	; 63
    5376:	0f 92       	push	r0
    5378:	11 24       	eor	r1, r1
    537a:	0b b6       	in	r0, 0x3b	; 59
    537c:	0f 92       	push	r0
    537e:	2f 93       	push	r18
    5380:	8f 93       	push	r24
    5382:	9f 93       	push	r25
    5384:	af 93       	push	r26
    5386:	bf 93       	push	r27
    5388:	ef 93       	push	r30
    538a:	ff 93       	push	r31
    538c:	e0 91 4e 08 	lds	r30, 0x084E	; 0x80084e <_ser_handle+0x4>
    5390:	f0 91 4f 08 	lds	r31, 0x084F	; 0x80084f <_ser_handle+0x5>
    5394:	30 97       	sbiw	r30, 0x00	; 0
    5396:	b9 f0       	breq	.+46     	; 0x53c6 <__vector_52+0x56>
    5398:	02 80       	ldd	r0, Z+2	; 0x02
    539a:	f3 81       	ldd	r31, Z+3	; 0x03
    539c:	e0 2d       	mov	r30, r0
    539e:	93 81       	ldd	r25, Z+3	; 0x03
    53a0:	82 81       	ldd	r24, Z+2	; 0x02
    53a2:	98 17       	cp	r25, r24
    53a4:	b1 f0       	breq	.+44     	; 0x53d2 <__vector_52+0x62>
    53a6:	92 81       	ldd	r25, Z+2	; 0x02
    53a8:	85 81       	ldd	r24, Z+5	; 0x05
    53aa:	28 2f       	mov	r18, r24
    53ac:	26 95       	lsr	r18
    53ae:	29 23       	and	r18, r25
    53b0:	a0 81       	ld	r26, Z
    53b2:	b1 81       	ldd	r27, Z+1	; 0x01
    53b4:	a2 0f       	add	r26, r18
    53b6:	b1 1d       	adc	r27, r1
    53b8:	2c 91       	ld	r18, X
    53ba:	9f 5f       	subi	r25, 0xFF	; 255
    53bc:	89 23       	and	r24, r25
    53be:	82 83       	std	Z+2, r24	; 0x02
    53c0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    53c4:	0b c0       	rjmp	.+22     	; 0x53dc <__vector_52+0x6c>
    53c6:	e1 ed       	ldi	r30, 0xD1	; 209
    53c8:	f0 e0       	ldi	r31, 0x00	; 0
    53ca:	80 81       	ld	r24, Z
    53cc:	8f 7d       	andi	r24, 0xDF	; 223
    53ce:	80 83       	st	Z, r24
    53d0:	05 c0       	rjmp	.+10     	; 0x53dc <__vector_52+0x6c>
    53d2:	e1 ed       	ldi	r30, 0xD1	; 209
    53d4:	f0 e0       	ldi	r31, 0x00	; 0
    53d6:	80 81       	ld	r24, Z
    53d8:	8f 7d       	andi	r24, 0xDF	; 223
    53da:	80 83       	st	Z, r24
    53dc:	ff 91       	pop	r31
    53de:	ef 91       	pop	r30
    53e0:	bf 91       	pop	r27
    53e2:	af 91       	pop	r26
    53e4:	9f 91       	pop	r25
    53e6:	8f 91       	pop	r24
    53e8:	2f 91       	pop	r18
    53ea:	0f 90       	pop	r0
    53ec:	0b be       	out	0x3b, r0	; 59
    53ee:	0f 90       	pop	r0
    53f0:	0f be       	out	0x3f, r0	; 63
    53f2:	0f 90       	pop	r0
    53f4:	1f 90       	pop	r1
    53f6:	18 95       	reti

000053f8 <__vector_54>:
    53f8:	1f 92       	push	r1
    53fa:	0f 92       	push	r0
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	0f 92       	push	r0
    5400:	11 24       	eor	r1, r1
    5402:	0b b6       	in	r0, 0x3b	; 59
    5404:	0f 92       	push	r0
    5406:	2f 93       	push	r18
    5408:	3f 93       	push	r19
    540a:	4f 93       	push	r20
    540c:	5f 93       	push	r21
    540e:	6f 93       	push	r22
    5410:	7f 93       	push	r23
    5412:	8f 93       	push	r24
    5414:	9f 93       	push	r25
    5416:	af 93       	push	r26
    5418:	bf 93       	push	r27
    541a:	cf 93       	push	r28
    541c:	df 93       	push	r29
    541e:	ef 93       	push	r30
    5420:	ff 93       	push	r31
    5422:	a0 91 50 08 	lds	r26, 0x0850	; 0x800850 <_ser_handle+0x6>
    5426:	b0 91 51 08 	lds	r27, 0x0851	; 0x800851 <_ser_handle+0x7>
    542a:	10 97       	sbiw	r26, 0x00	; 0
    542c:	11 f1       	breq	.+68     	; 0x5472 <__vector_54+0x7a>
    542e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5432:	14 96       	adiw	r26, 0x04	; 4
    5434:	ed 91       	ld	r30, X+
    5436:	fc 91       	ld	r31, X
    5438:	15 97       	sbiw	r26, 0x05	; 5
    543a:	93 81       	ldd	r25, Z+3	; 0x03
    543c:	82 81       	ldd	r24, Z+2	; 0x02
    543e:	25 81       	ldd	r18, Z+5	; 0x05
    5440:	98 1b       	sub	r25, r24
    5442:	92 23       	and	r25, r18
    5444:	84 81       	ldd	r24, Z+4	; 0x04
    5446:	98 17       	cp	r25, r24
    5448:	61 f0       	breq	.+24     	; 0x5462 <__vector_54+0x6a>
    544a:	83 81       	ldd	r24, Z+3	; 0x03
    544c:	26 95       	lsr	r18
    544e:	28 23       	and	r18, r24
    5450:	c0 81       	ld	r28, Z
    5452:	d1 81       	ldd	r29, Z+1	; 0x01
    5454:	c2 0f       	add	r28, r18
    5456:	d1 1d       	adc	r29, r1
    5458:	68 83       	st	Y, r22
    545a:	8f 5f       	subi	r24, 0xFF	; 255
    545c:	95 81       	ldd	r25, Z+5	; 0x05
    545e:	89 23       	and	r24, r25
    5460:	83 83       	std	Z+3, r24	; 0x03
    5462:	16 96       	adiw	r26, 0x06	; 6
    5464:	ed 91       	ld	r30, X+
    5466:	fc 91       	ld	r31, X
    5468:	17 97       	sbiw	r26, 0x07	; 7
    546a:	30 97       	sbiw	r30, 0x00	; 0
    546c:	11 f0       	breq	.+4      	; 0x5472 <__vector_54+0x7a>
    546e:	cd 01       	movw	r24, r26
    5470:	19 95       	eicall
    5472:	ff 91       	pop	r31
    5474:	ef 91       	pop	r30
    5476:	df 91       	pop	r29
    5478:	cf 91       	pop	r28
    547a:	bf 91       	pop	r27
    547c:	af 91       	pop	r26
    547e:	9f 91       	pop	r25
    5480:	8f 91       	pop	r24
    5482:	7f 91       	pop	r23
    5484:	6f 91       	pop	r22
    5486:	5f 91       	pop	r21
    5488:	4f 91       	pop	r20
    548a:	3f 91       	pop	r19
    548c:	2f 91       	pop	r18
    548e:	0f 90       	pop	r0
    5490:	0b be       	out	0x3b, r0	; 59
    5492:	0f 90       	pop	r0
    5494:	0f be       	out	0x3f, r0	; 63
    5496:	0f 90       	pop	r0
    5498:	1f 90       	pop	r1
    549a:	18 95       	reti

0000549c <__vector_55>:
    549c:	1f 92       	push	r1
    549e:	0f 92       	push	r0
    54a0:	0f b6       	in	r0, 0x3f	; 63
    54a2:	0f 92       	push	r0
    54a4:	11 24       	eor	r1, r1
    54a6:	0b b6       	in	r0, 0x3b	; 59
    54a8:	0f 92       	push	r0
    54aa:	2f 93       	push	r18
    54ac:	8f 93       	push	r24
    54ae:	9f 93       	push	r25
    54b0:	af 93       	push	r26
    54b2:	bf 93       	push	r27
    54b4:	ef 93       	push	r30
    54b6:	ff 93       	push	r31
    54b8:	e0 91 50 08 	lds	r30, 0x0850	; 0x800850 <_ser_handle+0x6>
    54bc:	f0 91 51 08 	lds	r31, 0x0851	; 0x800851 <_ser_handle+0x7>
    54c0:	30 97       	sbiw	r30, 0x00	; 0
    54c2:	b9 f0       	breq	.+46     	; 0x54f2 <__vector_55+0x56>
    54c4:	02 80       	ldd	r0, Z+2	; 0x02
    54c6:	f3 81       	ldd	r31, Z+3	; 0x03
    54c8:	e0 2d       	mov	r30, r0
    54ca:	93 81       	ldd	r25, Z+3	; 0x03
    54cc:	82 81       	ldd	r24, Z+2	; 0x02
    54ce:	98 17       	cp	r25, r24
    54d0:	b1 f0       	breq	.+44     	; 0x54fe <__vector_55+0x62>
    54d2:	92 81       	ldd	r25, Z+2	; 0x02
    54d4:	85 81       	ldd	r24, Z+5	; 0x05
    54d6:	28 2f       	mov	r18, r24
    54d8:	26 95       	lsr	r18
    54da:	29 23       	and	r18, r25
    54dc:	a0 81       	ld	r26, Z
    54de:	b1 81       	ldd	r27, Z+1	; 0x01
    54e0:	a2 0f       	add	r26, r18
    54e2:	b1 1d       	adc	r27, r1
    54e4:	2c 91       	ld	r18, X
    54e6:	9f 5f       	subi	r25, 0xFF	; 255
    54e8:	89 23       	and	r24, r25
    54ea:	82 83       	std	Z+2, r24	; 0x02
    54ec:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    54f0:	0b c0       	rjmp	.+22     	; 0x5508 <__vector_55+0x6c>
    54f2:	e1 e3       	ldi	r30, 0x31	; 49
    54f4:	f1 e0       	ldi	r31, 0x01	; 1
    54f6:	80 81       	ld	r24, Z
    54f8:	8f 7d       	andi	r24, 0xDF	; 223
    54fa:	80 83       	st	Z, r24
    54fc:	05 c0       	rjmp	.+10     	; 0x5508 <__vector_55+0x6c>
    54fe:	e1 e3       	ldi	r30, 0x31	; 49
    5500:	f1 e0       	ldi	r31, 0x01	; 1
    5502:	80 81       	ld	r24, Z
    5504:	8f 7d       	andi	r24, 0xDF	; 223
    5506:	80 83       	st	Z, r24
    5508:	ff 91       	pop	r31
    550a:	ef 91       	pop	r30
    550c:	bf 91       	pop	r27
    550e:	af 91       	pop	r26
    5510:	9f 91       	pop	r25
    5512:	8f 91       	pop	r24
    5514:	2f 91       	pop	r18
    5516:	0f 90       	pop	r0
    5518:	0b be       	out	0x3b, r0	; 59
    551a:	0f 90       	pop	r0
    551c:	0f be       	out	0x3f, r0	; 63
    551e:	0f 90       	pop	r0
    5520:	1f 90       	pop	r1
    5522:	18 95       	reti

00005524 <fifo_init>:
    5524:	fc 01       	movw	r30, r24
    5526:	41 11       	cpse	r20, r1
    5528:	02 c0       	rjmp	.+4      	; 0x552e <fifo_init+0xa>
    552a:	0e 94 44 39 	call	0x7288	; 0x7288 <abort>
    552e:	84 2f       	mov	r24, r20
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	9c 01       	movw	r18, r24
    5534:	21 50       	subi	r18, 0x01	; 1
    5536:	31 09       	sbc	r19, r1
    5538:	82 23       	and	r24, r18
    553a:	93 23       	and	r25, r19
    553c:	89 2b       	or	r24, r25
    553e:	11 f0       	breq	.+4      	; 0x5544 <fifo_init+0x20>
    5540:	0e 94 44 39 	call	0x7288	; 0x7288 <abort>
    5544:	41 38       	cpi	r20, 0x81	; 129
    5546:	10 f0       	brcs	.+4      	; 0x554c <fifo_init+0x28>
    5548:	0e 94 44 39 	call	0x7288	; 0x7288 <abort>
    554c:	12 82       	std	Z+2, r1	; 0x02
    554e:	13 82       	std	Z+3, r1	; 0x03
    5550:	44 83       	std	Z+4, r20	; 0x04
    5552:	44 0f       	add	r20, r20
    5554:	41 50       	subi	r20, 0x01	; 1
    5556:	45 83       	std	Z+5, r20	; 0x05
    5558:	71 83       	std	Z+1, r23	; 0x01
    555a:	60 83       	st	Z, r22
    555c:	80 e0       	ldi	r24, 0x00	; 0
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	08 95       	ret

00005562 <hal_create>:
    5562:	e0 eb       	ldi	r30, 0xB0	; 176
    5564:	f9 e0       	ldi	r31, 0x09	; 9
    5566:	20 e9       	ldi	r18, 0x90	; 144
    5568:	30 e3       	ldi	r19, 0x30	; 48
    556a:	31 83       	std	Z+1, r19	; 0x01
    556c:	20 83       	st	Z, r18
    556e:	23 e9       	ldi	r18, 0x93	; 147
    5570:	30 e3       	ldi	r19, 0x30	; 48
    5572:	33 83       	std	Z+3, r19	; 0x03
    5574:	22 83       	std	Z+2, r18	; 0x02
    5576:	2e e9       	ldi	r18, 0x9E	; 158
    5578:	30 e3       	ldi	r19, 0x30	; 48
    557a:	35 83       	std	Z+5, r19	; 0x05
    557c:	24 83       	std	Z+4, r18	; 0x04
    557e:	22 ea       	ldi	r18, 0xA2	; 162
    5580:	30 e3       	ldi	r19, 0x30	; 48
    5582:	37 83       	std	Z+7, r19	; 0x07
    5584:	26 83       	std	Z+6, r18	; 0x06
    5586:	28 ea       	ldi	r18, 0xA8	; 168
    5588:	30 e3       	ldi	r19, 0x30	; 48
    558a:	31 87       	std	Z+9, r19	; 0x09
    558c:	20 87       	std	Z+8, r18	; 0x08
    558e:	24 eb       	ldi	r18, 0xB4	; 180
    5590:	30 e3       	ldi	r19, 0x30	; 48
    5592:	33 87       	std	Z+11, r19	; 0x0b
    5594:	22 87       	std	Z+10, r18	; 0x0a
    5596:	29 eb       	ldi	r18, 0xB9	; 185
    5598:	30 e3       	ldi	r19, 0x30	; 48
    559a:	35 87       	std	Z+13, r19	; 0x0d
    559c:	24 87       	std	Z+12, r18	; 0x0c
    559e:	25 ec       	ldi	r18, 0xC5	; 197
    55a0:	30 e3       	ldi	r19, 0x30	; 48
    55a2:	37 87       	std	Z+15, r19	; 0x0f
    55a4:	26 87       	std	Z+14, r18	; 0x0e
    55a6:	25 ea       	ldi	r18, 0xA5	; 165
    55a8:	30 e3       	ldi	r19, 0x30	; 48
    55aa:	31 8b       	std	Z+17, r19	; 0x11
    55ac:	20 8b       	std	Z+16, r18	; 0x10
    55ae:	2a ec       	ldi	r18, 0xCA	; 202
    55b0:	30 e3       	ldi	r19, 0x30	; 48
    55b2:	33 8b       	std	Z+19, r19	; 0x13
    55b4:	22 8b       	std	Z+18, r18	; 0x12
    55b6:	27 ed       	ldi	r18, 0xD7	; 215
    55b8:	30 e3       	ldi	r19, 0x30	; 48
    55ba:	35 8b       	std	Z+21, r19	; 0x15
    55bc:	24 8b       	std	Z+20, r18	; 0x14
    55be:	68 2f       	mov	r22, r24
    55c0:	cf 01       	movw	r24, r30
    55c2:	49 c1       	rjmp	.+658    	; 0x5856 <led_create>
    55c4:	08 95       	ret

000055c6 <_hihTwiCallback>:
    55c6:	65 30       	cpi	r22, 0x05	; 5
    55c8:	f1 f4       	brne	.+60     	; 0x5606 <_hihTwiCallback+0x40>
    55ca:	fa 01       	movw	r30, r20
    55cc:	80 81       	ld	r24, Z
    55ce:	8f 73       	andi	r24, 0x3F	; 63
    55d0:	90 e0       	ldi	r25, 0x00	; 0
    55d2:	98 2f       	mov	r25, r24
    55d4:	88 27       	eor	r24, r24
    55d6:	21 81       	ldd	r18, Z+1	; 0x01
    55d8:	82 2b       	or	r24, r18
    55da:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    55de:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    55e2:	82 81       	ldd	r24, Z+2	; 0x02
    55e4:	f0 e4       	ldi	r31, 0x40	; 64
    55e6:	8f 9f       	mul	r24, r31
    55e8:	c0 01       	movw	r24, r0
    55ea:	11 24       	eor	r1, r1
    55ec:	fa 01       	movw	r30, r20
    55ee:	23 81       	ldd	r18, Z+3	; 0x03
    55f0:	26 95       	lsr	r18
    55f2:	26 95       	lsr	r18
    55f4:	82 2b       	or	r24, r18
    55f6:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    55fa:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    55fe:	81 e0       	ldi	r24, 0x01	; 1
    5600:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <_measuringIsReady>
    5604:	08 95       	ret
    5606:	64 30       	cpi	r22, 0x04	; 4
    5608:	51 f0       	breq	.+20     	; 0x561e <_hihTwiCallback+0x58>
    560a:	80 e0       	ldi	r24, 0x00	; 0
    560c:	90 e4       	ldi	r25, 0x40	; 64
    560e:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <_temp+0x1>
    5612:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_temp>
    5616:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <_hum+0x1>
    561a:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <_hum>
    561e:	08 95       	ret

00005620 <hih8120Create>:
    5620:	0f 93       	push	r16
    5622:	1f 93       	push	r17
    5624:	03 ee       	ldi	r16, 0xE3	; 227
    5626:	1a e2       	ldi	r17, 0x2A	; 42
    5628:	20 e0       	ldi	r18, 0x00	; 0
    562a:	34 e2       	ldi	r19, 0x24	; 36
    562c:	44 ef       	ldi	r20, 0xF4	; 244
    562e:	50 e0       	ldi	r21, 0x00	; 0
    5630:	60 e0       	ldi	r22, 0x00	; 0
    5632:	87 e2       	ldi	r24, 0x27	; 39
    5634:	8d d6       	rcall	.+3354   	; 0x6350 <twiCreate>
    5636:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <_hih8120Handler+0x1>
    563a:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <_hih8120Handler>
    563e:	21 e0       	ldi	r18, 0x01	; 1
    5640:	89 2b       	or	r24, r25
    5642:	09 f0       	breq	.+2      	; 0x5646 <hih8120Create+0x26>
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	82 2f       	mov	r24, r18
    5648:	1f 91       	pop	r17
    564a:	0f 91       	pop	r16
    564c:	08 95       	ret

0000564e <hih8120Wakeup>:
    564e:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <_hih8120Handler>
    5652:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <_hih8120Handler+0x1>
    5656:	00 97       	sbiw	r24, 0x00	; 0
    5658:	51 f0       	breq	.+20     	; 0x566e <hih8120Wakeup+0x20>
    565a:	40 e0       	ldi	r20, 0x00	; 0
    565c:	60 e0       	ldi	r22, 0x00	; 0
    565e:	70 e0       	ldi	r23, 0x00	; 0
    5660:	c8 d6       	rcall	.+3472   	; 0x63f2 <twiTransmit>
    5662:	84 30       	cpi	r24, 0x04	; 4
    5664:	31 f4       	brne	.+12     	; 0x5672 <hih8120Wakeup+0x24>
    5666:	10 92 52 08 	sts	0x0852, r1	; 0x800852 <_measuringIsReady>
    566a:	80 e0       	ldi	r24, 0x00	; 0
    566c:	08 95       	ret
    566e:	82 e0       	ldi	r24, 0x02	; 2
    5670:	08 95       	ret
    5672:	83 e0       	ldi	r24, 0x03	; 3
    5674:	08 95       	ret

00005676 <hih8120Meassure>:
    5676:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <_hih8120Handler>
    567a:	90 91 54 08 	lds	r25, 0x0854	; 0x800854 <_hih8120Handler+0x1>
    567e:	00 97       	sbiw	r24, 0x00	; 0
    5680:	31 f0       	breq	.+12     	; 0x568e <hih8120Meassure+0x18>
    5682:	64 e0       	ldi	r22, 0x04	; 4
    5684:	02 d7       	rcall	.+3588   	; 0x648a <twiReceive>
    5686:	85 30       	cpi	r24, 0x05	; 5
    5688:	21 f0       	breq	.+8      	; 0x5692 <hih8120Meassure+0x1c>
    568a:	83 e0       	ldi	r24, 0x03	; 3
    568c:	08 95       	ret
    568e:	82 e0       	ldi	r24, 0x02	; 2
    5690:	08 95       	ret
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	08 95       	ret

00005696 <hih8120GetHumidity>:
    5696:	60 91 1e 02 	lds	r22, 0x021E	; 0x80021e <_hum>
    569a:	70 91 1f 02 	lds	r23, 0x021F	; 0x80021f <_hum+0x1>
    569e:	80 e0       	ldi	r24, 0x00	; 0
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	0e 94 19 34 	call	0x6832	; 0x6832 <__floatunsisf>
    56a6:	20 e0       	ldi	r18, 0x00	; 0
    56a8:	30 e0       	ldi	r19, 0x00	; 0
    56aa:	48 ec       	ldi	r20, 0xC8	; 200
    56ac:	52 e4       	ldi	r21, 0x42	; 66
    56ae:	e1 da       	rcall	.-2622   	; 0x4c72 <__mulsf3>
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	38 ef       	ldi	r19, 0xF8	; 248
    56b4:	4f e7       	ldi	r20, 0x7F	; 127
    56b6:	56 e4       	ldi	r21, 0x46	; 70
    56b8:	0c 94 a1 33 	jmp	0x6742	; 0x6742 <__divsf3>
    56bc:	08 95       	ret

000056be <hih8120GetHumidityPercent_x10>:
    56be:	eb df       	rcall	.-42     	; 0x5696 <hih8120GetHumidity>
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	40 e2       	ldi	r20, 0x20	; 32
    56c6:	51 e4       	ldi	r21, 0x41	; 65
    56c8:	d4 da       	rcall	.-2648   	; 0x4c72 <__mulsf3>
    56ca:	56 da       	rcall	.-2900   	; 0x4b78 <__fixunssfsi>
    56cc:	cb 01       	movw	r24, r22
    56ce:	08 95       	ret

000056d0 <hih8120GetTemperature>:
    56d0:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_temp>
    56d4:	70 91 1d 02 	lds	r23, 0x021D	; 0x80021d <_temp+0x1>
    56d8:	80 e0       	ldi	r24, 0x00	; 0
    56da:	90 e0       	ldi	r25, 0x00	; 0
    56dc:	0e 94 19 34 	call	0x6832	; 0x6832 <__floatunsisf>
    56e0:	20 e0       	ldi	r18, 0x00	; 0
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	45 e2       	ldi	r20, 0x25	; 37
    56e6:	53 e4       	ldi	r21, 0x43	; 67
    56e8:	c4 da       	rcall	.-2680   	; 0x4c72 <__mulsf3>
    56ea:	20 e0       	ldi	r18, 0x00	; 0
    56ec:	38 ef       	ldi	r19, 0xF8	; 248
    56ee:	4f e7       	ldi	r20, 0x7F	; 127
    56f0:	56 e4       	ldi	r21, 0x46	; 70
    56f2:	0e 94 a1 33 	call	0x6742	; 0x6742 <__divsf3>
    56f6:	20 e0       	ldi	r18, 0x00	; 0
    56f8:	30 e0       	ldi	r19, 0x00	; 0
    56fa:	40 e2       	ldi	r20, 0x20	; 32
    56fc:	52 e4       	ldi	r21, 0x42	; 66
    56fe:	b5 c7       	rjmp	.+3946   	; 0x666a <__subsf3>
    5700:	08 95       	ret

00005702 <hih8120GetTemperature_x10>:
    5702:	e6 df       	rcall	.-52     	; 0x56d0 <hih8120GetTemperature>
    5704:	20 e0       	ldi	r18, 0x00	; 0
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	40 e2       	ldi	r20, 0x20	; 32
    570a:	51 e4       	ldi	r21, 0x41	; 65
    570c:	b2 da       	rcall	.-2716   	; 0x4c72 <__mulsf3>
    570e:	0e 94 12 34 	call	0x6824	; 0x6824 <__fixsfsi>
    5712:	cb 01       	movw	r24, r22
    5714:	08 95       	ret

00005716 <_turn_off>:
    5716:	cf 93       	push	r28
    5718:	df 93       	push	r29
    571a:	90 e0       	ldi	r25, 0x00	; 0
    571c:	fc 01       	movw	r30, r24
    571e:	ee 0f       	add	r30, r30
    5720:	ff 1f       	adc	r31, r31
    5722:	e8 0f       	add	r30, r24
    5724:	f9 1f       	adc	r31, r25
    5726:	ee 0f       	add	r30, r30
    5728:	ff 1f       	adc	r31, r31
    572a:	eb 5a       	subi	r30, 0xAB	; 171
    572c:	f7 4f       	sbci	r31, 0xF7	; 247
    572e:	23 81       	ldd	r18, Z+3	; 0x03
    5730:	21 11       	cpse	r18, r1
    5732:	0a c0       	rjmp	.+20     	; 0x5748 <_turn_off+0x32>
    5734:	ef 01       	movw	r28, r30
    5736:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <register_access+0x8>
    573a:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <register_access+0x9>
    573e:	6a 81       	ldd	r22, Y+2	; 0x02
    5740:	88 81       	ld	r24, Y
    5742:	99 81       	ldd	r25, Y+1	; 0x01
    5744:	19 95       	eicall
    5746:	12 c0       	rjmp	.+36     	; 0x576c <_turn_off+0x56>
    5748:	dc 01       	movw	r26, r24
    574a:	aa 0f       	add	r26, r26
    574c:	bb 1f       	adc	r27, r27
    574e:	ed 01       	movw	r28, r26
    5750:	c8 0f       	add	r28, r24
    5752:	d9 1f       	adc	r29, r25
    5754:	cc 0f       	add	r28, r28
    5756:	dd 1f       	adc	r29, r29
    5758:	cb 5a       	subi	r28, 0xAB	; 171
    575a:	d7 4f       	sbci	r29, 0xF7	; 247
    575c:	e0 91 c2 09 	lds	r30, 0x09C2	; 0x8009c2 <register_access+0x12>
    5760:	f0 91 c3 09 	lds	r31, 0x09C3	; 0x8009c3 <register_access+0x13>
    5764:	6a 81       	ldd	r22, Y+2	; 0x02
    5766:	88 81       	ld	r24, Y
    5768:	99 81       	ldd	r25, Y+1	; 0x01
    576a:	19 95       	eicall
    576c:	df 91       	pop	r29
    576e:	cf 91       	pop	r28
    5770:	08 95       	ret

00005772 <_turn_on>:
    5772:	cf 93       	push	r28
    5774:	df 93       	push	r29
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	fc 01       	movw	r30, r24
    577a:	ee 0f       	add	r30, r30
    577c:	ff 1f       	adc	r31, r31
    577e:	e8 0f       	add	r30, r24
    5780:	f9 1f       	adc	r31, r25
    5782:	ee 0f       	add	r30, r30
    5784:	ff 1f       	adc	r31, r31
    5786:	eb 5a       	subi	r30, 0xAB	; 171
    5788:	f7 4f       	sbci	r31, 0xF7	; 247
    578a:	23 81       	ldd	r18, Z+3	; 0x03
    578c:	21 11       	cpse	r18, r1
    578e:	0a c0       	rjmp	.+20     	; 0x57a4 <_turn_on+0x32>
    5790:	ef 01       	movw	r28, r30
    5792:	e0 91 c2 09 	lds	r30, 0x09C2	; 0x8009c2 <register_access+0x12>
    5796:	f0 91 c3 09 	lds	r31, 0x09C3	; 0x8009c3 <register_access+0x13>
    579a:	6a 81       	ldd	r22, Y+2	; 0x02
    579c:	88 81       	ld	r24, Y
    579e:	99 81       	ldd	r25, Y+1	; 0x01
    57a0:	19 95       	eicall
    57a2:	12 c0       	rjmp	.+36     	; 0x57c8 <_turn_on+0x56>
    57a4:	dc 01       	movw	r26, r24
    57a6:	aa 0f       	add	r26, r26
    57a8:	bb 1f       	adc	r27, r27
    57aa:	ed 01       	movw	r28, r26
    57ac:	c8 0f       	add	r28, r24
    57ae:	d9 1f       	adc	r29, r25
    57b0:	cc 0f       	add	r28, r28
    57b2:	dd 1f       	adc	r29, r29
    57b4:	cb 5a       	subi	r28, 0xAB	; 171
    57b6:	d7 4f       	sbci	r29, 0xF7	; 247
    57b8:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <register_access+0x8>
    57bc:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <register_access+0x9>
    57c0:	6a 81       	ldd	r22, Y+2	; 0x02
    57c2:	88 81       	ld	r24, Y
    57c4:	99 81       	ldd	r25, Y+1	; 0x01
    57c6:	19 95       	eicall
    57c8:	df 91       	pop	r29
    57ca:	cf 91       	pop	r28
    57cc:	08 95       	ret

000057ce <_hal_led_task>:
    57ce:	85 e7       	ldi	r24, 0x75	; 117
    57d0:	94 e0       	ldi	r25, 0x04	; 4
    57d2:	0e 94 bf 3a 	call	0x757e	; 0x757e <puts>
    57d6:	0f 2e       	mov	r0, r31
    57d8:	f0 eb       	ldi	r31, 0xB0	; 176
    57da:	cf 2e       	mov	r12, r31
    57dc:	f9 e0       	ldi	r31, 0x09	; 9
    57de:	df 2e       	mov	r13, r31
    57e0:	f0 2d       	mov	r31, r0
    57e2:	04 e0       	ldi	r16, 0x04	; 4
    57e4:	c5 e5       	ldi	r28, 0x55	; 85
    57e6:	d8 e0       	ldi	r29, 0x08	; 8
    57e8:	10 e0       	ldi	r17, 0x00	; 0
    57ea:	8c 81       	ldd	r24, Y+4	; 0x04
    57ec:	81 30       	cpi	r24, 0x01	; 1
    57ee:	69 f0       	breq	.+26     	; 0x580a <_hal_led_task+0x3c>
    57f0:	e8 f0       	brcs	.+58     	; 0x582c <_hal_led_task+0x5e>
    57f2:	82 30       	cpi	r24, 0x02	; 2
    57f4:	39 f5       	brne	.+78     	; 0x5844 <_hal_led_task+0x76>
    57f6:	d6 01       	movw	r26, r12
    57f8:	1c 96       	adiw	r26, 0x0c	; 12
    57fa:	ed 91       	ld	r30, X+
    57fc:	fc 91       	ld	r31, X
    57fe:	1d 97       	sbiw	r26, 0x0d	; 13
    5800:	6a 81       	ldd	r22, Y+2	; 0x02
    5802:	88 81       	ld	r24, Y
    5804:	99 81       	ldd	r25, Y+1	; 0x01
    5806:	19 95       	eicall
    5808:	1d c0       	rjmp	.+58     	; 0x5844 <_hal_led_task+0x76>
    580a:	8d 81       	ldd	r24, Y+5	; 0x05
    580c:	8f 5f       	subi	r24, 0xFF	; 255
    580e:	8a 30       	cpi	r24, 0x0A	; 10
    5810:	10 f4       	brcc	.+4      	; 0x5816 <_hal_led_task+0x48>
    5812:	8d 83       	std	Y+5, r24	; 0x05
    5814:	17 c0       	rjmp	.+46     	; 0x5844 <_hal_led_task+0x76>
    5816:	1d 82       	std	Y+5, r1	; 0x05
    5818:	d6 01       	movw	r26, r12
    581a:	1c 96       	adiw	r26, 0x0c	; 12
    581c:	ed 91       	ld	r30, X+
    581e:	fc 91       	ld	r31, X
    5820:	1d 97       	sbiw	r26, 0x0d	; 13
    5822:	6a 81       	ldd	r22, Y+2	; 0x02
    5824:	88 81       	ld	r24, Y
    5826:	99 81       	ldd	r25, Y+1	; 0x01
    5828:	19 95       	eicall
    582a:	0c c0       	rjmp	.+24     	; 0x5844 <_hal_led_task+0x76>
    582c:	8d 81       	ldd	r24, Y+5	; 0x05
    582e:	88 23       	and	r24, r24
    5830:	31 f0       	breq	.+12     	; 0x583e <_hal_led_task+0x70>
    5832:	81 2f       	mov	r24, r17
    5834:	9e df       	rcall	.-196    	; 0x5772 <_turn_on>
    5836:	8d 81       	ldd	r24, Y+5	; 0x05
    5838:	81 50       	subi	r24, 0x01	; 1
    583a:	8d 83       	std	Y+5, r24	; 0x05
    583c:	03 c0       	rjmp	.+6      	; 0x5844 <_hal_led_task+0x76>
    583e:	0c 83       	std	Y+4, r16	; 0x04
    5840:	81 2f       	mov	r24, r17
    5842:	69 df       	rcall	.-302    	; 0x5716 <_turn_off>
    5844:	1f 5f       	subi	r17, 0xFF	; 255
    5846:	26 96       	adiw	r28, 0x06	; 6
    5848:	14 30       	cpi	r17, 0x04	; 4
    584a:	79 f6       	brne	.-98     	; 0x57ea <_hal_led_task+0x1c>
    584c:	85 e0       	ldi	r24, 0x05	; 5
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <vTaskDelay>
    5854:	c7 cf       	rjmp	.-114    	; 0x57e4 <_hal_led_task+0x16>

00005856 <led_create>:
    5856:	cf 92       	push	r12
    5858:	df 92       	push	r13
    585a:	ef 92       	push	r14
    585c:	ff 92       	push	r15
    585e:	0f 93       	push	r16
    5860:	1f 93       	push	r17
    5862:	cf 93       	push	r28
    5864:	df 93       	push	r29
    5866:	06 2f       	mov	r16, r22
    5868:	0f 2e       	mov	r0, r31
    586a:	f0 eb       	ldi	r31, 0xB0	; 176
    586c:	ef 2e       	mov	r14, r31
    586e:	f9 e0       	ldi	r31, 0x09	; 9
    5870:	ff 2e       	mov	r15, r31
    5872:	f0 2d       	mov	r31, r0
    5874:	d7 01       	movw	r26, r14
    5876:	18 96       	adiw	r26, 0x08	; 8
    5878:	ed 91       	ld	r30, X+
    587a:	fc 91       	ld	r31, X
    587c:	19 97       	sbiw	r26, 0x09	; 9
    587e:	66 e0       	ldi	r22, 0x06	; 6
    5880:	87 e2       	ldi	r24, 0x27	; 39
    5882:	90 e0       	ldi	r25, 0x00	; 0
    5884:	19 95       	eicall
    5886:	c5 e5       	ldi	r28, 0x55	; 85
    5888:	d8 e0       	ldi	r29, 0x08	; 8
    588a:	0f 2e       	mov	r0, r31
    588c:	f8 e2       	ldi	r31, 0x28	; 40
    588e:	cf 2e       	mov	r12, r31
    5890:	d1 2c       	mov	r13, r1
    5892:	f0 2d       	mov	r31, r0
    5894:	d9 82       	std	Y+1, r13	; 0x01
    5896:	c8 82       	st	Y, r12
    5898:	86 e0       	ldi	r24, 0x06	; 6
    589a:	8a 83       	std	Y+2, r24	; 0x02
    589c:	1b 82       	std	Y+3, r1	; 0x03
    589e:	14 e0       	ldi	r17, 0x04	; 4
    58a0:	1c 83       	std	Y+4, r17	; 0x04
    58a2:	80 e0       	ldi	r24, 0x00	; 0
    58a4:	38 df       	rcall	.-400    	; 0x5716 <_turn_off>
    58a6:	d7 01       	movw	r26, r14
    58a8:	18 96       	adiw	r26, 0x08	; 8
    58aa:	ed 91       	ld	r30, X+
    58ac:	fc 91       	ld	r31, X
    58ae:	19 97       	sbiw	r26, 0x09	; 9
    58b0:	67 e0       	ldi	r22, 0x07	; 7
    58b2:	87 e2       	ldi	r24, 0x27	; 39
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	19 95       	eicall
    58b8:	df 82       	std	Y+7, r13	; 0x07
    58ba:	ce 82       	std	Y+6, r12	; 0x06
    58bc:	87 e0       	ldi	r24, 0x07	; 7
    58be:	88 87       	std	Y+8, r24	; 0x08
    58c0:	19 86       	std	Y+9, r1	; 0x09
    58c2:	1a 87       	std	Y+10, r17	; 0x0a
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	27 df       	rcall	.-434    	; 0x5716 <_turn_off>
    58c8:	d7 01       	movw	r26, r14
    58ca:	18 96       	adiw	r26, 0x08	; 8
    58cc:	ed 91       	ld	r30, X+
    58ce:	fc 91       	ld	r31, X
    58d0:	19 97       	sbiw	r26, 0x09	; 9
    58d2:	65 e0       	ldi	r22, 0x05	; 5
    58d4:	83 e3       	ldi	r24, 0x33	; 51
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	19 95       	eicall
    58da:	d7 01       	movw	r26, r14
    58dc:	18 96       	adiw	r26, 0x08	; 8
    58de:	ed 91       	ld	r30, X+
    58e0:	fc 91       	ld	r31, X
    58e2:	19 97       	sbiw	r26, 0x09	; 9
    58e4:	61 e0       	ldi	r22, 0x01	; 1
    58e6:	84 e3       	ldi	r24, 0x34	; 52
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	19 95       	eicall
    58ec:	84 e3       	ldi	r24, 0x34	; 52
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	9d 87       	std	Y+13, r25	; 0x0d
    58f2:	8c 87       	std	Y+12, r24	; 0x0c
    58f4:	85 e0       	ldi	r24, 0x05	; 5
    58f6:	8e 87       	std	Y+14, r24	; 0x0e
    58f8:	1f 86       	std	Y+15, r1	; 0x0f
    58fa:	18 8b       	std	Y+16, r17	; 0x10
    58fc:	82 e0       	ldi	r24, 0x02	; 2
    58fe:	0b df       	rcall	.-490    	; 0x5716 <_turn_off>
    5900:	d7 01       	movw	r26, r14
    5902:	18 96       	adiw	r26, 0x08	; 8
    5904:	ed 91       	ld	r30, X+
    5906:	fc 91       	ld	r31, X
    5908:	19 97       	sbiw	r26, 0x09	; 9
    590a:	64 e0       	ldi	r22, 0x04	; 4
    590c:	81 e0       	ldi	r24, 0x01	; 1
    590e:	91 e0       	ldi	r25, 0x01	; 1
    5910:	19 95       	eicall
    5912:	d7 01       	movw	r26, r14
    5914:	18 96       	adiw	r26, 0x08	; 8
    5916:	ed 91       	ld	r30, X+
    5918:	fc 91       	ld	r31, X
    591a:	19 97       	sbiw	r26, 0x09	; 9
    591c:	61 e0       	ldi	r22, 0x01	; 1
    591e:	82 e0       	ldi	r24, 0x02	; 2
    5920:	91 e0       	ldi	r25, 0x01	; 1
    5922:	19 95       	eicall
    5924:	82 e0       	ldi	r24, 0x02	; 2
    5926:	91 e0       	ldi	r25, 0x01	; 1
    5928:	9b 8b       	std	Y+19, r25	; 0x13
    592a:	8a 8b       	std	Y+18, r24	; 0x12
    592c:	1c 8b       	std	Y+20, r17	; 0x14
    592e:	1d 8a       	std	Y+21, r1	; 0x15
    5930:	1e 8b       	std	Y+22, r17	; 0x16
    5932:	83 e0       	ldi	r24, 0x03	; 3
    5934:	f0 de       	rcall	.-544    	; 0x5716 <_turn_off>
    5936:	e1 2c       	mov	r14, r1
    5938:	f1 2c       	mov	r15, r1
    593a:	20 e0       	ldi	r18, 0x00	; 0
    593c:	30 e0       	ldi	r19, 0x00	; 0
    593e:	40 ec       	ldi	r20, 0xC0	; 192
    5940:	50 e0       	ldi	r21, 0x00	; 0
    5942:	6c e8       	ldi	r22, 0x8C	; 140
    5944:	74 e0       	ldi	r23, 0x04	; 4
    5946:	87 ee       	ldi	r24, 0xE7	; 231
    5948:	9b e2       	ldi	r25, 0x2B	; 43
    594a:	0e 94 20 11 	call	0x2240	; 0x2240 <xTaskCreate>
    594e:	df 91       	pop	r29
    5950:	cf 91       	pop	r28
    5952:	1f 91       	pop	r17
    5954:	0f 91       	pop	r16
    5956:	ff 90       	pop	r15
    5958:	ef 90       	pop	r14
    595a:	df 90       	pop	r13
    595c:	cf 90       	pop	r12
    595e:	08 95       	ret

00005960 <_serial_call_back>:
    5960:	0f 93       	push	r16
    5962:	1f 93       	push	r17
    5964:	cf 93       	push	r28
    5966:	df 93       	push	r29
    5968:	1f 92       	push	r1
    596a:	1f 92       	push	r1
    596c:	cd b7       	in	r28, 0x3d	; 61
    596e:	de b7       	in	r29, 0x3e	; 62
    5970:	8c 01       	movw	r16, r24
    5972:	19 82       	std	Y+1, r1	; 0x01
    5974:	2d c0       	rjmp	.+90     	; 0x59d0 <_serial_call_back+0x70>
    5976:	e0 91 d1 08 	lds	r30, 0x08D1	; 0x8008d1 <rec_buf_inp.2926>
    597a:	ec 32       	cpi	r30, 0x2C	; 44
    597c:	50 f4       	brcc	.+20     	; 0x5992 <_serial_call_back+0x32>
    597e:	81 e0       	ldi	r24, 0x01	; 1
    5980:	8e 0f       	add	r24, r30
    5982:	80 93 d1 08 	sts	0x08D1, r24	; 0x8008d1 <rec_buf_inp.2926>
    5986:	f0 e0       	ldi	r31, 0x00	; 0
    5988:	ef 5f       	subi	r30, 0xFF	; 255
    598a:	f6 4f       	sbci	r31, 0xF6	; 246
    598c:	8a 81       	ldd	r24, Y+2	; 0x02
    598e:	80 83       	st	Z, r24
    5990:	02 c0       	rjmp	.+4      	; 0x5996 <_serial_call_back+0x36>
    5992:	10 92 d1 08 	sts	0x08D1, r1	; 0x8008d1 <rec_buf_inp.2926>
    5996:	8a 81       	ldd	r24, Y+2	; 0x02
    5998:	8a 30       	cpi	r24, 0x0A	; 10
    599a:	d1 f4       	brne	.+52     	; 0x59d0 <_serial_call_back+0x70>
    599c:	40 91 d1 08 	lds	r20, 0x08D1	; 0x8008d1 <rec_buf_inp.2926>
    59a0:	50 e0       	ldi	r21, 0x00	; 0
    59a2:	fa 01       	movw	r30, r20
    59a4:	e1 50       	subi	r30, 0x01	; 1
    59a6:	f7 4f       	sbci	r31, 0xF7	; 247
    59a8:	10 82       	st	Z, r1
    59aa:	41 50       	subi	r20, 0x01	; 1
    59ac:	51 09       	sbc	r21, r1
    59ae:	9e 01       	movw	r18, r28
    59b0:	2f 5f       	subi	r18, 0xFF	; 255
    59b2:	3f 4f       	sbci	r19, 0xFF	; 255
    59b4:	61 e0       	ldi	r22, 0x01	; 1
    59b6:	79 e0       	ldi	r23, 0x09	; 9
    59b8:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <_reply_buffer_handle>
    59bc:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <_reply_buffer_handle+0x1>
    59c0:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <xStreamBufferSendFromISR>
    59c4:	89 81       	ldd	r24, Y+1	; 0x01
    59c6:	81 11       	cpse	r24, r1
    59c8:	0e 94 6c 05 	call	0xad8	; 0xad8 <vPortYield>
    59cc:	10 92 d1 08 	sts	0x08D1, r1	; 0x8008d1 <rec_buf_inp.2926>
    59d0:	be 01       	movw	r22, r28
    59d2:	6e 5f       	subi	r22, 0xFE	; 254
    59d4:	7f 4f       	sbci	r23, 0xFF	; 255
    59d6:	c8 01       	movw	r24, r16
    59d8:	31 db       	rcall	.-2462   	; 0x503c <serial_get_byte>
    59da:	88 23       	and	r24, r24
    59dc:	61 f2       	breq	.-104    	; 0x5976 <_serial_call_back+0x16>
    59de:	0f 90       	pop	r0
    59e0:	0f 90       	pop	r0
    59e2:	df 91       	pop	r29
    59e4:	cf 91       	pop	r28
    59e6:	1f 91       	pop	r17
    59e8:	0f 91       	pop	r16
    59ea:	08 95       	ret

000059ec <_upload_message>:
    59ec:	0f 93       	push	r16
    59ee:	1f 93       	push	r17
    59f0:	cf 93       	push	r28
    59f2:	df 93       	push	r29
    59f4:	8c 01       	movw	r16, r24
    59f6:	eb 01       	movw	r28, r22
    59f8:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <_reply_buffer_handle>
    59fc:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <_reply_buffer_handle+0x1>
    5a00:	0e 94 bb 0c 	call	0x1976	; 0x1976 <xStreamBufferReset>
    5a04:	b8 01       	movw	r22, r16
    5a06:	8d e6       	ldi	r24, 0x6D	; 109
    5a08:	98 e0       	ldi	r25, 0x08	; 8
    5a0a:	0e 94 46 3a 	call	0x748c	; 0x748c <strcpy>
    5a0e:	20 97       	sbiw	r28, 0x00	; 0
    5a10:	79 f0       	breq	.+30     	; 0x5a30 <_upload_message+0x44>
    5a12:	ed e6       	ldi	r30, 0x6D	; 109
    5a14:	f8 e0       	ldi	r31, 0x08	; 8
    5a16:	01 90       	ld	r0, Z+
    5a18:	00 20       	and	r0, r0
    5a1a:	e9 f7       	brne	.-6      	; 0x5a16 <_upload_message+0x2a>
    5a1c:	31 97       	sbiw	r30, 0x01	; 1
    5a1e:	80 e2       	ldi	r24, 0x20	; 32
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	91 83       	std	Z+1, r25	; 0x01
    5a24:	80 83       	st	Z, r24
    5a26:	be 01       	movw	r22, r28
    5a28:	8d e6       	ldi	r24, 0x6D	; 109
    5a2a:	98 e0       	ldi	r25, 0x08	; 8
    5a2c:	0e 94 3b 3a 	call	0x7476	; 0x7476 <strcat>
    5a30:	ed e6       	ldi	r30, 0x6D	; 109
    5a32:	f8 e0       	ldi	r31, 0x08	; 8
    5a34:	df 01       	movw	r26, r30
    5a36:	0d 90       	ld	r0, X+
    5a38:	00 20       	and	r0, r0
    5a3a:	e9 f7       	brne	.-6      	; 0x5a36 <_upload_message+0x4a>
    5a3c:	11 97       	sbiw	r26, 0x01	; 1
    5a3e:	8d e0       	ldi	r24, 0x0D	; 13
    5a40:	9a e0       	ldi	r25, 0x0A	; 10
    5a42:	11 96       	adiw	r26, 0x01	; 1
    5a44:	9c 93       	st	X, r25
    5a46:	8e 93       	st	-X, r24
    5a48:	12 96       	adiw	r26, 0x02	; 2
    5a4a:	1c 92       	st	X, r1
    5a4c:	01 90       	ld	r0, Z+
    5a4e:	00 20       	and	r0, r0
    5a50:	e9 f7       	brne	.-6      	; 0x5a4c <_upload_message+0x60>
    5a52:	31 97       	sbiw	r30, 0x01	; 1
    5a54:	ed 56       	subi	r30, 0x6D	; 109
    5a56:	f8 40       	sbci	r31, 0x08	; 8
    5a58:	ae 2f       	mov	r26, r30
    5a5a:	8d e6       	ldi	r24, 0x6D	; 109
    5a5c:	98 e0       	ldi	r25, 0x08	; 8
    5a5e:	ac 01       	movw	r20, r24
    5a60:	6a 2f       	mov	r22, r26
    5a62:	80 91 d4 08 	lds	r24, 0x08D4	; 0x8008d4 <_rn2483_serial>
    5a66:	90 91 d5 08 	lds	r25, 0x08D5	; 0x8008d5 <_rn2483_serial+0x1>
    5a6a:	98 da       	rcall	.-2768   	; 0x4f9c <serial_send_bytes>
    5a6c:	81 11       	cpse	r24, r1
    5a6e:	0f c0       	rjmp	.+30     	; 0x5a8e <_upload_message+0xa2>
    5a70:	28 e2       	ldi	r18, 0x28	; 40
    5a72:	35 e0       	ldi	r19, 0x05	; 5
    5a74:	4d e2       	ldi	r20, 0x2D	; 45
    5a76:	50 e0       	ldi	r21, 0x00	; 0
    5a78:	6b e5       	ldi	r22, 0x5B	; 91
    5a7a:	79 e0       	ldi	r23, 0x09	; 9
    5a7c:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <_reply_buffer_handle>
    5a80:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <_reply_buffer_handle+0x1>
    5a84:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <xStreamBufferReceive>
    5a88:	8b e5       	ldi	r24, 0x5B	; 91
    5a8a:	99 e0       	ldi	r25, 0x09	; 9
    5a8c:	02 c0       	rjmp	.+4      	; 0x5a92 <_upload_message+0xa6>
    5a8e:	80 e0       	ldi	r24, 0x00	; 0
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	df 91       	pop	r29
    5a94:	cf 91       	pop	r28
    5a96:	1f 91       	pop	r17
    5a98:	0f 91       	pop	r16
    5a9a:	08 95       	ret

00005a9c <_reply2return_code>:
    5a9c:	af 92       	push	r10
    5a9e:	bf 92       	push	r11
    5aa0:	cf 92       	push	r12
    5aa2:	df 92       	push	r13
    5aa4:	ef 92       	push	r14
    5aa6:	ff 92       	push	r15
    5aa8:	0f 93       	push	r16
    5aaa:	1f 93       	push	r17
    5aac:	cf 93       	push	r28
    5aae:	df 93       	push	r29
    5ab0:	6c 01       	movw	r12, r24
    5ab2:	fc 01       	movw	r30, r24
    5ab4:	01 90       	ld	r0, Z+
    5ab6:	00 20       	and	r0, r0
    5ab8:	e9 f7       	brne	.-6      	; 0x5ab4 <_reply2return_code+0x18>
    5aba:	31 97       	sbiw	r30, 0x01	; 1
    5abc:	7f 01       	movw	r14, r30
    5abe:	e8 1a       	sub	r14, r24
    5ac0:	f9 0a       	sbc	r15, r25
    5ac2:	08 e1       	ldi	r16, 0x18	; 24
    5ac4:	17 e0       	ldi	r17, 0x07	; 7
    5ac6:	c0 e0       	ldi	r28, 0x00	; 0
    5ac8:	d0 e0       	ldi	r29, 0x00	; 0
    5aca:	f8 01       	movw	r30, r16
    5acc:	60 81       	ld	r22, Z
    5ace:	71 81       	ldd	r23, Z+1	; 0x01
    5ad0:	a7 01       	movw	r20, r14
    5ad2:	c6 01       	movw	r24, r12
    5ad4:	0e 94 4d 3a 	call	0x749a	; 0x749a <strncasecmp>
    5ad8:	89 2b       	or	r24, r25
    5ada:	49 f4       	brne	.+18     	; 0x5aee <_reply2return_code+0x52>
    5adc:	fe 01       	movw	r30, r28
    5ade:	ee 0f       	add	r30, r30
    5ae0:	ff 1f       	adc	r31, r31
    5ae2:	ec 0f       	add	r30, r28
    5ae4:	fd 1f       	adc	r31, r29
    5ae6:	e9 5e       	subi	r30, 0xE9	; 233
    5ae8:	f8 4f       	sbci	r31, 0xF8	; 248
    5aea:	80 81       	ld	r24, Z
    5aec:	07 c0       	rjmp	.+14     	; 0x5afc <_reply2return_code+0x60>
    5aee:	21 96       	adiw	r28, 0x01	; 1
    5af0:	0d 5f       	subi	r16, 0xFD	; 253
    5af2:	1f 4f       	sbci	r17, 0xFF	; 255
    5af4:	c1 31       	cpi	r28, 0x11	; 17
    5af6:	d1 05       	cpc	r29, r1
    5af8:	41 f7       	brne	.-48     	; 0x5aca <_reply2return_code+0x2e>
    5afa:	80 e1       	ldi	r24, 0x10	; 16
    5afc:	df 91       	pop	r29
    5afe:	cf 91       	pop	r28
    5b00:	1f 91       	pop	r17
    5b02:	0f 91       	pop	r16
    5b04:	ff 90       	pop	r15
    5b06:	ef 90       	pop	r14
    5b08:	df 90       	pop	r13
    5b0a:	cf 90       	pop	r12
    5b0c:	bf 90       	pop	r11
    5b0e:	af 90       	pop	r10
    5b10:	08 95       	ret

00005b12 <_upload_message_rc>:
    5b12:	6c df       	rcall	.-296    	; 0x59ec <_upload_message>
    5b14:	c3 cf       	rjmp	.-122    	; 0x5a9c <_reply2return_code>
    5b16:	08 95       	ret

00005b18 <lora_driver_flush_buffers>:
    5b18:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <_reply_buffer_handle>
    5b1c:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <_reply_buffer_handle+0x1>
    5b20:	0c 94 bb 0c 	jmp	0x1976	; 0x1976 <xStreamBufferReset>
    5b24:	08 95       	ret

00005b26 <lora_driver_create>:
    5b26:	8f 92       	push	r8
    5b28:	9f 92       	push	r9
    5b2a:	af 92       	push	r10
    5b2c:	cf 92       	push	r12
    5b2e:	ef 92       	push	r14
    5b30:	0f 93       	push	r16
    5b32:	cf 93       	push	r28
    5b34:	c8 2f       	mov	r28, r24
    5b36:	41 e0       	ldi	r20, 0x01	; 1
    5b38:	60 e0       	ldi	r22, 0x00	; 0
    5b3a:	70 e0       	ldi	r23, 0x00	; 0
    5b3c:	88 ec       	ldi	r24, 0xC8	; 200
    5b3e:	90 e0       	ldi	r25, 0x00	; 0
    5b40:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <xStreamBufferGenericCreate>
    5b44:	90 93 d3 08 	sts	0x08D3, r25	; 0x8008d3 <_reply_buffer_handle+0x1>
    5b48:	80 93 d2 08 	sts	0x08D2, r24	; 0x8008d2 <_reply_buffer_handle>
    5b4c:	0f 2e       	mov	r0, r31
    5b4e:	f0 eb       	ldi	r31, 0xB0	; 176
    5b50:	8f 2e       	mov	r8, r31
    5b52:	fc e2       	ldi	r31, 0x2C	; 44
    5b54:	9f 2e       	mov	r9, r31
    5b56:	f0 2d       	mov	r31, r0
    5b58:	68 94       	set
    5b5a:	aa 24       	eor	r10, r10
    5b5c:	a6 f8       	bld	r10, 6
    5b5e:	68 94       	set
    5b60:	cc 24       	eor	r12, r12
    5b62:	c6 f8       	bld	r12, 6
    5b64:	e1 2c       	mov	r14, r1
    5b66:	00 e0       	ldi	r16, 0x00	; 0
    5b68:	23 e0       	ldi	r18, 0x03	; 3
    5b6a:	40 e0       	ldi	r20, 0x00	; 0
    5b6c:	51 ee       	ldi	r21, 0xE1	; 225
    5b6e:	60 e0       	ldi	r22, 0x00	; 0
    5b70:	70 e0       	ldi	r23, 0x00	; 0
    5b72:	8c 2f       	mov	r24, r28
    5b74:	50 d9       	rcall	.-3424   	; 0x4e16 <serial_new_instance>
    5b76:	90 93 d5 08 	sts	0x08D5, r25	; 0x8008d5 <_rn2483_serial+0x1>
    5b7a:	80 93 d4 08 	sts	0x08D4, r24	; 0x8008d4 <_rn2483_serial>
    5b7e:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <register_access+0x8>
    5b82:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <register_access+0x9>
    5b86:	64 e0       	ldi	r22, 0x04	; 4
    5b88:	87 e0       	ldi	r24, 0x07	; 7
    5b8a:	91 e0       	ldi	r25, 0x01	; 1
    5b8c:	19 95       	eicall
    5b8e:	cf 91       	pop	r28
    5b90:	0f 91       	pop	r16
    5b92:	ef 90       	pop	r14
    5b94:	cf 90       	pop	r12
    5b96:	af 90       	pop	r10
    5b98:	9f 90       	pop	r9
    5b9a:	8f 90       	pop	r8
    5b9c:	08 95       	ret

00005b9e <lora_driver_reset_rn2483>:
    5b9e:	88 23       	and	r24, r24
    5ba0:	49 f0       	breq	.+18     	; 0x5bb4 <lora_driver_reset_rn2483+0x16>
    5ba2:	e0 91 c2 09 	lds	r30, 0x09C2	; 0x8009c2 <register_access+0x12>
    5ba6:	f0 91 c3 09 	lds	r31, 0x09C3	; 0x8009c3 <register_access+0x13>
    5baa:	64 e0       	ldi	r22, 0x04	; 4
    5bac:	88 e0       	ldi	r24, 0x08	; 8
    5bae:	91 e0       	ldi	r25, 0x01	; 1
    5bb0:	19 95       	eicall
    5bb2:	08 95       	ret
    5bb4:	e0 91 b8 09 	lds	r30, 0x09B8	; 0x8009b8 <register_access+0x8>
    5bb8:	f0 91 b9 09 	lds	r31, 0x09B9	; 0x8009b9 <register_access+0x9>
    5bbc:	64 e0       	ldi	r22, 0x04	; 4
    5bbe:	88 e0       	ldi	r24, 0x08	; 8
    5bc0:	91 e0       	ldi	r25, 0x01	; 1
    5bc2:	19 95       	eicall
    5bc4:	08 95       	ret

00005bc6 <lora_driver_rn2483_factory_reset>:
    5bc6:	60 e0       	ldi	r22, 0x00	; 0
    5bc8:	70 e0       	ldi	r23, 0x00	; 0
    5bca:	83 eb       	ldi	r24, 0xB3	; 179
    5bcc:	94 e0       	ldi	r25, 0x04	; 4
    5bce:	0e df       	rcall	.-484    	; 0x59ec <_upload_message>
    5bd0:	eb e5       	ldi	r30, 0x5B	; 91
    5bd2:	f9 e0       	ldi	r31, 0x09	; 9
    5bd4:	01 90       	ld	r0, Z+
    5bd6:	00 20       	and	r0, r0
    5bd8:	e9 f7       	brne	.-6      	; 0x5bd4 <lora_driver_rn2483_factory_reset+0xe>
    5bda:	31 97       	sbiw	r30, 0x01	; 1
    5bdc:	eb 55       	subi	r30, 0x5B	; 91
    5bde:	f9 40       	sbci	r31, 0x09	; 9
    5be0:	81 e0       	ldi	r24, 0x01	; 1
    5be2:	75 97       	sbiw	r30, 0x15	; 21
    5be4:	08 f0       	brcs	.+2      	; 0x5be8 <lora_driver_rn2483_factory_reset+0x22>
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	08 95       	ret

00005bea <lora_driver_get_rn2483_hweui>:
    5bea:	cf 93       	push	r28
    5bec:	df 93       	push	r29
    5bee:	ec 01       	movw	r28, r24
    5bf0:	60 e0       	ldi	r22, 0x00	; 0
    5bf2:	70 e0       	ldi	r23, 0x00	; 0
    5bf4:	84 ec       	ldi	r24, 0xC4	; 196
    5bf6:	94 e0       	ldi	r25, 0x04	; 4
    5bf8:	f9 de       	rcall	.-526    	; 0x59ec <_upload_message>
    5bfa:	eb e5       	ldi	r30, 0x5B	; 91
    5bfc:	f9 e0       	ldi	r31, 0x09	; 9
    5bfe:	01 90       	ld	r0, Z+
    5c00:	00 20       	and	r0, r0
    5c02:	e9 f7       	brne	.-6      	; 0x5bfe <lora_driver_get_rn2483_hweui+0x14>
    5c04:	ec 56       	subi	r30, 0x6C	; 108
    5c06:	f9 40       	sbci	r31, 0x09	; 9
    5c08:	39 f4       	brne	.+14     	; 0x5c18 <lora_driver_get_rn2483_hweui+0x2e>
    5c0a:	6b e5       	ldi	r22, 0x5B	; 91
    5c0c:	79 e0       	ldi	r23, 0x09	; 9
    5c0e:	ce 01       	movw	r24, r28
    5c10:	0e 94 46 3a 	call	0x748c	; 0x748c <strcpy>
    5c14:	80 e0       	ldi	r24, 0x00	; 0
    5c16:	02 c0       	rjmp	.+4      	; 0x5c1c <lora_driver_get_rn2483_hweui+0x32>
    5c18:	18 82       	st	Y, r1
    5c1a:	81 e0       	ldi	r24, 0x01	; 1
    5c1c:	df 91       	pop	r29
    5c1e:	cf 91       	pop	r28
    5c20:	08 95       	ret

00005c22 <lora_driver_set_device_identifier>:
    5c22:	fc 01       	movw	r30, r24
    5c24:	01 90       	ld	r0, Z+
    5c26:	00 20       	and	r0, r0
    5c28:	e9 f7       	brne	.-6      	; 0x5c24 <lora_driver_set_device_identifier+0x2>
    5c2a:	9f 01       	movw	r18, r30
    5c2c:	21 51       	subi	r18, 0x11	; 17
    5c2e:	31 09       	sbc	r19, r1
    5c30:	28 17       	cp	r18, r24
    5c32:	39 07       	cpc	r19, r25
    5c34:	29 f4       	brne	.+10     	; 0x5c40 <lora_driver_set_device_identifier+0x1e>
    5c36:	bc 01       	movw	r22, r24
    5c38:	82 ef       	ldi	r24, 0xF2	; 242
    5c3a:	94 e0       	ldi	r25, 0x04	; 4
    5c3c:	6a cf       	rjmp	.-300    	; 0x5b12 <_upload_message_rc>
    5c3e:	08 95       	ret
    5c40:	89 e0       	ldi	r24, 0x09	; 9
    5c42:	08 95       	ret

00005c44 <lora_driver_set_application_identifier>:
    5c44:	fc 01       	movw	r30, r24
    5c46:	01 90       	ld	r0, Z+
    5c48:	00 20       	and	r0, r0
    5c4a:	e9 f7       	brne	.-6      	; 0x5c46 <lora_driver_set_application_identifier+0x2>
    5c4c:	9f 01       	movw	r18, r30
    5c4e:	21 51       	subi	r18, 0x11	; 17
    5c50:	31 09       	sbc	r19, r1
    5c52:	28 17       	cp	r18, r24
    5c54:	39 07       	cpc	r19, r25
    5c56:	29 f4       	brne	.+10     	; 0x5c62 <lora_driver_set_application_identifier+0x1e>
    5c58:	bc 01       	movw	r22, r24
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	95 e0       	ldi	r25, 0x05	; 5
    5c5e:	59 cf       	rjmp	.-334    	; 0x5b12 <_upload_message_rc>
    5c60:	08 95       	ret
    5c62:	89 e0       	ldi	r24, 0x09	; 9
    5c64:	08 95       	ret

00005c66 <lora_driver_set_application_key>:
    5c66:	fc 01       	movw	r30, r24
    5c68:	01 90       	ld	r0, Z+
    5c6a:	00 20       	and	r0, r0
    5c6c:	e9 f7       	brne	.-6      	; 0x5c68 <lora_driver_set_application_key+0x2>
    5c6e:	9f 01       	movw	r18, r30
    5c70:	21 52       	subi	r18, 0x21	; 33
    5c72:	31 09       	sbc	r19, r1
    5c74:	28 17       	cp	r18, r24
    5c76:	39 07       	cpc	r19, r25
    5c78:	29 f4       	brne	.+10     	; 0x5c84 <lora_driver_set_application_key+0x1e>
    5c7a:	bc 01       	movw	r22, r24
    5c7c:	80 e1       	ldi	r24, 0x10	; 16
    5c7e:	95 e0       	ldi	r25, 0x05	; 5
    5c80:	48 cf       	rjmp	.-368    	; 0x5b12 <_upload_message_rc>
    5c82:	08 95       	ret
    5c84:	89 e0       	ldi	r24, 0x09	; 9
    5c86:	08 95       	ret

00005c88 <lora_driver_save_mac>:
    5c88:	60 e0       	ldi	r22, 0x00	; 0
    5c8a:	70 e0       	ldi	r23, 0x00	; 0
    5c8c:	8f e4       	ldi	r24, 0x4F	; 79
    5c8e:	95 e0       	ldi	r25, 0x05	; 5
    5c90:	40 cf       	rjmp	.-384    	; 0x5b12 <_upload_message_rc>
    5c92:	08 95       	ret

00005c94 <lora_driver_join>:
    5c94:	e8 2f       	mov	r30, r24
    5c96:	f0 e0       	ldi	r31, 0x00	; 0
    5c98:	ee 0f       	add	r30, r30
    5c9a:	ff 1f       	adc	r31, r31
    5c9c:	ed 5e       	subi	r30, 0xED	; 237
    5c9e:	f8 4f       	sbci	r31, 0xF8	; 248
    5ca0:	60 81       	ld	r22, Z
    5ca2:	71 81       	ldd	r23, Z+1	; 0x01
    5ca4:	88 e5       	ldi	r24, 0x58	; 88
    5ca6:	95 e0       	ldi	r25, 0x05	; 5
    5ca8:	34 df       	rcall	.-408    	; 0x5b12 <_upload_message_rc>
    5caa:	81 11       	cpse	r24, r1
    5cac:	12 c0       	rjmp	.+36     	; 0x5cd2 <lora_driver_join+0x3e>
    5cae:	28 e2       	ldi	r18, 0x28	; 40
    5cb0:	35 e0       	ldi	r19, 0x05	; 5
    5cb2:	4d e2       	ldi	r20, 0x2D	; 45
    5cb4:	50 e0       	ldi	r21, 0x00	; 0
    5cb6:	6b e5       	ldi	r22, 0x5B	; 91
    5cb8:	79 e0       	ldi	r23, 0x09	; 9
    5cba:	80 91 d2 08 	lds	r24, 0x08D2	; 0x8008d2 <_reply_buffer_handle>
    5cbe:	90 91 d3 08 	lds	r25, 0x08D3	; 0x8008d3 <_reply_buffer_handle+0x1>
    5cc2:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <xStreamBufferReceive>
    5cc6:	88 23       	and	r24, r24
    5cc8:	21 f0       	breq	.+8      	; 0x5cd2 <lora_driver_join+0x3e>
    5cca:	8b e5       	ldi	r24, 0x5B	; 91
    5ccc:	99 e0       	ldi	r25, 0x09	; 9
    5cce:	e6 ce       	rjmp	.-564    	; 0x5a9c <_reply2return_code>
    5cd0:	08 95       	ret
    5cd2:	8b e5       	ldi	r24, 0x5B	; 91
    5cd4:	99 e0       	ldi	r25, 0x09	; 9
    5cd6:	e2 ce       	rjmp	.-572    	; 0x5a9c <_reply2return_code>
    5cd8:	08 95       	ret

00005cda <lora_driver_sent_upload_message>:
    5cda:	cf 93       	push	r28
    5cdc:	df 93       	push	r29
    5cde:	1f 92       	push	r1
    5ce0:	cd b7       	in	r28, 0x3d	; 61
    5ce2:	de b7       	in	r29, 0x3e	; 62
    5ce4:	db 01       	movw	r26, r22
    5ce6:	11 96       	adiw	r26, 0x01	; 1
    5ce8:	9c 91       	ld	r25, X
    5cea:	11 97       	sbiw	r26, 0x01	; 1
    5cec:	95 31       	cpi	r25, 0x15	; 21
    5cee:	08 f0       	brcs	.+2      	; 0x5cf2 <lora_driver_sent_upload_message+0x18>
    5cf0:	87 c0       	rjmp	.+270    	; 0x5e00 <lora_driver_sent_upload_message+0x126>
    5cf2:	99 23       	and	r25, r25
    5cf4:	81 f1       	breq	.+96     	; 0x5d56 <lora_driver_sent_upload_message+0x7c>
    5cf6:	60 e0       	ldi	r22, 0x00	; 0
    5cf8:	70 e0       	ldi	r23, 0x00	; 0
    5cfa:	27 2f       	mov	r18, r23
    5cfc:	30 e0       	ldi	r19, 0x00	; 0
    5cfe:	46 2f       	mov	r20, r22
    5d00:	50 e0       	ldi	r21, 0x00	; 0
    5d02:	fd 01       	movw	r30, r26
    5d04:	e4 0f       	add	r30, r20
    5d06:	f5 1f       	adc	r31, r21
    5d08:	92 81       	ldd	r25, Z+2	; 0x02
    5d0a:	92 95       	swap	r25
    5d0c:	9f 70       	andi	r25, 0x0F	; 15
    5d0e:	9a 30       	cpi	r25, 0x0A	; 10
    5d10:	10 f0       	brcs	.+4      	; 0x5d16 <lora_driver_sent_upload_message+0x3c>
    5d12:	99 5c       	subi	r25, 0xC9	; 201
    5d14:	01 c0       	rjmp	.+2      	; 0x5d18 <lora_driver_sent_upload_message+0x3e>
    5d16:	90 5d       	subi	r25, 0xD0	; 208
    5d18:	f9 01       	movw	r30, r18
    5d1a:	e4 51       	subi	r30, 0x14	; 20
    5d1c:	f7 4f       	sbci	r31, 0xF7	; 247
    5d1e:	90 83       	st	Z, r25
    5d20:	2f 5f       	subi	r18, 0xFF	; 255
    5d22:	3f 4f       	sbci	r19, 0xFF	; 255
    5d24:	fd 01       	movw	r30, r26
    5d26:	e4 0f       	add	r30, r20
    5d28:	f5 1f       	adc	r31, r21
    5d2a:	92 81       	ldd	r25, Z+2	; 0x02
    5d2c:	9f 70       	andi	r25, 0x0F	; 15
    5d2e:	49 2f       	mov	r20, r25
    5d30:	50 e0       	ldi	r21, 0x00	; 0
    5d32:	4a 30       	cpi	r20, 0x0A	; 10
    5d34:	51 05       	cpc	r21, r1
    5d36:	14 f0       	brlt	.+4      	; 0x5d3c <lora_driver_sent_upload_message+0x62>
    5d38:	99 5c       	subi	r25, 0xC9	; 201
    5d3a:	01 c0       	rjmp	.+2      	; 0x5d3e <lora_driver_sent_upload_message+0x64>
    5d3c:	90 5d       	subi	r25, 0xD0	; 208
    5d3e:	f9 01       	movw	r30, r18
    5d40:	e4 51       	subi	r30, 0x14	; 20
    5d42:	f7 4f       	sbci	r31, 0xF7	; 247
    5d44:	90 83       	st	Z, r25
    5d46:	7e 5f       	subi	r23, 0xFE	; 254
    5d48:	6f 5f       	subi	r22, 0xFF	; 255
    5d4a:	11 96       	adiw	r26, 0x01	; 1
    5d4c:	9c 91       	ld	r25, X
    5d4e:	11 97       	sbiw	r26, 0x01	; 1
    5d50:	69 17       	cp	r22, r25
    5d52:	98 f2       	brcs	.-90     	; 0x5cfa <lora_driver_sent_upload_message+0x20>
    5d54:	01 c0       	rjmp	.+2      	; 0x5d58 <lora_driver_sent_upload_message+0x7e>
    5d56:	70 e0       	ldi	r23, 0x00	; 0
    5d58:	e7 2f       	mov	r30, r23
    5d5a:	f0 e0       	ldi	r31, 0x00	; 0
    5d5c:	e4 51       	subi	r30, 0x14	; 20
    5d5e:	f7 4f       	sbci	r31, 0xF7	; 247
    5d60:	10 82       	st	Z, r1
    5d62:	4c 91       	ld	r20, X
    5d64:	81 11       	cpse	r24, r1
    5d66:	03 c0       	rjmp	.+6      	; 0x5d6e <lora_driver_sent_upload_message+0x94>
    5d68:	81 e6       	ldi	r24, 0x61	; 97
    5d6a:	95 e0       	ldi	r25, 0x05	; 5
    5d6c:	02 c0       	rjmp	.+4      	; 0x5d72 <lora_driver_sent_upload_message+0x98>
    5d6e:	83 e6       	ldi	r24, 0x63	; 99
    5d70:	95 e0       	ldi	r25, 0x05	; 5
    5d72:	2c ee       	ldi	r18, 0xEC	; 236
    5d74:	38 e0       	ldi	r19, 0x08	; 8
    5d76:	3f 93       	push	r19
    5d78:	2f 93       	push	r18
    5d7a:	1f 92       	push	r1
    5d7c:	4f 93       	push	r20
    5d7e:	9f 93       	push	r25
    5d80:	8f 93       	push	r24
    5d82:	87 e6       	ldi	r24, 0x67	; 103
    5d84:	95 e0       	ldi	r25, 0x05	; 5
    5d86:	9f 93       	push	r25
    5d88:	8f 93       	push	r24
    5d8a:	8e e2       	ldi	r24, 0x2E	; 46
    5d8c:	99 e0       	ldi	r25, 0x09	; 9
    5d8e:	9f 93       	push	r25
    5d90:	8f 93       	push	r24
    5d92:	0e 94 ef 3a 	call	0x75de	; 0x75de <sprintf>
    5d96:	60 e0       	ldi	r22, 0x00	; 0
    5d98:	70 e0       	ldi	r23, 0x00	; 0
    5d9a:	8e e2       	ldi	r24, 0x2E	; 46
    5d9c:	99 e0       	ldi	r25, 0x09	; 9
    5d9e:	b9 de       	rcall	.-654    	; 0x5b12 <_upload_message_rc>
    5da0:	0f b6       	in	r0, 0x3f	; 63
    5da2:	f8 94       	cli
    5da4:	de bf       	out	0x3e, r29	; 62
    5da6:	0f be       	out	0x3f, r0	; 63
    5da8:	cd bf       	out	0x3d, r28	; 61
    5daa:	8e 30       	cpi	r24, 0x0E	; 14
    5dac:	51 f5       	brne	.+84     	; 0x5e02 <lora_driver_sent_upload_message+0x128>
    5dae:	87 e0       	ldi	r24, 0x07	; 7
    5db0:	89 83       	std	Y+1, r24	; 0x01
    5db2:	be 01       	movw	r22, r28
    5db4:	6f 5f       	subi	r22, 0xFF	; 255
    5db6:	7f 4f       	sbci	r23, 0xFF	; 255
    5db8:	8b e5       	ldi	r24, 0x5B	; 91
    5dba:	99 e0       	ldi	r25, 0x09	; 9
    5dbc:	3c d1       	rcall	.+632    	; 0x6036 <decode_port_no>
    5dbe:	80 93 d6 08 	sts	0x08D6, r24	; 0x8008d6 <_downlink_payload>
    5dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    5dc4:	f0 e0       	ldi	r31, 0x00	; 0
    5dc6:	e5 5a       	subi	r30, 0xA5	; 165
    5dc8:	f6 4f       	sbci	r31, 0xF6	; 246
    5dca:	df 01       	movw	r26, r30
    5dcc:	0d 90       	ld	r0, X+
    5dce:	00 20       	and	r0, r0
    5dd0:	e9 f7       	brne	.-6      	; 0x5dcc <lora_driver_sent_upload_message+0xf2>
    5dd2:	11 97       	sbiw	r26, 0x01	; 1
    5dd4:	ae 1b       	sub	r26, r30
    5dd6:	bf 0b       	sbc	r27, r31
    5dd8:	aa 23       	and	r26, r26
    5dda:	81 f0       	breq	.+32     	; 0x5dfc <lora_driver_sent_upload_message+0x122>
    5ddc:	bb 27       	eor	r27, r27
    5dde:	11 97       	sbiw	r26, 0x01	; 1
    5de0:	cd 01       	movw	r24, r26
    5de2:	0a f4       	brpl	.+2      	; 0x5de6 <lora_driver_sent_upload_message+0x10c>
    5de4:	01 96       	adiw	r24, 0x01	; 1
    5de6:	95 95       	asr	r25
    5de8:	87 95       	ror	r24
    5dea:	80 93 d7 08 	sts	0x08D7, r24	; 0x8008d7 <_downlink_payload+0x1>
    5dee:	af 01       	movw	r20, r30
    5df0:	4f 5f       	subi	r20, 0xFF	; 255
    5df2:	5f 4f       	sbci	r21, 0xFF	; 255
    5df4:	64 e1       	ldi	r22, 0x14	; 20
    5df6:	88 ed       	ldi	r24, 0xD8	; 216
    5df8:	98 e0       	ldi	r25, 0x08	; 8
    5dfa:	49 d1       	rcall	.+658    	; 0x608e <decode_hexadecimal_string_bytes>
    5dfc:	8e e0       	ldi	r24, 0x0E	; 14
    5dfe:	01 c0       	rjmp	.+2      	; 0x5e02 <lora_driver_sent_upload_message+0x128>
    5e00:	84 e1       	ldi	r24, 0x14	; 20
    5e02:	0f 90       	pop	r0
    5e04:	df 91       	pop	r29
    5e06:	cf 91       	pop	r28
    5e08:	08 95       	ret

00005e0a <lora_driver_set_adaptive_data_rate>:
    5e0a:	81 30       	cpi	r24, 0x01	; 1
    5e0c:	19 f0       	breq	.+6      	; 0x5e14 <lora_driver_set_adaptive_data_rate+0xa>
    5e0e:	67 e7       	ldi	r22, 0x77	; 119
    5e10:	75 e0       	ldi	r23, 0x05	; 5
    5e12:	02 c0       	rjmp	.+4      	; 0x5e18 <lora_driver_set_adaptive_data_rate+0xe>
    5e14:	67 e3       	ldi	r22, 0x37	; 55
    5e16:	76 e0       	ldi	r23, 0x06	; 6
    5e18:	8b e7       	ldi	r24, 0x7B	; 123
    5e1a:	95 e0       	ldi	r25, 0x05	; 5
    5e1c:	7a ce       	rjmp	.-780    	; 0x5b12 <_upload_message_rc>
    5e1e:	08 95       	ret

00005e20 <lora_driver_configure_to_eu868>:
    5e20:	2f 92       	push	r2
    5e22:	3f 92       	push	r3
    5e24:	4f 92       	push	r4
    5e26:	5f 92       	push	r5
    5e28:	6f 92       	push	r6
    5e2a:	7f 92       	push	r7
    5e2c:	8f 92       	push	r8
    5e2e:	9f 92       	push	r9
    5e30:	af 92       	push	r10
    5e32:	bf 92       	push	r11
    5e34:	cf 92       	push	r12
    5e36:	df 92       	push	r13
    5e38:	ef 92       	push	r14
    5e3a:	ff 92       	push	r15
    5e3c:	0f 93       	push	r16
    5e3e:	1f 93       	push	r17
    5e40:	cf 93       	push	r28
    5e42:	df 93       	push	r29
    5e44:	cd b7       	in	r28, 0x3d	; 61
    5e46:	de b7       	in	r29, 0x3e	; 62
    5e48:	a0 97       	sbiw	r28, 0x20	; 32
    5e4a:	0f b6       	in	r0, 0x3f	; 63
    5e4c:	f8 94       	cli
    5e4e:	de bf       	out	0x3e, r29	; 62
    5e50:	0f be       	out	0x3f, r0	; 63
    5e52:	cd bf       	out	0x3d, r28	; 61
    5e54:	60 ec       	ldi	r22, 0xC0	; 192
    5e56:	75 e0       	ldi	r23, 0x05	; 5
    5e58:	8c ec       	ldi	r24, 0xCC	; 204
    5e5a:	95 e0       	ldi	r25, 0x05	; 5
    5e5c:	c7 dd       	rcall	.-1138   	; 0x59ec <_upload_message>
    5e5e:	1e de       	rcall	.-964    	; 0x5a9c <_reply2return_code>
    5e60:	81 11       	cpse	r24, r1
    5e62:	a3 c0       	rjmp	.+326    	; 0x5faa <lora_driver_configure_to_eu868+0x18a>
    5e64:	80 e2       	ldi	r24, 0x20	; 32
    5e66:	e8 e2       	ldi	r30, 0x28	; 40
    5e68:	f4 e0       	ldi	r31, 0x04	; 4
    5e6a:	de 01       	movw	r26, r28
    5e6c:	11 96       	adiw	r26, 0x01	; 1
    5e6e:	01 90       	ld	r0, Z+
    5e70:	0d 92       	st	X+, r0
    5e72:	8a 95       	dec	r24
    5e74:	e1 f7       	brne	.-8      	; 0x5e6e <lora_driver_configure_to_eu868+0x4e>
    5e76:	9e 01       	movw	r18, r28
    5e78:	2f 5f       	subi	r18, 0xFF	; 255
    5e7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e7c:	69 01       	movw	r12, r18
    5e7e:	e1 2c       	mov	r14, r1
    5e80:	f1 2c       	mov	r15, r1
    5e82:	0f 2e       	mov	r0, r31
    5e84:	f8 ed       	ldi	r31, 0xD8	; 216
    5e86:	af 2e       	mov	r10, r31
    5e88:	f5 e0       	ldi	r31, 0x05	; 5
    5e8a:	bf 2e       	mov	r11, r31
    5e8c:	f0 2d       	mov	r31, r0
    5e8e:	0e e2       	ldi	r16, 0x2E	; 46
    5e90:	19 e0       	ldi	r17, 0x09	; 9
    5e92:	0f 2e       	mov	r0, r31
    5e94:	f1 ef       	ldi	r31, 0xF1	; 241
    5e96:	4f 2e       	mov	r4, r31
    5e98:	f5 e0       	ldi	r31, 0x05	; 5
    5e9a:	5f 2e       	mov	r5, r31
    5e9c:	f0 2d       	mov	r31, r0
    5e9e:	0f 2e       	mov	r0, r31
    5ea0:	f8 e0       	ldi	r31, 0x08	; 8
    5ea2:	8f 2e       	mov	r8, r31
    5ea4:	f6 e0       	ldi	r31, 0x06	; 6
    5ea6:	9f 2e       	mov	r9, r31
    5ea8:	f0 2d       	mov	r31, r0
    5eaa:	0f 2e       	mov	r0, r31
    5eac:	f2 e2       	ldi	r31, 0x22	; 34
    5eae:	6f 2e       	mov	r6, r31
    5eb0:	f6 e0       	ldi	r31, 0x06	; 6
    5eb2:	7f 2e       	mov	r7, r31
    5eb4:	f0 2d       	mov	r31, r0
    5eb6:	3e 2c       	mov	r3, r14
    5eb8:	2f 2c       	mov	r2, r15
    5eba:	ff 92       	push	r15
    5ebc:	ef 92       	push	r14
    5ebe:	bf 92       	push	r11
    5ec0:	af 92       	push	r10
    5ec2:	1f 93       	push	r17
    5ec4:	0f 93       	push	r16
    5ec6:	0e 94 ef 3a 	call	0x75de	; 0x75de <sprintf>
    5eca:	60 e0       	ldi	r22, 0x00	; 0
    5ecc:	70 e0       	ldi	r23, 0x00	; 0
    5ece:	c8 01       	movw	r24, r16
    5ed0:	8d dd       	rcall	.-1254   	; 0x59ec <_upload_message>
    5ed2:	e4 dd       	rcall	.-1080   	; 0x5a9c <_reply2return_code>
    5ed4:	0f 90       	pop	r0
    5ed6:	0f 90       	pop	r0
    5ed8:	0f 90       	pop	r0
    5eda:	0f 90       	pop	r0
    5edc:	0f 90       	pop	r0
    5ede:	0f 90       	pop	r0
    5ee0:	81 11       	cpse	r24, r1
    5ee2:	63 c0       	rjmp	.+198    	; 0x5faa <lora_driver_configure_to_eu868+0x18a>
    5ee4:	32 e0       	ldi	r19, 0x02	; 2
    5ee6:	3e 15       	cp	r19, r14
    5ee8:	e8 f4       	brcc	.+58     	; 0x5f24 <lora_driver_configure_to_eu868+0x104>
    5eea:	f6 01       	movw	r30, r12
    5eec:	83 81       	ldd	r24, Z+3	; 0x03
    5eee:	8f 93       	push	r24
    5ef0:	82 81       	ldd	r24, Z+2	; 0x02
    5ef2:	8f 93       	push	r24
    5ef4:	81 81       	ldd	r24, Z+1	; 0x01
    5ef6:	8f 93       	push	r24
    5ef8:	80 81       	ld	r24, Z
    5efa:	8f 93       	push	r24
    5efc:	ff 92       	push	r15
    5efe:	ef 92       	push	r14
    5f00:	5f 92       	push	r5
    5f02:	4f 92       	push	r4
    5f04:	1f 93       	push	r17
    5f06:	0f 93       	push	r16
    5f08:	0e 94 ef 3a 	call	0x75de	; 0x75de <sprintf>
    5f0c:	60 e0       	ldi	r22, 0x00	; 0
    5f0e:	70 e0       	ldi	r23, 0x00	; 0
    5f10:	c8 01       	movw	r24, r16
    5f12:	6c dd       	rcall	.-1320   	; 0x59ec <_upload_message>
    5f14:	c3 dd       	rcall	.-1146   	; 0x5a9c <_reply2return_code>
    5f16:	0f b6       	in	r0, 0x3f	; 63
    5f18:	f8 94       	cli
    5f1a:	de bf       	out	0x3e, r29	; 62
    5f1c:	0f be       	out	0x3f, r0	; 63
    5f1e:	cd bf       	out	0x3d, r28	; 61
    5f20:	81 11       	cpse	r24, r1
    5f22:	43 c0       	rjmp	.+134    	; 0x5faa <lora_driver_configure_to_eu868+0x18a>
    5f24:	2f 92       	push	r2
    5f26:	3f 92       	push	r3
    5f28:	9f 92       	push	r9
    5f2a:	8f 92       	push	r8
    5f2c:	1f 93       	push	r17
    5f2e:	0f 93       	push	r16
    5f30:	0e 94 ef 3a 	call	0x75de	; 0x75de <sprintf>
    5f34:	60 e0       	ldi	r22, 0x00	; 0
    5f36:	70 e0       	ldi	r23, 0x00	; 0
    5f38:	c8 01       	movw	r24, r16
    5f3a:	58 dd       	rcall	.-1360   	; 0x59ec <_upload_message>
    5f3c:	af dd       	rcall	.-1186   	; 0x5a9c <_reply2return_code>
    5f3e:	0f 90       	pop	r0
    5f40:	0f 90       	pop	r0
    5f42:	0f 90       	pop	r0
    5f44:	0f 90       	pop	r0
    5f46:	0f 90       	pop	r0
    5f48:	0f 90       	pop	r0
    5f4a:	81 11       	cpse	r24, r1
    5f4c:	2e c0       	rjmp	.+92     	; 0x5faa <lora_driver_configure_to_eu868+0x18a>
    5f4e:	2f 92       	push	r2
    5f50:	3f 92       	push	r3
    5f52:	7f 92       	push	r7
    5f54:	6f 92       	push	r6
    5f56:	1f 93       	push	r17
    5f58:	0f 93       	push	r16
    5f5a:	0e 94 ef 3a 	call	0x75de	; 0x75de <sprintf>
    5f5e:	60 e0       	ldi	r22, 0x00	; 0
    5f60:	70 e0       	ldi	r23, 0x00	; 0
    5f62:	c8 01       	movw	r24, r16
    5f64:	43 dd       	rcall	.-1402   	; 0x59ec <_upload_message>
    5f66:	9a dd       	rcall	.-1228   	; 0x5a9c <_reply2return_code>
    5f68:	0f 90       	pop	r0
    5f6a:	0f 90       	pop	r0
    5f6c:	0f 90       	pop	r0
    5f6e:	0f 90       	pop	r0
    5f70:	0f 90       	pop	r0
    5f72:	0f 90       	pop	r0
    5f74:	81 11       	cpse	r24, r1
    5f76:	19 c0       	rjmp	.+50     	; 0x5faa <lora_driver_configure_to_eu868+0x18a>
    5f78:	3f ef       	ldi	r19, 0xFF	; 255
    5f7a:	e3 1a       	sub	r14, r19
    5f7c:	f3 0a       	sbc	r15, r19
    5f7e:	84 e0       	ldi	r24, 0x04	; 4
    5f80:	c8 0e       	add	r12, r24
    5f82:	d1 1c       	adc	r13, r1
    5f84:	98 e0       	ldi	r25, 0x08	; 8
    5f86:	e9 16       	cp	r14, r25
    5f88:	f1 04       	cpc	r15, r1
    5f8a:	09 f0       	breq	.+2      	; 0x5f8e <lora_driver_configure_to_eu868+0x16e>
    5f8c:	94 cf       	rjmp	.-216    	; 0x5eb6 <lora_driver_configure_to_eu868+0x96>
    5f8e:	60 e0       	ldi	r22, 0x00	; 0
    5f90:	70 e0       	ldi	r23, 0x00	; 0
    5f92:	8a e3       	ldi	r24, 0x3A	; 58
    5f94:	96 e0       	ldi	r25, 0x06	; 6
    5f96:	2a dd       	rcall	.-1452   	; 0x59ec <_upload_message>
    5f98:	81 dd       	rcall	.-1278   	; 0x5a9c <_reply2return_code>
    5f9a:	81 11       	cpse	r24, r1
    5f9c:	06 c0       	rjmp	.+12     	; 0x5faa <lora_driver_configure_to_eu868+0x18a>
    5f9e:	60 e0       	ldi	r22, 0x00	; 0
    5fa0:	70 e0       	ldi	r23, 0x00	; 0
    5fa2:	8b e4       	ldi	r24, 0x4B	; 75
    5fa4:	96 e0       	ldi	r25, 0x06	; 6
    5fa6:	22 dd       	rcall	.-1468   	; 0x59ec <_upload_message>
    5fa8:	79 dd       	rcall	.-1294   	; 0x5a9c <_reply2return_code>
    5faa:	a0 96       	adiw	r28, 0x20	; 32
    5fac:	0f b6       	in	r0, 0x3f	; 63
    5fae:	f8 94       	cli
    5fb0:	de bf       	out	0x3e, r29	; 62
    5fb2:	0f be       	out	0x3f, r0	; 63
    5fb4:	cd bf       	out	0x3d, r28	; 61
    5fb6:	df 91       	pop	r29
    5fb8:	cf 91       	pop	r28
    5fba:	1f 91       	pop	r17
    5fbc:	0f 91       	pop	r16
    5fbe:	ff 90       	pop	r15
    5fc0:	ef 90       	pop	r14
    5fc2:	df 90       	pop	r13
    5fc4:	cf 90       	pop	r12
    5fc6:	bf 90       	pop	r11
    5fc8:	af 90       	pop	r10
    5fca:	9f 90       	pop	r9
    5fcc:	8f 90       	pop	r8
    5fce:	7f 90       	pop	r7
    5fd0:	6f 90       	pop	r6
    5fd2:	5f 90       	pop	r5
    5fd4:	4f 90       	pop	r4
    5fd6:	3f 90       	pop	r3
    5fd8:	2f 90       	pop	r2
    5fda:	08 95       	ret

00005fdc <lora_driver_set_otaa_identity>:
    5fdc:	ef 92       	push	r14
    5fde:	ff 92       	push	r15
    5fe0:	0f 93       	push	r16
    5fe2:	1f 93       	push	r17
    5fe4:	cf 93       	push	r28
    5fe6:	df 93       	push	r29
    5fe8:	ec 01       	movw	r28, r24
    5fea:	8b 01       	movw	r16, r22
    5fec:	7a 01       	movw	r14, r20
    5fee:	81 e0       	ldi	r24, 0x01	; 1
    5ff0:	0c df       	rcall	.-488    	; 0x5e0a <lora_driver_set_adaptive_data_rate>
    5ff2:	81 11       	cpse	r24, r1
    5ff4:	0d c0       	rjmp	.+26     	; 0x6010 <lora_driver_set_otaa_identity+0x34>
    5ff6:	ce 01       	movw	r24, r28
    5ff8:	25 de       	rcall	.-950    	; 0x5c44 <lora_driver_set_application_identifier>
    5ffa:	81 11       	cpse	r24, r1
    5ffc:	09 c0       	rjmp	.+18     	; 0x6010 <lora_driver_set_otaa_identity+0x34>
    5ffe:	c8 01       	movw	r24, r16
    6000:	32 de       	rcall	.-924    	; 0x5c66 <lora_driver_set_application_key>
    6002:	81 11       	cpse	r24, r1
    6004:	05 c0       	rjmp	.+10     	; 0x6010 <lora_driver_set_otaa_identity+0x34>
    6006:	c7 01       	movw	r24, r14
    6008:	0c de       	rcall	.-1000   	; 0x5c22 <lora_driver_set_device_identifier>
    600a:	81 11       	cpse	r24, r1
    600c:	01 c0       	rjmp	.+2      	; 0x6010 <lora_driver_set_otaa_identity+0x34>
    600e:	3c de       	rcall	.-904    	; 0x5c88 <lora_driver_save_mac>
    6010:	df 91       	pop	r29
    6012:	cf 91       	pop	r28
    6014:	1f 91       	pop	r17
    6016:	0f 91       	pop	r16
    6018:	ff 90       	pop	r15
    601a:	ef 90       	pop	r14
    601c:	08 95       	ret

0000601e <lora_driver_map_return_code_to_text>:
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	fc 01       	movw	r30, r24
    6022:	ee 0f       	add	r30, r30
    6024:	ff 1f       	adc	r31, r31
    6026:	8e 0f       	add	r24, r30
    6028:	9f 1f       	adc	r25, r31
    602a:	fc 01       	movw	r30, r24
    602c:	e9 5e       	subi	r30, 0xE9	; 233
    602e:	f8 4f       	sbci	r31, 0xF8	; 248
    6030:	81 81       	ldd	r24, Z+1	; 0x01
    6032:	92 81       	ldd	r25, Z+2	; 0x02
    6034:	08 95       	ret

00006036 <decode_port_no>:
    6036:	dc 01       	movw	r26, r24
    6038:	00 97       	sbiw	r24, 0x00	; 0
    603a:	29 f1       	breq	.+74     	; 0x6086 <decode_port_no+0x50>
    603c:	fb 01       	movw	r30, r22
    603e:	20 81       	ld	r18, Z
    6040:	fc 01       	movw	r30, r24
    6042:	01 90       	ld	r0, Z+
    6044:	00 20       	and	r0, r0
    6046:	e9 f7       	brne	.-6      	; 0x6042 <decode_port_no+0xc>
    6048:	31 97       	sbiw	r30, 0x01	; 1
    604a:	e8 1b       	sub	r30, r24
    604c:	f9 0b       	sbc	r31, r25
    604e:	82 2f       	mov	r24, r18
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	e8 17       	cp	r30, r24
    6054:	f9 07       	cpc	r31, r25
    6056:	c8 f0       	brcs	.+50     	; 0x608a <decode_port_no+0x54>
    6058:	80 e0       	ldi	r24, 0x00	; 0
    605a:	08 c0       	rjmp	.+16     	; 0x606c <decode_port_no+0x36>
    605c:	88 0f       	add	r24, r24
    605e:	38 2f       	mov	r19, r24
    6060:	33 0f       	add	r19, r19
    6062:	33 0f       	add	r19, r19
    6064:	83 0f       	add	r24, r19
    6066:	80 53       	subi	r24, 0x30	; 48
    6068:	89 0f       	add	r24, r25
    606a:	2f 5f       	subi	r18, 0xFF	; 255
    606c:	fd 01       	movw	r30, r26
    606e:	e2 0f       	add	r30, r18
    6070:	f1 1d       	adc	r31, r1
    6072:	90 81       	ld	r25, Z
    6074:	30 ed       	ldi	r19, 0xD0	; 208
    6076:	39 0f       	add	r19, r25
    6078:	3a 30       	cpi	r19, 0x0A	; 10
    607a:	10 f4       	brcc	.+4      	; 0x6080 <decode_port_no+0x4a>
    607c:	91 11       	cpse	r25, r1
    607e:	ee cf       	rjmp	.-36     	; 0x605c <decode_port_no+0x26>
    6080:	fb 01       	movw	r30, r22
    6082:	20 83       	st	Z, r18
    6084:	08 95       	ret
    6086:	80 e0       	ldi	r24, 0x00	; 0
    6088:	08 95       	ret
    608a:	80 e0       	ldi	r24, 0x00	; 0
    608c:	08 95       	ret

0000608e <decode_hexadecimal_string_bytes>:
    608e:	0f 93       	push	r16
    6090:	1f 93       	push	r17
    6092:	cf 93       	push	r28
    6094:	df 93       	push	r29
    6096:	dc 01       	movw	r26, r24
    6098:	ea 01       	movw	r28, r20
    609a:	20 97       	sbiw	r28, 0x00	; 0
    609c:	e1 f1       	breq	.+120    	; 0x6116 <decode_hexadecimal_string_bytes+0x88>
    609e:	fa 01       	movw	r30, r20
    60a0:	01 90       	ld	r0, Z+
    60a2:	00 20       	and	r0, r0
    60a4:	e9 f7       	brne	.-6      	; 0x60a0 <decode_hexadecimal_string_bytes+0x12>
    60a6:	31 97       	sbiw	r30, 0x01	; 1
    60a8:	e4 1b       	sub	r30, r20
    60aa:	f5 0b       	sbc	r31, r21
    60ac:	32 97       	sbiw	r30, 0x02	; 2
    60ae:	10 f5       	brcc	.+68     	; 0x60f4 <decode_hexadecimal_string_bytes+0x66>
    60b0:	32 c0       	rjmp	.+100    	; 0x6116 <decode_hexadecimal_string_bytes+0x88>
    60b2:	8d 01       	movw	r16, r26
    60b4:	04 0f       	add	r16, r20
    60b6:	15 1f       	adc	r17, r21
    60b8:	30 e0       	ldi	r19, 0x00	; 0
    60ba:	ae 01       	movw	r20, r28
    60bc:	42 0f       	add	r20, r18
    60be:	53 1f       	adc	r21, r19
    60c0:	fa 01       	movw	r30, r20
    60c2:	90 81       	ld	r25, Z
    60c4:	91 34       	cpi	r25, 0x41	; 65
    60c6:	28 f0       	brcs	.+10     	; 0x60d2 <decode_hexadecimal_string_bytes+0x44>
    60c8:	97 53       	subi	r25, 0x37	; 55
    60ca:	59 2f       	mov	r21, r25
    60cc:	52 95       	swap	r21
    60ce:	50 7f       	andi	r21, 0xF0	; 240
    60d0:	03 c0       	rjmp	.+6      	; 0x60d8 <decode_hexadecimal_string_bytes+0x4a>
    60d2:	59 2f       	mov	r21, r25
    60d4:	52 95       	swap	r21
    60d6:	50 7f       	andi	r21, 0xF0	; 240
    60d8:	2c 0f       	add	r18, r28
    60da:	3d 1f       	adc	r19, r29
    60dc:	f9 01       	movw	r30, r18
    60de:	91 81       	ldd	r25, Z+1	; 0x01
    60e0:	91 34       	cpi	r25, 0x41	; 65
    60e2:	10 f0       	brcs	.+4      	; 0x60e8 <decode_hexadecimal_string_bytes+0x5a>
    60e4:	97 53       	subi	r25, 0x37	; 55
    60e6:	01 c0       	rjmp	.+2      	; 0x60ea <decode_hexadecimal_string_bytes+0x5c>
    60e8:	90 53       	subi	r25, 0x30	; 48
    60ea:	95 0f       	add	r25, r21
    60ec:	f8 01       	movw	r30, r16
    60ee:	90 83       	st	Z, r25
    60f0:	8f 5f       	subi	r24, 0xFF	; 255
    60f2:	01 c0       	rjmp	.+2      	; 0x60f6 <decode_hexadecimal_string_bytes+0x68>
    60f4:	80 e0       	ldi	r24, 0x00	; 0
    60f6:	28 2f       	mov	r18, r24
    60f8:	22 0f       	add	r18, r18
    60fa:	48 2f       	mov	r20, r24
    60fc:	50 e0       	ldi	r21, 0x00	; 0
    60fe:	fe 01       	movw	r30, r28
    6100:	01 90       	ld	r0, Z+
    6102:	00 20       	and	r0, r0
    6104:	e9 f7       	brne	.-6      	; 0x6100 <decode_hexadecimal_string_bytes+0x72>
    6106:	31 97       	sbiw	r30, 0x01	; 1
    6108:	ec 1b       	sub	r30, r28
    610a:	fd 0b       	sbc	r31, r29
    610c:	4e 17       	cp	r20, r30
    610e:	5f 07       	cpc	r21, r31
    6110:	10 f4       	brcc	.+4      	; 0x6116 <decode_hexadecimal_string_bytes+0x88>
    6112:	86 13       	cpse	r24, r22
    6114:	ce cf       	rjmp	.-100    	; 0x60b2 <decode_hexadecimal_string_bytes+0x24>
    6116:	df 91       	pop	r29
    6118:	cf 91       	pop	r28
    611a:	1f 91       	pop	r17
    611c:	0f 91       	pop	r16
    611e:	08 95       	ret

00006120 <reg_read_register>:
    6120:	fc 01       	movw	r30, r24
    6122:	80 81       	ld	r24, Z
    6124:	08 95       	ret

00006126 <reg_read_bit>:
    6126:	fc 01       	movw	r30, r24
    6128:	20 81       	ld	r18, Z
    612a:	81 e0       	ldi	r24, 0x01	; 1
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	02 c0       	rjmp	.+4      	; 0x6134 <reg_read_bit+0xe>
    6130:	88 0f       	add	r24, r24
    6132:	99 1f       	adc	r25, r25
    6134:	6a 95       	dec	r22
    6136:	e2 f7       	brpl	.-8      	; 0x6130 <reg_read_bit+0xa>
    6138:	82 23       	and	r24, r18
    613a:	08 95       	ret

0000613c <reg_read_bits>:
    613c:	fc 01       	movw	r30, r24
    613e:	80 81       	ld	r24, Z
    6140:	86 23       	and	r24, r22
    6142:	08 95       	ret

00006144 <reg_set_register>:
    6144:	fc 01       	movw	r30, r24
    6146:	60 83       	st	Z, r22
    6148:	08 95       	ret

0000614a <reg_clear_register>:
    614a:	fc 01       	movw	r30, r24
    614c:	10 82       	st	Z, r1
    614e:	08 95       	ret

00006150 <reg_set_bit>:
    6150:	fc 01       	movw	r30, r24
    6152:	40 81       	ld	r20, Z
    6154:	21 e0       	ldi	r18, 0x01	; 1
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	02 c0       	rjmp	.+4      	; 0x615e <reg_set_bit+0xe>
    615a:	22 0f       	add	r18, r18
    615c:	33 1f       	adc	r19, r19
    615e:	6a 95       	dec	r22
    6160:	e2 f7       	brpl	.-8      	; 0x615a <reg_set_bit+0xa>
    6162:	24 2b       	or	r18, r20
    6164:	20 83       	st	Z, r18
    6166:	08 95       	ret

00006168 <reg_set_bits>:
    6168:	fc 01       	movw	r30, r24
    616a:	20 81       	ld	r18, Z
    616c:	62 2b       	or	r22, r18
    616e:	60 83       	st	Z, r22
    6170:	08 95       	ret

00006172 <reg_toggle_bit>:
    6172:	fc 01       	movw	r30, r24
    6174:	40 81       	ld	r20, Z
    6176:	21 e0       	ldi	r18, 0x01	; 1
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <reg_toggle_bit+0xe>
    617c:	22 0f       	add	r18, r18
    617e:	33 1f       	adc	r19, r19
    6180:	6a 95       	dec	r22
    6182:	e2 f7       	brpl	.-8      	; 0x617c <reg_toggle_bit+0xa>
    6184:	24 27       	eor	r18, r20
    6186:	20 83       	st	Z, r18
    6188:	08 95       	ret

0000618a <reg_toggle_bits>:
    618a:	fc 01       	movw	r30, r24
    618c:	20 81       	ld	r18, Z
    618e:	62 27       	eor	r22, r18
    6190:	60 83       	st	Z, r22
    6192:	08 95       	ret

00006194 <reg_clear_bit>:
    6194:	fc 01       	movw	r30, r24
    6196:	90 81       	ld	r25, Z
    6198:	21 e0       	ldi	r18, 0x01	; 1
    619a:	30 e0       	ldi	r19, 0x00	; 0
    619c:	02 c0       	rjmp	.+4      	; 0x61a2 <reg_clear_bit+0xe>
    619e:	22 0f       	add	r18, r18
    61a0:	33 1f       	adc	r19, r19
    61a2:	6a 95       	dec	r22
    61a4:	e2 f7       	brpl	.-8      	; 0x619e <reg_clear_bit+0xa>
    61a6:	20 95       	com	r18
    61a8:	29 23       	and	r18, r25
    61aa:	20 83       	st	Z, r18
    61ac:	08 95       	ret

000061ae <reg_clear_bits>:
    61ae:	fc 01       	movw	r30, r24
    61b0:	90 81       	ld	r25, Z
    61b2:	60 95       	com	r22
    61b4:	69 23       	and	r22, r25
    61b6:	60 83       	st	Z, r22
    61b8:	08 95       	ret

000061ba <_serial_call_back>:
    61ba:	80 91 8b 09 	lds	r24, 0x098B	; 0x80098b <crc_sum.1941>
    61be:	86 0f       	add	r24, r22
    61c0:	80 93 8b 09 	sts	0x098B, r24	; 0x80098b <crc_sum.1941>
    61c4:	90 91 8e 09 	lds	r25, 0x098E	; 0x80098e <_mh_state>
    61c8:	91 30       	cpi	r25, 0x01	; 1
    61ca:	79 f0       	breq	.+30     	; 0x61ea <_serial_call_back+0x30>
    61cc:	28 f0       	brcs	.+10     	; 0x61d8 <_serial_call_back+0x1e>
    61ce:	92 30       	cpi	r25, 0x02	; 2
    61d0:	a9 f0       	breq	.+42     	; 0x61fc <_serial_call_back+0x42>
    61d2:	93 30       	cpi	r25, 0x03	; 3
    61d4:	19 f1       	breq	.+70     	; 0x621c <_serial_call_back+0x62>
    61d6:	08 95       	ret
    61d8:	6f 3f       	cpi	r22, 0xFF	; 255
    61da:	09 f0       	breq	.+2      	; 0x61de <_serial_call_back+0x24>
    61dc:	48 c0       	rjmp	.+144    	; 0x626e <_serial_call_back+0xb4>
    61de:	10 92 8b 09 	sts	0x098B, r1	; 0x80098b <crc_sum.1941>
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <_mh_state>
    61e8:	08 95       	ret
    61ea:	66 38       	cpi	r22, 0x86	; 134
    61ec:	09 f0       	breq	.+2      	; 0x61f0 <_serial_call_back+0x36>
    61ee:	3f c0       	rjmp	.+126    	; 0x626e <_serial_call_back+0xb4>
    61f0:	10 92 8a 09 	sts	0x098A, r1	; 0x80098a <inDex.1939>
    61f4:	82 e0       	ldi	r24, 0x02	; 2
    61f6:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <_mh_state>
    61fa:	08 95       	ret
    61fc:	e0 91 8a 09 	lds	r30, 0x098A	; 0x80098a <inDex.1939>
    6200:	81 e0       	ldi	r24, 0x01	; 1
    6202:	8e 0f       	add	r24, r30
    6204:	80 93 8a 09 	sts	0x098A, r24	; 0x80098a <inDex.1939>
    6208:	f0 e0       	ldi	r31, 0x00	; 0
    620a:	e8 57       	subi	r30, 0x78	; 120
    620c:	f6 4f       	sbci	r31, 0xF6	; 246
    620e:	60 83       	st	Z, r22
    6210:	82 30       	cpi	r24, 0x02	; 2
    6212:	69 f5       	brne	.+90     	; 0x626e <_serial_call_back+0xb4>
    6214:	83 e0       	ldi	r24, 0x03	; 3
    6216:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <_mh_state>
    621a:	08 95       	ret
    621c:	90 91 8a 09 	lds	r25, 0x098A	; 0x80098a <inDex.1939>
    6220:	21 e0       	ldi	r18, 0x01	; 1
    6222:	29 0f       	add	r18, r25
    6224:	20 93 8a 09 	sts	0x098A, r18	; 0x80098a <inDex.1939>
    6228:	96 30       	cpi	r25, 0x06	; 6
    622a:	09 f5       	brne	.+66     	; 0x626e <_serial_call_back+0xb4>
    622c:	81 11       	cpse	r24, r1
    622e:	0e c0       	rjmp	.+28     	; 0x624c <_serial_call_back+0x92>
    6230:	e8 e8       	ldi	r30, 0x88	; 136
    6232:	f9 e0       	ldi	r31, 0x09	; 9
    6234:	80 81       	ld	r24, Z
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	98 2f       	mov	r25, r24
    623a:	88 27       	eor	r24, r24
    623c:	21 81       	ldd	r18, Z+1	; 0x01
    623e:	82 0f       	add	r24, r18
    6240:	91 1d       	adc	r25, r1
    6242:	90 93 90 09 	sts	0x0990, r25	; 0x800990 <_ppm+0x1>
    6246:	80 93 8f 09 	sts	0x098F, r24	; 0x80098f <_ppm>
    624a:	04 c0       	rjmp	.+8      	; 0x6254 <_serial_call_back+0x9a>
    624c:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <_ppm+0x1>
    6250:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <_ppm>
    6254:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <_mh_state>
    6258:	e0 91 8c 09 	lds	r30, 0x098C	; 0x80098c <_app_call_back>
    625c:	f0 91 8d 09 	lds	r31, 0x098D	; 0x80098d <_app_call_back+0x1>
    6260:	30 97       	sbiw	r30, 0x00	; 0
    6262:	29 f0       	breq	.+10     	; 0x626e <_serial_call_back+0xb4>
    6264:	80 91 8f 09 	lds	r24, 0x098F	; 0x80098f <_ppm>
    6268:	90 91 90 09 	lds	r25, 0x0990	; 0x800990 <_ppm+0x1>
    626c:	19 95       	eicall
    626e:	08 95       	ret

00006270 <mh_z19_create>:
    6270:	8f 92       	push	r8
    6272:	9f 92       	push	r9
    6274:	af 92       	push	r10
    6276:	cf 92       	push	r12
    6278:	ef 92       	push	r14
    627a:	0f 93       	push	r16
    627c:	cf 93       	push	r28
    627e:	df 93       	push	r29
    6280:	eb 01       	movw	r28, r22
    6282:	0f 2e       	mov	r0, r31
    6284:	fd ed       	ldi	r31, 0xDD	; 221
    6286:	8f 2e       	mov	r8, r31
    6288:	f0 e3       	ldi	r31, 0x30	; 48
    628a:	9f 2e       	mov	r9, r31
    628c:	f0 2d       	mov	r31, r0
    628e:	68 94       	set
    6290:	aa 24       	eor	r10, r10
    6292:	a4 f8       	bld	r10, 4
    6294:	68 94       	set
    6296:	cc 24       	eor	r12, r12
    6298:	c4 f8       	bld	r12, 4
    629a:	e1 2c       	mov	r14, r1
    629c:	00 e0       	ldi	r16, 0x00	; 0
    629e:	23 e0       	ldi	r18, 0x03	; 3
    62a0:	40 e8       	ldi	r20, 0x80	; 128
    62a2:	55 e2       	ldi	r21, 0x25	; 37
    62a4:	60 e0       	ldi	r22, 0x00	; 0
    62a6:	70 e0       	ldi	r23, 0x00	; 0
    62a8:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <serial_new_instance>
    62ac:	90 93 92 09 	sts	0x0992, r25	; 0x800992 <_serial+0x1>
    62b0:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <_serial>
    62b4:	d0 93 8d 09 	sts	0x098D, r29	; 0x80098d <_app_call_back+0x1>
    62b8:	c0 93 8c 09 	sts	0x098C, r28	; 0x80098c <_app_call_back>
    62bc:	df 91       	pop	r29
    62be:	cf 91       	pop	r28
    62c0:	0f 91       	pop	r16
    62c2:	ef 90       	pop	r14
    62c4:	cf 90       	pop	r12
    62c6:	af 90       	pop	r10
    62c8:	9f 90       	pop	r9
    62ca:	8f 90       	pop	r8
    62cc:	08 95       	ret

000062ce <mh_z19_take_meassuring>:
    62ce:	cf 93       	push	r28
    62d0:	df 93       	push	r29
    62d2:	cd b7       	in	r28, 0x3d	; 61
    62d4:	de b7       	in	r29, 0x3e	; 62
    62d6:	29 97       	sbiw	r28, 0x09	; 9
    62d8:	0f b6       	in	r0, 0x3f	; 63
    62da:	f8 94       	cli
    62dc:	de bf       	out	0x3e, r29	; 62
    62de:	0f be       	out	0x3f, r0	; 63
    62e0:	cd bf       	out	0x3d, r28	; 61
    62e2:	89 e0       	ldi	r24, 0x09	; 9
    62e4:	e8 e4       	ldi	r30, 0x48	; 72
    62e6:	f4 e0       	ldi	r31, 0x04	; 4
    62e8:	9e 01       	movw	r18, r28
    62ea:	2f 5f       	subi	r18, 0xFF	; 255
    62ec:	3f 4f       	sbci	r19, 0xFF	; 255
    62ee:	d9 01       	movw	r26, r18
    62f0:	01 90       	ld	r0, Z+
    62f2:	0d 92       	st	X+, r0
    62f4:	8a 95       	dec	r24
    62f6:	e1 f7       	brne	.-8      	; 0x62f0 <mh_z19_take_meassuring+0x22>
    62f8:	10 92 90 09 	sts	0x0990, r1	; 0x800990 <_ppm+0x1>
    62fc:	10 92 8f 09 	sts	0x098F, r1	; 0x80098f <_ppm>
    6300:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <_serial>
    6304:	90 91 92 09 	lds	r25, 0x0992	; 0x800992 <_serial+0x1>
    6308:	00 97       	sbiw	r24, 0x00	; 0
    630a:	39 f0       	breq	.+14     	; 0x631a <mh_z19_take_meassuring+0x4c>
    630c:	42 2f       	mov	r20, r18
    630e:	53 2f       	mov	r21, r19
    6310:	69 e0       	ldi	r22, 0x09	; 9
    6312:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <serial_send_bytes>
    6316:	80 e0       	ldi	r24, 0x00	; 0
    6318:	01 c0       	rjmp	.+2      	; 0x631c <mh_z19_take_meassuring+0x4e>
    631a:	82 e0       	ldi	r24, 0x02	; 2
    631c:	29 96       	adiw	r28, 0x09	; 9
    631e:	0f b6       	in	r0, 0x3f	; 63
    6320:	f8 94       	cli
    6322:	de bf       	out	0x3e, r29	; 62
    6324:	0f be       	out	0x3f, r0	; 63
    6326:	cd bf       	out	0x3d, r28	; 61
    6328:	df 91       	pop	r29
    632a:	cf 91       	pop	r28
    632c:	08 95       	ret

0000632e <_initTwiInterface>:
    632e:	80 91 a1 09 	lds	r24, 0x09A1	; 0x8009a1 <_twiIsInitiated>
    6332:	81 11       	cpse	r24, r1
    6334:	0c c0       	rjmp	.+24     	; 0x634e <_initTwiInterface+0x20>
    6336:	8c e0       	ldi	r24, 0x0C	; 12
    6338:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    633c:	8f ef       	ldi	r24, 0xFF	; 255
    633e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6342:	84 e0       	ldi	r24, 0x04	; 4
    6344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6348:	81 e0       	ldi	r24, 0x01	; 1
    634a:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <_twiIsInitiated>
    634e:	08 95       	ret

00006350 <twiCreate>:
    6350:	af 92       	push	r10
    6352:	bf 92       	push	r11
    6354:	cf 92       	push	r12
    6356:	df 92       	push	r13
    6358:	ef 92       	push	r14
    635a:	ff 92       	push	r15
    635c:	0f 93       	push	r16
    635e:	1f 93       	push	r17
    6360:	cf 93       	push	r28
    6362:	df 93       	push	r29
    6364:	a8 2e       	mov	r10, r24
    6366:	b6 2e       	mov	r11, r22
    6368:	69 01       	movw	r12, r18
    636a:	7a 01       	movw	r14, r20
    636c:	84 e0       	ldi	r24, 0x04	; 4
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	6a d6       	rcall	.+3284   	; 0x7046 <malloc>
    6372:	ec 01       	movw	r28, r24
    6374:	89 2b       	or	r24, r25
    6376:	61 f1       	breq	.+88     	; 0x63d0 <twiCreate+0x80>
    6378:	a8 82       	st	Y, r10
    637a:	81 e0       	ldi	r24, 0x01	; 1
    637c:	b8 12       	cpse	r11, r24
    637e:	12 c0       	rjmp	.+36     	; 0x63a4 <twiCreate+0x54>
    6380:	c7 01       	movw	r24, r14
    6382:	b6 01       	movw	r22, r12
    6384:	20 ea       	ldi	r18, 0xA0	; 160
    6386:	36 e8       	ldi	r19, 0x86	; 134
    6388:	41 e0       	ldi	r20, 0x01	; 1
    638a:	50 e0       	ldi	r21, 0x00	; 0
    638c:	18 d6       	rcall	.+3120   	; 0x6fbe <__udivmodsi4>
    638e:	da 01       	movw	r26, r20
    6390:	c9 01       	movw	r24, r18
    6392:	40 97       	sbiw	r24, 0x10	; 16
    6394:	a1 09       	sbc	r26, r1
    6396:	b1 09       	sbc	r27, r1
    6398:	b6 95       	lsr	r27
    639a:	a7 95       	ror	r26
    639c:	97 95       	ror	r25
    639e:	87 95       	ror	r24
    63a0:	89 83       	std	Y+1, r24	; 0x01
    63a2:	11 c0       	rjmp	.+34     	; 0x63c6 <twiCreate+0x76>
    63a4:	c7 01       	movw	r24, r14
    63a6:	b6 01       	movw	r22, r12
    63a8:	20 e8       	ldi	r18, 0x80	; 128
    63aa:	3a e1       	ldi	r19, 0x1A	; 26
    63ac:	46 e0       	ldi	r20, 0x06	; 6
    63ae:	50 e0       	ldi	r21, 0x00	; 0
    63b0:	06 d6       	rcall	.+3084   	; 0x6fbe <__udivmodsi4>
    63b2:	da 01       	movw	r26, r20
    63b4:	c9 01       	movw	r24, r18
    63b6:	40 97       	sbiw	r24, 0x10	; 16
    63b8:	a1 09       	sbc	r26, r1
    63ba:	b1 09       	sbc	r27, r1
    63bc:	b6 95       	lsr	r27
    63be:	a7 95       	ror	r26
    63c0:	97 95       	ror	r25
    63c2:	87 95       	ror	r24
    63c4:	89 83       	std	Y+1, r24	; 0x01
    63c6:	1b 83       	std	Y+3, r17	; 0x03
    63c8:	0a 83       	std	Y+2, r16	; 0x02
    63ca:	8c 2f       	mov	r24, r28
    63cc:	9d 2f       	mov	r25, r29
    63ce:	02 c0       	rjmp	.+4      	; 0x63d4 <twiCreate+0x84>
    63d0:	80 e0       	ldi	r24, 0x00	; 0
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	df 91       	pop	r29
    63d6:	cf 91       	pop	r28
    63d8:	1f 91       	pop	r17
    63da:	0f 91       	pop	r16
    63dc:	ff 90       	pop	r15
    63de:	ef 90       	pop	r14
    63e0:	df 90       	pop	r13
    63e2:	cf 90       	pop	r12
    63e4:	bf 90       	pop	r11
    63e6:	af 90       	pop	r10
    63e8:	08 95       	ret

000063ea <twiIsBusy>:
    63ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    63ee:	81 70       	andi	r24, 0x01	; 1
    63f0:	08 95       	ret

000063f2 <twiTransmit>:
    63f2:	ff 92       	push	r15
    63f4:	0f 93       	push	r16
    63f6:	1f 93       	push	r17
    63f8:	cf 93       	push	r28
    63fa:	df 93       	push	r29
    63fc:	00 97       	sbiw	r24, 0x00	; 0
    63fe:	d1 f1       	breq	.+116    	; 0x6474 <twiTransmit+0x82>
    6400:	4a 30       	cpi	r20, 0x0A	; 10
    6402:	d0 f5       	brcc	.+116    	; 0x6478 <twiTransmit+0x86>
    6404:	f4 2e       	mov	r15, r20
    6406:	8b 01       	movw	r16, r22
    6408:	ec 01       	movw	r28, r24
    640a:	ef df       	rcall	.-34     	; 0x63ea <twiIsBusy>
    640c:	81 11       	cpse	r24, r1
    640e:	36 c0       	rjmp	.+108    	; 0x647c <twiTransmit+0x8a>
    6410:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <_twiCurrentHandler>
    6414:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <_twiCurrentHandler+0x1>
    6418:	c8 17       	cp	r28, r24
    641a:	d9 07       	cpc	r29, r25
    641c:	41 f0       	breq	.+16     	; 0x642e <twiTransmit+0x3c>
    641e:	87 df       	rcall	.-242    	; 0x632e <_initTwiInterface>
    6420:	89 81       	ldd	r24, Y+1	; 0x01
    6422:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    6426:	d0 93 95 09 	sts	0x0995, r29	; 0x800995 <_twiCurrentHandler+0x1>
    642a:	c0 93 94 09 	sts	0x0994, r28	; 0x800994 <_twiCurrentHandler>
    642e:	81 e0       	ldi	r24, 0x01	; 1
    6430:	8f 0d       	add	r24, r15
    6432:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <_twiMessageLen>
    6436:	88 81       	ld	r24, Y
    6438:	88 0f       	add	r24, r24
    643a:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <_twiMessageBuffer>
    643e:	ff 20       	and	r15, r15
    6440:	89 f0       	breq	.+34     	; 0x6464 <twiTransmit+0x72>
    6442:	f8 01       	movw	r30, r16
    6444:	a8 e9       	ldi	r26, 0x98	; 152
    6446:	b9 e0       	ldi	r27, 0x09	; 9
    6448:	4f ef       	ldi	r20, 0xFF	; 255
    644a:	4f 0d       	add	r20, r15
    644c:	64 2f       	mov	r22, r20
    644e:	70 e0       	ldi	r23, 0x00	; 0
    6450:	cb 01       	movw	r24, r22
    6452:	01 96       	adiw	r24, 0x01	; 1
    6454:	b8 01       	movw	r22, r16
    6456:	68 0f       	add	r22, r24
    6458:	79 1f       	adc	r23, r25
    645a:	81 91       	ld	r24, Z+
    645c:	8d 93       	st	X+, r24
    645e:	e6 17       	cp	r30, r22
    6460:	f7 07       	cpc	r31, r23
    6462:	d9 f7       	brne	.-10     	; 0x645a <twiTransmit+0x68>
    6464:	88 ef       	ldi	r24, 0xF8	; 248
    6466:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    646a:	85 ea       	ldi	r24, 0xA5	; 165
    646c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6470:	84 e0       	ldi	r24, 0x04	; 4
    6472:	05 c0       	rjmp	.+10     	; 0x647e <twiTransmit+0x8c>
    6474:	86 e0       	ldi	r24, 0x06	; 6
    6476:	03 c0       	rjmp	.+6      	; 0x647e <twiTransmit+0x8c>
    6478:	87 e0       	ldi	r24, 0x07	; 7
    647a:	01 c0       	rjmp	.+2      	; 0x647e <twiTransmit+0x8c>
    647c:	82 e0       	ldi	r24, 0x02	; 2
    647e:	df 91       	pop	r29
    6480:	cf 91       	pop	r28
    6482:	1f 91       	pop	r17
    6484:	0f 91       	pop	r16
    6486:	ff 90       	pop	r15
    6488:	08 95       	ret

0000648a <twiReceive>:
    648a:	1f 93       	push	r17
    648c:	cf 93       	push	r28
    648e:	df 93       	push	r29
    6490:	00 97       	sbiw	r24, 0x00	; 0
    6492:	29 f1       	breq	.+74     	; 0x64de <twiReceive+0x54>
    6494:	6b 30       	cpi	r22, 0x0B	; 11
    6496:	28 f5       	brcc	.+74     	; 0x64e2 <twiReceive+0x58>
    6498:	16 2f       	mov	r17, r22
    649a:	ec 01       	movw	r28, r24
    649c:	a6 df       	rcall	.-180    	; 0x63ea <twiIsBusy>
    649e:	81 11       	cpse	r24, r1
    64a0:	22 c0       	rjmp	.+68     	; 0x64e6 <twiReceive+0x5c>
    64a2:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <_twiCurrentHandler>
    64a6:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <_twiCurrentHandler+0x1>
    64aa:	c8 17       	cp	r28, r24
    64ac:	d9 07       	cpc	r29, r25
    64ae:	41 f0       	breq	.+16     	; 0x64c0 <twiReceive+0x36>
    64b0:	3e df       	rcall	.-388    	; 0x632e <_initTwiInterface>
    64b2:	89 81       	ldd	r24, Y+1	; 0x01
    64b4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    64b8:	d0 93 95 09 	sts	0x0995, r29	; 0x800995 <_twiCurrentHandler+0x1>
    64bc:	c0 93 94 09 	sts	0x0994, r28	; 0x800994 <_twiCurrentHandler>
    64c0:	10 93 96 09 	sts	0x0996, r17	; 0x800996 <_twiMessageLen>
    64c4:	88 81       	ld	r24, Y
    64c6:	88 0f       	add	r24, r24
    64c8:	81 60       	ori	r24, 0x01	; 1
    64ca:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <_twiMessageBuffer>
    64ce:	88 ef       	ldi	r24, 0xF8	; 248
    64d0:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    64d4:	85 ea       	ldi	r24, 0xA5	; 165
    64d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    64da:	85 e0       	ldi	r24, 0x05	; 5
    64dc:	05 c0       	rjmp	.+10     	; 0x64e8 <twiReceive+0x5e>
    64de:	86 e0       	ldi	r24, 0x06	; 6
    64e0:	03 c0       	rjmp	.+6      	; 0x64e8 <twiReceive+0x5e>
    64e2:	87 e0       	ldi	r24, 0x07	; 7
    64e4:	01 c0       	rjmp	.+2      	; 0x64e8 <twiReceive+0x5e>
    64e6:	82 e0       	ldi	r24, 0x02	; 2
    64e8:	df 91       	pop	r29
    64ea:	cf 91       	pop	r28
    64ec:	1f 91       	pop	r17
    64ee:	08 95       	ret

000064f0 <__vector_39>:
    64f0:	1f 92       	push	r1
    64f2:	0f 92       	push	r0
    64f4:	0f b6       	in	r0, 0x3f	; 63
    64f6:	0f 92       	push	r0
    64f8:	11 24       	eor	r1, r1
    64fa:	0b b6       	in	r0, 0x3b	; 59
    64fc:	0f 92       	push	r0
    64fe:	2f 93       	push	r18
    6500:	3f 93       	push	r19
    6502:	4f 93       	push	r20
    6504:	5f 93       	push	r21
    6506:	6f 93       	push	r22
    6508:	7f 93       	push	r23
    650a:	8f 93       	push	r24
    650c:	9f 93       	push	r25
    650e:	af 93       	push	r26
    6510:	bf 93       	push	r27
    6512:	ef 93       	push	r30
    6514:	ff 93       	push	r31
    6516:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    651a:	8e 2f       	mov	r24, r30
    651c:	90 e0       	ldi	r25, 0x00	; 0
    651e:	fc 01       	movw	r30, r24
    6520:	38 97       	sbiw	r30, 0x08	; 8
    6522:	e1 35       	cpi	r30, 0x51	; 81
    6524:	f1 05       	cpc	r31, r1
    6526:	08 f0       	brcs	.+2      	; 0x652a <__vector_39+0x3a>
    6528:	75 c0       	rjmp	.+234    	; 0x6614 <__vector_39+0x124>
    652a:	88 27       	eor	r24, r24
    652c:	e4 58       	subi	r30, 0x84	; 132
    652e:	ff 4f       	sbci	r31, 0xFF	; 255
    6530:	8f 4f       	sbci	r24, 0xFF	; 255
    6532:	67 c5       	rjmp	.+2766   	; 0x7002 <__tablejump2__>
    6534:	10 92 93 09 	sts	0x0993, r1	; 0x800993 <_index.1885>
    6538:	e0 91 93 09 	lds	r30, 0x0993	; 0x800993 <_index.1885>
    653c:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <_twiMessageLen>
    6540:	e8 17       	cp	r30, r24
    6542:	70 f4       	brcc	.+28     	; 0x6560 <__vector_39+0x70>
    6544:	81 e0       	ldi	r24, 0x01	; 1
    6546:	8e 0f       	add	r24, r30
    6548:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <_index.1885>
    654c:	f0 e0       	ldi	r31, 0x00	; 0
    654e:	e9 56       	subi	r30, 0x69	; 105
    6550:	f6 4f       	sbci	r31, 0xF6	; 246
    6552:	80 81       	ld	r24, Z
    6554:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    6558:	85 e8       	ldi	r24, 0x85	; 133
    655a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    655e:	72 c0       	rjmp	.+228    	; 0x6644 <__vector_39+0x154>
    6560:	84 e9       	ldi	r24, 0x94	; 148
    6562:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6566:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <_twiCurrentHandler>
    656a:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <_twiCurrentHandler+0x1>
    656e:	dc 01       	movw	r26, r24
    6570:	12 96       	adiw	r26, 0x02	; 2
    6572:	ed 91       	ld	r30, X+
    6574:	fc 91       	ld	r31, X
    6576:	13 97       	sbiw	r26, 0x03	; 3
    6578:	30 97       	sbiw	r30, 0x00	; 0
    657a:	09 f4       	brne	.+2      	; 0x657e <__vector_39+0x8e>
    657c:	63 c0       	rjmp	.+198    	; 0x6644 <__vector_39+0x154>
    657e:	20 e0       	ldi	r18, 0x00	; 0
    6580:	40 e0       	ldi	r20, 0x00	; 0
    6582:	50 e0       	ldi	r21, 0x00	; 0
    6584:	64 e0       	ldi	r22, 0x04	; 4
    6586:	19 95       	eicall
    6588:	5d c0       	rjmp	.+186    	; 0x6644 <__vector_39+0x154>
    658a:	e0 91 93 09 	lds	r30, 0x0993	; 0x800993 <_index.1885>
    658e:	81 e0       	ldi	r24, 0x01	; 1
    6590:	8e 0f       	add	r24, r30
    6592:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <_index.1885>
    6596:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    659a:	f0 e0       	ldi	r31, 0x00	; 0
    659c:	e9 56       	subi	r30, 0x69	; 105
    659e:	f6 4f       	sbci	r31, 0xF6	; 246
    65a0:	80 83       	st	Z, r24
    65a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    65a6:	80 34       	cpi	r24, 0x40	; 64
    65a8:	11 f4       	brne	.+4      	; 0x65ae <__vector_39+0xbe>
    65aa:	10 92 93 09 	sts	0x0993, r1	; 0x800993 <_index.1885>
    65ae:	20 91 93 09 	lds	r18, 0x0993	; 0x800993 <_index.1885>
    65b2:	30 e0       	ldi	r19, 0x00	; 0
    65b4:	80 91 96 09 	lds	r24, 0x0996	; 0x800996 <_twiMessageLen>
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	01 97       	sbiw	r24, 0x01	; 1
    65bc:	28 17       	cp	r18, r24
    65be:	39 07       	cpc	r19, r25
    65c0:	24 f4       	brge	.+8      	; 0x65ca <__vector_39+0xda>
    65c2:	85 ec       	ldi	r24, 0xC5	; 197
    65c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    65c8:	3d c0       	rjmp	.+122    	; 0x6644 <__vector_39+0x154>
    65ca:	85 e8       	ldi	r24, 0x85	; 133
    65cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    65d0:	39 c0       	rjmp	.+114    	; 0x6644 <__vector_39+0x154>
    65d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    65d6:	e0 91 93 09 	lds	r30, 0x0993	; 0x800993 <_index.1885>
    65da:	f0 e0       	ldi	r31, 0x00	; 0
    65dc:	e9 56       	subi	r30, 0x69	; 105
    65de:	f6 4f       	sbci	r31, 0xF6	; 246
    65e0:	80 83       	st	Z, r24
    65e2:	84 e9       	ldi	r24, 0x94	; 148
    65e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    65e8:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <_twiCurrentHandler>
    65ec:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <_twiCurrentHandler+0x1>
    65f0:	dc 01       	movw	r26, r24
    65f2:	12 96       	adiw	r26, 0x02	; 2
    65f4:	ed 91       	ld	r30, X+
    65f6:	fc 91       	ld	r31, X
    65f8:	13 97       	sbiw	r26, 0x03	; 3
    65fa:	30 97       	sbiw	r30, 0x00	; 0
    65fc:	19 f1       	breq	.+70     	; 0x6644 <__vector_39+0x154>
    65fe:	20 91 96 09 	lds	r18, 0x0996	; 0x800996 <_twiMessageLen>
    6602:	47 e9       	ldi	r20, 0x97	; 151
    6604:	59 e0       	ldi	r21, 0x09	; 9
    6606:	65 e0       	ldi	r22, 0x05	; 5
    6608:	19 95       	eicall
    660a:	1c c0       	rjmp	.+56     	; 0x6644 <__vector_39+0x154>
    660c:	85 ea       	ldi	r24, 0xA5	; 165
    660e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6612:	18 c0       	rjmp	.+48     	; 0x6644 <__vector_39+0x154>
    6614:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    6618:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    661c:	84 e0       	ldi	r24, 0x04	; 4
    661e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    6622:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <_twiCurrentHandler>
    6626:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <_twiCurrentHandler+0x1>
    662a:	dc 01       	movw	r26, r24
    662c:	12 96       	adiw	r26, 0x02	; 2
    662e:	ed 91       	ld	r30, X+
    6630:	fc 91       	ld	r31, X
    6632:	13 97       	sbiw	r26, 0x03	; 3
    6634:	30 97       	sbiw	r30, 0x00	; 0
    6636:	31 f0       	breq	.+12     	; 0x6644 <__vector_39+0x154>
    6638:	20 e0       	ldi	r18, 0x00	; 0
    663a:	40 e0       	ldi	r20, 0x00	; 0
    663c:	50 e0       	ldi	r21, 0x00	; 0
    663e:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    6642:	19 95       	eicall
    6644:	ff 91       	pop	r31
    6646:	ef 91       	pop	r30
    6648:	bf 91       	pop	r27
    664a:	af 91       	pop	r26
    664c:	9f 91       	pop	r25
    664e:	8f 91       	pop	r24
    6650:	7f 91       	pop	r23
    6652:	6f 91       	pop	r22
    6654:	5f 91       	pop	r21
    6656:	4f 91       	pop	r20
    6658:	3f 91       	pop	r19
    665a:	2f 91       	pop	r18
    665c:	0f 90       	pop	r0
    665e:	0b be       	out	0x3b, r0	; 59
    6660:	0f 90       	pop	r0
    6662:	0f be       	out	0x3f, r0	; 63
    6664:	0f 90       	pop	r0
    6666:	1f 90       	pop	r1
    6668:	18 95       	reti

0000666a <__subsf3>:
    666a:	50 58       	subi	r21, 0x80	; 128

0000666c <__addsf3>:
    666c:	bb 27       	eor	r27, r27
    666e:	aa 27       	eor	r26, r26
    6670:	13 d0       	rcall	.+38     	; 0x6698 <__addsf3x>
    6672:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__fp_round>
    6676:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__fp_pscA>
    667a:	38 f0       	brcs	.+14     	; 0x668a <__addsf3+0x1e>
    667c:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <__fp_pscB>
    6680:	20 f0       	brcs	.+8      	; 0x668a <__addsf3+0x1e>
    6682:	39 f4       	brne	.+14     	; 0x6692 <__addsf3+0x26>
    6684:	9f 3f       	cpi	r25, 0xFF	; 255
    6686:	19 f4       	brne	.+6      	; 0x668e <__addsf3+0x22>
    6688:	26 f4       	brtc	.+8      	; 0x6692 <__addsf3+0x26>
    668a:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__fp_nan>
    668e:	0e f4       	brtc	.+2      	; 0x6692 <__addsf3+0x26>
    6690:	e0 95       	com	r30
    6692:	e7 fb       	bst	r30, 7
    6694:	0c 94 9c 26 	jmp	0x4d38	; 0x4d38 <__fp_inf>

00006698 <__addsf3x>:
    6698:	e9 2f       	mov	r30, r25
    669a:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__fp_split3>
    669e:	58 f3       	brcs	.-42     	; 0x6676 <__addsf3+0xa>
    66a0:	ba 17       	cp	r27, r26
    66a2:	62 07       	cpc	r22, r18
    66a4:	73 07       	cpc	r23, r19
    66a6:	84 07       	cpc	r24, r20
    66a8:	95 07       	cpc	r25, r21
    66aa:	20 f0       	brcs	.+8      	; 0x66b4 <__addsf3x+0x1c>
    66ac:	79 f4       	brne	.+30     	; 0x66cc <__addsf3x+0x34>
    66ae:	a6 f5       	brtc	.+104    	; 0x6718 <__addsf3x+0x80>
    66b0:	0c 94 2e 26 	jmp	0x4c5c	; 0x4c5c <__fp_zero>
    66b4:	0e f4       	brtc	.+2      	; 0x66b8 <__addsf3x+0x20>
    66b6:	e0 95       	com	r30
    66b8:	0b 2e       	mov	r0, r27
    66ba:	ba 2f       	mov	r27, r26
    66bc:	a0 2d       	mov	r26, r0
    66be:	0b 01       	movw	r0, r22
    66c0:	b9 01       	movw	r22, r18
    66c2:	90 01       	movw	r18, r0
    66c4:	0c 01       	movw	r0, r24
    66c6:	ca 01       	movw	r24, r20
    66c8:	a0 01       	movw	r20, r0
    66ca:	11 24       	eor	r1, r1
    66cc:	ff 27       	eor	r31, r31
    66ce:	59 1b       	sub	r21, r25
    66d0:	99 f0       	breq	.+38     	; 0x66f8 <__addsf3x+0x60>
    66d2:	59 3f       	cpi	r21, 0xF9	; 249
    66d4:	50 f4       	brcc	.+20     	; 0x66ea <__addsf3x+0x52>
    66d6:	50 3e       	cpi	r21, 0xE0	; 224
    66d8:	68 f1       	brcs	.+90     	; 0x6734 <__addsf3x+0x9c>
    66da:	1a 16       	cp	r1, r26
    66dc:	f0 40       	sbci	r31, 0x00	; 0
    66de:	a2 2f       	mov	r26, r18
    66e0:	23 2f       	mov	r18, r19
    66e2:	34 2f       	mov	r19, r20
    66e4:	44 27       	eor	r20, r20
    66e6:	58 5f       	subi	r21, 0xF8	; 248
    66e8:	f3 cf       	rjmp	.-26     	; 0x66d0 <__addsf3x+0x38>
    66ea:	46 95       	lsr	r20
    66ec:	37 95       	ror	r19
    66ee:	27 95       	ror	r18
    66f0:	a7 95       	ror	r26
    66f2:	f0 40       	sbci	r31, 0x00	; 0
    66f4:	53 95       	inc	r21
    66f6:	c9 f7       	brne	.-14     	; 0x66ea <__addsf3x+0x52>
    66f8:	7e f4       	brtc	.+30     	; 0x6718 <__addsf3x+0x80>
    66fa:	1f 16       	cp	r1, r31
    66fc:	ba 0b       	sbc	r27, r26
    66fe:	62 0b       	sbc	r22, r18
    6700:	73 0b       	sbc	r23, r19
    6702:	84 0b       	sbc	r24, r20
    6704:	ba f0       	brmi	.+46     	; 0x6734 <__addsf3x+0x9c>
    6706:	91 50       	subi	r25, 0x01	; 1
    6708:	a1 f0       	breq	.+40     	; 0x6732 <__addsf3x+0x9a>
    670a:	ff 0f       	add	r31, r31
    670c:	bb 1f       	adc	r27, r27
    670e:	66 1f       	adc	r22, r22
    6710:	77 1f       	adc	r23, r23
    6712:	88 1f       	adc	r24, r24
    6714:	c2 f7       	brpl	.-16     	; 0x6706 <__addsf3x+0x6e>
    6716:	0e c0       	rjmp	.+28     	; 0x6734 <__addsf3x+0x9c>
    6718:	ba 0f       	add	r27, r26
    671a:	62 1f       	adc	r22, r18
    671c:	73 1f       	adc	r23, r19
    671e:	84 1f       	adc	r24, r20
    6720:	48 f4       	brcc	.+18     	; 0x6734 <__addsf3x+0x9c>
    6722:	87 95       	ror	r24
    6724:	77 95       	ror	r23
    6726:	67 95       	ror	r22
    6728:	b7 95       	ror	r27
    672a:	f7 95       	ror	r31
    672c:	9e 3f       	cpi	r25, 0xFE	; 254
    672e:	08 f0       	brcs	.+2      	; 0x6732 <__addsf3x+0x9a>
    6730:	b0 cf       	rjmp	.-160    	; 0x6692 <__addsf3+0x26>
    6732:	93 95       	inc	r25
    6734:	88 0f       	add	r24, r24
    6736:	08 f0       	brcs	.+2      	; 0x673a <__addsf3x+0xa2>
    6738:	99 27       	eor	r25, r25
    673a:	ee 0f       	add	r30, r30
    673c:	97 95       	ror	r25
    673e:	87 95       	ror	r24
    6740:	08 95       	ret

00006742 <__divsf3>:
    6742:	12 d0       	rcall	.+36     	; 0x6768 <__divsf3x>
    6744:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__fp_round>
    6748:	0e 94 ac 26 	call	0x4d58	; 0x4d58 <__fp_pscB>
    674c:	58 f0       	brcs	.+22     	; 0x6764 <__divsf3+0x22>
    674e:	0e 94 a5 26 	call	0x4d4a	; 0x4d4a <__fp_pscA>
    6752:	40 f0       	brcs	.+16     	; 0x6764 <__divsf3+0x22>
    6754:	29 f4       	brne	.+10     	; 0x6760 <__divsf3+0x1e>
    6756:	5f 3f       	cpi	r21, 0xFF	; 255
    6758:	29 f0       	breq	.+10     	; 0x6764 <__divsf3+0x22>
    675a:	0c 94 9c 26 	jmp	0x4d38	; 0x4d38 <__fp_inf>
    675e:	51 11       	cpse	r21, r1
    6760:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__fp_szero>
    6764:	0c 94 a2 26 	jmp	0x4d44	; 0x4d44 <__fp_nan>

00006768 <__divsf3x>:
    6768:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__fp_split3>
    676c:	68 f3       	brcs	.-38     	; 0x6748 <__divsf3+0x6>

0000676e <__divsf3_pse>:
    676e:	99 23       	and	r25, r25
    6770:	b1 f3       	breq	.-20     	; 0x675e <__divsf3+0x1c>
    6772:	55 23       	and	r21, r21
    6774:	91 f3       	breq	.-28     	; 0x675a <__divsf3+0x18>
    6776:	95 1b       	sub	r25, r21
    6778:	55 0b       	sbc	r21, r21
    677a:	bb 27       	eor	r27, r27
    677c:	aa 27       	eor	r26, r26
    677e:	62 17       	cp	r22, r18
    6780:	73 07       	cpc	r23, r19
    6782:	84 07       	cpc	r24, r20
    6784:	38 f0       	brcs	.+14     	; 0x6794 <__divsf3_pse+0x26>
    6786:	9f 5f       	subi	r25, 0xFF	; 255
    6788:	5f 4f       	sbci	r21, 0xFF	; 255
    678a:	22 0f       	add	r18, r18
    678c:	33 1f       	adc	r19, r19
    678e:	44 1f       	adc	r20, r20
    6790:	aa 1f       	adc	r26, r26
    6792:	a9 f3       	breq	.-22     	; 0x677e <__divsf3_pse+0x10>
    6794:	35 d0       	rcall	.+106    	; 0x6800 <__divsf3_pse+0x92>
    6796:	0e 2e       	mov	r0, r30
    6798:	3a f0       	brmi	.+14     	; 0x67a8 <__divsf3_pse+0x3a>
    679a:	e0 e8       	ldi	r30, 0x80	; 128
    679c:	32 d0       	rcall	.+100    	; 0x6802 <__divsf3_pse+0x94>
    679e:	91 50       	subi	r25, 0x01	; 1
    67a0:	50 40       	sbci	r21, 0x00	; 0
    67a2:	e6 95       	lsr	r30
    67a4:	00 1c       	adc	r0, r0
    67a6:	ca f7       	brpl	.-14     	; 0x679a <__divsf3_pse+0x2c>
    67a8:	2b d0       	rcall	.+86     	; 0x6800 <__divsf3_pse+0x92>
    67aa:	fe 2f       	mov	r31, r30
    67ac:	29 d0       	rcall	.+82     	; 0x6800 <__divsf3_pse+0x92>
    67ae:	66 0f       	add	r22, r22
    67b0:	77 1f       	adc	r23, r23
    67b2:	88 1f       	adc	r24, r24
    67b4:	bb 1f       	adc	r27, r27
    67b6:	26 17       	cp	r18, r22
    67b8:	37 07       	cpc	r19, r23
    67ba:	48 07       	cpc	r20, r24
    67bc:	ab 07       	cpc	r26, r27
    67be:	b0 e8       	ldi	r27, 0x80	; 128
    67c0:	09 f0       	breq	.+2      	; 0x67c4 <__divsf3_pse+0x56>
    67c2:	bb 0b       	sbc	r27, r27
    67c4:	80 2d       	mov	r24, r0
    67c6:	bf 01       	movw	r22, r30
    67c8:	ff 27       	eor	r31, r31
    67ca:	93 58       	subi	r25, 0x83	; 131
    67cc:	5f 4f       	sbci	r21, 0xFF	; 255
    67ce:	3a f0       	brmi	.+14     	; 0x67de <__divsf3_pse+0x70>
    67d0:	9e 3f       	cpi	r25, 0xFE	; 254
    67d2:	51 05       	cpc	r21, r1
    67d4:	78 f0       	brcs	.+30     	; 0x67f4 <__divsf3_pse+0x86>
    67d6:	0c 94 9c 26 	jmp	0x4d38	; 0x4d38 <__fp_inf>
    67da:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__fp_szero>
    67de:	5f 3f       	cpi	r21, 0xFF	; 255
    67e0:	e4 f3       	brlt	.-8      	; 0x67da <__divsf3_pse+0x6c>
    67e2:	98 3e       	cpi	r25, 0xE8	; 232
    67e4:	d4 f3       	brlt	.-12     	; 0x67da <__divsf3_pse+0x6c>
    67e6:	86 95       	lsr	r24
    67e8:	77 95       	ror	r23
    67ea:	67 95       	ror	r22
    67ec:	b7 95       	ror	r27
    67ee:	f7 95       	ror	r31
    67f0:	9f 5f       	subi	r25, 0xFF	; 255
    67f2:	c9 f7       	brne	.-14     	; 0x67e6 <__divsf3_pse+0x78>
    67f4:	88 0f       	add	r24, r24
    67f6:	91 1d       	adc	r25, r1
    67f8:	96 95       	lsr	r25
    67fa:	87 95       	ror	r24
    67fc:	97 f9       	bld	r25, 7
    67fe:	08 95       	ret
    6800:	e1 e0       	ldi	r30, 0x01	; 1
    6802:	66 0f       	add	r22, r22
    6804:	77 1f       	adc	r23, r23
    6806:	88 1f       	adc	r24, r24
    6808:	bb 1f       	adc	r27, r27
    680a:	62 17       	cp	r22, r18
    680c:	73 07       	cpc	r23, r19
    680e:	84 07       	cpc	r24, r20
    6810:	ba 07       	cpc	r27, r26
    6812:	20 f0       	brcs	.+8      	; 0x681c <__divsf3_pse+0xae>
    6814:	62 1b       	sub	r22, r18
    6816:	73 0b       	sbc	r23, r19
    6818:	84 0b       	sbc	r24, r20
    681a:	ba 0b       	sbc	r27, r26
    681c:	ee 1f       	adc	r30, r30
    681e:	88 f7       	brcc	.-30     	; 0x6802 <__divsf3_pse+0x94>
    6820:	e0 95       	com	r30
    6822:	08 95       	ret

00006824 <__fixsfsi>:
    6824:	0e 94 bc 25 	call	0x4b78	; 0x4b78 <__fixunssfsi>
    6828:	68 94       	set
    682a:	b1 11       	cpse	r27, r1
    682c:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__fp_szero>
    6830:	08 95       	ret

00006832 <__floatunsisf>:
    6832:	e8 94       	clt
    6834:	09 c0       	rjmp	.+18     	; 0x6848 <__floatsisf+0x12>

00006836 <__floatsisf>:
    6836:	97 fb       	bst	r25, 7
    6838:	3e f4       	brtc	.+14     	; 0x6848 <__floatsisf+0x12>
    683a:	90 95       	com	r25
    683c:	80 95       	com	r24
    683e:	70 95       	com	r23
    6840:	61 95       	neg	r22
    6842:	7f 4f       	sbci	r23, 0xFF	; 255
    6844:	8f 4f       	sbci	r24, 0xFF	; 255
    6846:	9f 4f       	sbci	r25, 0xFF	; 255
    6848:	99 23       	and	r25, r25
    684a:	a9 f0       	breq	.+42     	; 0x6876 <__floatsisf+0x40>
    684c:	f9 2f       	mov	r31, r25
    684e:	96 e9       	ldi	r25, 0x96	; 150
    6850:	bb 27       	eor	r27, r27
    6852:	93 95       	inc	r25
    6854:	f6 95       	lsr	r31
    6856:	87 95       	ror	r24
    6858:	77 95       	ror	r23
    685a:	67 95       	ror	r22
    685c:	b7 95       	ror	r27
    685e:	f1 11       	cpse	r31, r1
    6860:	f8 cf       	rjmp	.-16     	; 0x6852 <__floatsisf+0x1c>
    6862:	fa f4       	brpl	.+62     	; 0x68a2 <__floatsisf+0x6c>
    6864:	bb 0f       	add	r27, r27
    6866:	11 f4       	brne	.+4      	; 0x686c <__floatsisf+0x36>
    6868:	60 ff       	sbrs	r22, 0
    686a:	1b c0       	rjmp	.+54     	; 0x68a2 <__floatsisf+0x6c>
    686c:	6f 5f       	subi	r22, 0xFF	; 255
    686e:	7f 4f       	sbci	r23, 0xFF	; 255
    6870:	8f 4f       	sbci	r24, 0xFF	; 255
    6872:	9f 4f       	sbci	r25, 0xFF	; 255
    6874:	16 c0       	rjmp	.+44     	; 0x68a2 <__floatsisf+0x6c>
    6876:	88 23       	and	r24, r24
    6878:	11 f0       	breq	.+4      	; 0x687e <__floatsisf+0x48>
    687a:	96 e9       	ldi	r25, 0x96	; 150
    687c:	11 c0       	rjmp	.+34     	; 0x68a0 <__floatsisf+0x6a>
    687e:	77 23       	and	r23, r23
    6880:	21 f0       	breq	.+8      	; 0x688a <__floatsisf+0x54>
    6882:	9e e8       	ldi	r25, 0x8E	; 142
    6884:	87 2f       	mov	r24, r23
    6886:	76 2f       	mov	r23, r22
    6888:	05 c0       	rjmp	.+10     	; 0x6894 <__floatsisf+0x5e>
    688a:	66 23       	and	r22, r22
    688c:	71 f0       	breq	.+28     	; 0x68aa <__floatsisf+0x74>
    688e:	96 e8       	ldi	r25, 0x86	; 134
    6890:	86 2f       	mov	r24, r22
    6892:	70 e0       	ldi	r23, 0x00	; 0
    6894:	60 e0       	ldi	r22, 0x00	; 0
    6896:	2a f0       	brmi	.+10     	; 0x68a2 <__floatsisf+0x6c>
    6898:	9a 95       	dec	r25
    689a:	66 0f       	add	r22, r22
    689c:	77 1f       	adc	r23, r23
    689e:	88 1f       	adc	r24, r24
    68a0:	da f7       	brpl	.-10     	; 0x6898 <__floatsisf+0x62>
    68a2:	88 0f       	add	r24, r24
    68a4:	96 95       	lsr	r25
    68a6:	87 95       	ror	r24
    68a8:	97 f9       	bld	r25, 7
    68aa:	08 95       	ret

000068ac <vfprintf>:
    68ac:	2f 92       	push	r2
    68ae:	3f 92       	push	r3
    68b0:	4f 92       	push	r4
    68b2:	5f 92       	push	r5
    68b4:	6f 92       	push	r6
    68b6:	7f 92       	push	r7
    68b8:	8f 92       	push	r8
    68ba:	9f 92       	push	r9
    68bc:	af 92       	push	r10
    68be:	bf 92       	push	r11
    68c0:	cf 92       	push	r12
    68c2:	df 92       	push	r13
    68c4:	ef 92       	push	r14
    68c6:	ff 92       	push	r15
    68c8:	0f 93       	push	r16
    68ca:	1f 93       	push	r17
    68cc:	cf 93       	push	r28
    68ce:	df 93       	push	r29
    68d0:	cd b7       	in	r28, 0x3d	; 61
    68d2:	de b7       	in	r29, 0x3e	; 62
    68d4:	60 97       	sbiw	r28, 0x10	; 16
    68d6:	0f b6       	in	r0, 0x3f	; 63
    68d8:	f8 94       	cli
    68da:	de bf       	out	0x3e, r29	; 62
    68dc:	0f be       	out	0x3f, r0	; 63
    68de:	cd bf       	out	0x3d, r28	; 61
    68e0:	7c 01       	movw	r14, r24
    68e2:	1b 01       	movw	r2, r22
    68e4:	6a 01       	movw	r12, r20
    68e6:	fc 01       	movw	r30, r24
    68e8:	17 82       	std	Z+7, r1	; 0x07
    68ea:	16 82       	std	Z+6, r1	; 0x06
    68ec:	83 81       	ldd	r24, Z+3	; 0x03
    68ee:	81 ff       	sbrs	r24, 1
    68f0:	2a c3       	rjmp	.+1620   	; 0x6f46 <vfprintf+0x69a>
    68f2:	9e 01       	movw	r18, r28
    68f4:	2f 5f       	subi	r18, 0xFF	; 255
    68f6:	3f 4f       	sbci	r19, 0xFF	; 255
    68f8:	39 01       	movw	r6, r18
    68fa:	f7 01       	movw	r30, r14
    68fc:	93 81       	ldd	r25, Z+3	; 0x03
    68fe:	f1 01       	movw	r30, r2
    6900:	93 fd       	sbrc	r25, 3
    6902:	85 91       	lpm	r24, Z+
    6904:	93 ff       	sbrs	r25, 3
    6906:	81 91       	ld	r24, Z+
    6908:	1f 01       	movw	r2, r30
    690a:	88 23       	and	r24, r24
    690c:	09 f4       	brne	.+2      	; 0x6910 <vfprintf+0x64>
    690e:	17 c3       	rjmp	.+1582   	; 0x6f3e <vfprintf+0x692>
    6910:	85 32       	cpi	r24, 0x25	; 37
    6912:	39 f4       	brne	.+14     	; 0x6922 <vfprintf+0x76>
    6914:	93 fd       	sbrc	r25, 3
    6916:	85 91       	lpm	r24, Z+
    6918:	93 ff       	sbrs	r25, 3
    691a:	81 91       	ld	r24, Z+
    691c:	1f 01       	movw	r2, r30
    691e:	85 32       	cpi	r24, 0x25	; 37
    6920:	31 f4       	brne	.+12     	; 0x692e <vfprintf+0x82>
    6922:	b7 01       	movw	r22, r14
    6924:	90 e0       	ldi	r25, 0x00	; 0
    6926:	dc d5       	rcall	.+3000   	; 0x74e0 <fputc>
    6928:	56 01       	movw	r10, r12
    692a:	65 01       	movw	r12, r10
    692c:	e6 cf       	rjmp	.-52     	; 0x68fa <vfprintf+0x4e>
    692e:	10 e0       	ldi	r17, 0x00	; 0
    6930:	51 2c       	mov	r5, r1
    6932:	91 2c       	mov	r9, r1
    6934:	ff e1       	ldi	r31, 0x1F	; 31
    6936:	f9 15       	cp	r31, r9
    6938:	d8 f0       	brcs	.+54     	; 0x6970 <vfprintf+0xc4>
    693a:	8b 32       	cpi	r24, 0x2B	; 43
    693c:	79 f0       	breq	.+30     	; 0x695c <vfprintf+0xb0>
    693e:	38 f4       	brcc	.+14     	; 0x694e <vfprintf+0xa2>
    6940:	80 32       	cpi	r24, 0x20	; 32
    6942:	79 f0       	breq	.+30     	; 0x6962 <vfprintf+0xb6>
    6944:	83 32       	cpi	r24, 0x23	; 35
    6946:	a1 f4       	brne	.+40     	; 0x6970 <vfprintf+0xc4>
    6948:	f9 2d       	mov	r31, r9
    694a:	f0 61       	ori	r31, 0x10	; 16
    694c:	2e c0       	rjmp	.+92     	; 0x69aa <vfprintf+0xfe>
    694e:	8d 32       	cpi	r24, 0x2D	; 45
    6950:	61 f0       	breq	.+24     	; 0x696a <vfprintf+0xbe>
    6952:	80 33       	cpi	r24, 0x30	; 48
    6954:	69 f4       	brne	.+26     	; 0x6970 <vfprintf+0xc4>
    6956:	29 2d       	mov	r18, r9
    6958:	21 60       	ori	r18, 0x01	; 1
    695a:	2d c0       	rjmp	.+90     	; 0x69b6 <vfprintf+0x10a>
    695c:	39 2d       	mov	r19, r9
    695e:	32 60       	ori	r19, 0x02	; 2
    6960:	93 2e       	mov	r9, r19
    6962:	89 2d       	mov	r24, r9
    6964:	84 60       	ori	r24, 0x04	; 4
    6966:	98 2e       	mov	r9, r24
    6968:	2a c0       	rjmp	.+84     	; 0x69be <vfprintf+0x112>
    696a:	e9 2d       	mov	r30, r9
    696c:	e8 60       	ori	r30, 0x08	; 8
    696e:	15 c0       	rjmp	.+42     	; 0x699a <vfprintf+0xee>
    6970:	97 fc       	sbrc	r9, 7
    6972:	2d c0       	rjmp	.+90     	; 0x69ce <vfprintf+0x122>
    6974:	20 ed       	ldi	r18, 0xD0	; 208
    6976:	28 0f       	add	r18, r24
    6978:	2a 30       	cpi	r18, 0x0A	; 10
    697a:	88 f4       	brcc	.+34     	; 0x699e <vfprintf+0xf2>
    697c:	96 fe       	sbrs	r9, 6
    697e:	06 c0       	rjmp	.+12     	; 0x698c <vfprintf+0xe0>
    6980:	3a e0       	ldi	r19, 0x0A	; 10
    6982:	13 9f       	mul	r17, r19
    6984:	20 0d       	add	r18, r0
    6986:	11 24       	eor	r1, r1
    6988:	12 2f       	mov	r17, r18
    698a:	19 c0       	rjmp	.+50     	; 0x69be <vfprintf+0x112>
    698c:	8a e0       	ldi	r24, 0x0A	; 10
    698e:	58 9e       	mul	r5, r24
    6990:	20 0d       	add	r18, r0
    6992:	11 24       	eor	r1, r1
    6994:	52 2e       	mov	r5, r18
    6996:	e9 2d       	mov	r30, r9
    6998:	e0 62       	ori	r30, 0x20	; 32
    699a:	9e 2e       	mov	r9, r30
    699c:	10 c0       	rjmp	.+32     	; 0x69be <vfprintf+0x112>
    699e:	8e 32       	cpi	r24, 0x2E	; 46
    69a0:	31 f4       	brne	.+12     	; 0x69ae <vfprintf+0x102>
    69a2:	96 fc       	sbrc	r9, 6
    69a4:	cc c2       	rjmp	.+1432   	; 0x6f3e <vfprintf+0x692>
    69a6:	f9 2d       	mov	r31, r9
    69a8:	f0 64       	ori	r31, 0x40	; 64
    69aa:	9f 2e       	mov	r9, r31
    69ac:	08 c0       	rjmp	.+16     	; 0x69be <vfprintf+0x112>
    69ae:	8c 36       	cpi	r24, 0x6C	; 108
    69b0:	21 f4       	brne	.+8      	; 0x69ba <vfprintf+0x10e>
    69b2:	29 2d       	mov	r18, r9
    69b4:	20 68       	ori	r18, 0x80	; 128
    69b6:	92 2e       	mov	r9, r18
    69b8:	02 c0       	rjmp	.+4      	; 0x69be <vfprintf+0x112>
    69ba:	88 36       	cpi	r24, 0x68	; 104
    69bc:	41 f4       	brne	.+16     	; 0x69ce <vfprintf+0x122>
    69be:	f1 01       	movw	r30, r2
    69c0:	93 fd       	sbrc	r25, 3
    69c2:	85 91       	lpm	r24, Z+
    69c4:	93 ff       	sbrs	r25, 3
    69c6:	81 91       	ld	r24, Z+
    69c8:	1f 01       	movw	r2, r30
    69ca:	81 11       	cpse	r24, r1
    69cc:	b3 cf       	rjmp	.-154    	; 0x6934 <vfprintf+0x88>
    69ce:	9b eb       	ldi	r25, 0xBB	; 187
    69d0:	98 0f       	add	r25, r24
    69d2:	93 30       	cpi	r25, 0x03	; 3
    69d4:	20 f4       	brcc	.+8      	; 0x69de <vfprintf+0x132>
    69d6:	99 2d       	mov	r25, r9
    69d8:	90 61       	ori	r25, 0x10	; 16
    69da:	80 5e       	subi	r24, 0xE0	; 224
    69dc:	07 c0       	rjmp	.+14     	; 0x69ec <vfprintf+0x140>
    69de:	9b e9       	ldi	r25, 0x9B	; 155
    69e0:	98 0f       	add	r25, r24
    69e2:	93 30       	cpi	r25, 0x03	; 3
    69e4:	08 f0       	brcs	.+2      	; 0x69e8 <vfprintf+0x13c>
    69e6:	59 c1       	rjmp	.+690    	; 0x6c9a <vfprintf+0x3ee>
    69e8:	99 2d       	mov	r25, r9
    69ea:	9f 7e       	andi	r25, 0xEF	; 239
    69ec:	96 ff       	sbrs	r25, 6
    69ee:	16 e0       	ldi	r17, 0x06	; 6
    69f0:	9f 73       	andi	r25, 0x3F	; 63
    69f2:	99 2e       	mov	r9, r25
    69f4:	85 36       	cpi	r24, 0x65	; 101
    69f6:	19 f4       	brne	.+6      	; 0x69fe <vfprintf+0x152>
    69f8:	90 64       	ori	r25, 0x40	; 64
    69fa:	99 2e       	mov	r9, r25
    69fc:	08 c0       	rjmp	.+16     	; 0x6a0e <vfprintf+0x162>
    69fe:	86 36       	cpi	r24, 0x66	; 102
    6a00:	21 f4       	brne	.+8      	; 0x6a0a <vfprintf+0x15e>
    6a02:	39 2f       	mov	r19, r25
    6a04:	30 68       	ori	r19, 0x80	; 128
    6a06:	93 2e       	mov	r9, r19
    6a08:	02 c0       	rjmp	.+4      	; 0x6a0e <vfprintf+0x162>
    6a0a:	11 11       	cpse	r17, r1
    6a0c:	11 50       	subi	r17, 0x01	; 1
    6a0e:	97 fe       	sbrs	r9, 7
    6a10:	07 c0       	rjmp	.+14     	; 0x6a20 <vfprintf+0x174>
    6a12:	1c 33       	cpi	r17, 0x3C	; 60
    6a14:	50 f4       	brcc	.+20     	; 0x6a2a <vfprintf+0x17e>
    6a16:	44 24       	eor	r4, r4
    6a18:	43 94       	inc	r4
    6a1a:	41 0e       	add	r4, r17
    6a1c:	27 e0       	ldi	r18, 0x07	; 7
    6a1e:	0b c0       	rjmp	.+22     	; 0x6a36 <vfprintf+0x18a>
    6a20:	18 30       	cpi	r17, 0x08	; 8
    6a22:	38 f0       	brcs	.+14     	; 0x6a32 <vfprintf+0x186>
    6a24:	27 e0       	ldi	r18, 0x07	; 7
    6a26:	17 e0       	ldi	r17, 0x07	; 7
    6a28:	05 c0       	rjmp	.+10     	; 0x6a34 <vfprintf+0x188>
    6a2a:	27 e0       	ldi	r18, 0x07	; 7
    6a2c:	9c e3       	ldi	r25, 0x3C	; 60
    6a2e:	49 2e       	mov	r4, r25
    6a30:	02 c0       	rjmp	.+4      	; 0x6a36 <vfprintf+0x18a>
    6a32:	21 2f       	mov	r18, r17
    6a34:	41 2c       	mov	r4, r1
    6a36:	56 01       	movw	r10, r12
    6a38:	84 e0       	ldi	r24, 0x04	; 4
    6a3a:	a8 0e       	add	r10, r24
    6a3c:	b1 1c       	adc	r11, r1
    6a3e:	f6 01       	movw	r30, r12
    6a40:	60 81       	ld	r22, Z
    6a42:	71 81       	ldd	r23, Z+1	; 0x01
    6a44:	82 81       	ldd	r24, Z+2	; 0x02
    6a46:	93 81       	ldd	r25, Z+3	; 0x03
    6a48:	04 2d       	mov	r16, r4
    6a4a:	a3 01       	movw	r20, r6
    6a4c:	21 d4       	rcall	.+2114   	; 0x7290 <__ftoa_engine>
    6a4e:	6c 01       	movw	r12, r24
    6a50:	f9 81       	ldd	r31, Y+1	; 0x01
    6a52:	fc 87       	std	Y+12, r31	; 0x0c
    6a54:	f0 ff       	sbrs	r31, 0
    6a56:	02 c0       	rjmp	.+4      	; 0x6a5c <vfprintf+0x1b0>
    6a58:	f3 ff       	sbrs	r31, 3
    6a5a:	06 c0       	rjmp	.+12     	; 0x6a68 <vfprintf+0x1bc>
    6a5c:	91 fc       	sbrc	r9, 1
    6a5e:	06 c0       	rjmp	.+12     	; 0x6a6c <vfprintf+0x1c0>
    6a60:	92 fe       	sbrs	r9, 2
    6a62:	06 c0       	rjmp	.+12     	; 0x6a70 <vfprintf+0x1c4>
    6a64:	00 e2       	ldi	r16, 0x20	; 32
    6a66:	05 c0       	rjmp	.+10     	; 0x6a72 <vfprintf+0x1c6>
    6a68:	0d e2       	ldi	r16, 0x2D	; 45
    6a6a:	03 c0       	rjmp	.+6      	; 0x6a72 <vfprintf+0x1c6>
    6a6c:	0b e2       	ldi	r16, 0x2B	; 43
    6a6e:	01 c0       	rjmp	.+2      	; 0x6a72 <vfprintf+0x1c6>
    6a70:	00 e0       	ldi	r16, 0x00	; 0
    6a72:	8c 85       	ldd	r24, Y+12	; 0x0c
    6a74:	8c 70       	andi	r24, 0x0C	; 12
    6a76:	19 f0       	breq	.+6      	; 0x6a7e <vfprintf+0x1d2>
    6a78:	01 11       	cpse	r16, r1
    6a7a:	43 c2       	rjmp	.+1158   	; 0x6f02 <vfprintf+0x656>
    6a7c:	80 c2       	rjmp	.+1280   	; 0x6f7e <vfprintf+0x6d2>
    6a7e:	97 fe       	sbrs	r9, 7
    6a80:	10 c0       	rjmp	.+32     	; 0x6aa2 <vfprintf+0x1f6>
    6a82:	4c 0c       	add	r4, r12
    6a84:	fc 85       	ldd	r31, Y+12	; 0x0c
    6a86:	f4 ff       	sbrs	r31, 4
    6a88:	04 c0       	rjmp	.+8      	; 0x6a92 <vfprintf+0x1e6>
    6a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    6a8c:	81 33       	cpi	r24, 0x31	; 49
    6a8e:	09 f4       	brne	.+2      	; 0x6a92 <vfprintf+0x1e6>
    6a90:	4a 94       	dec	r4
    6a92:	14 14       	cp	r1, r4
    6a94:	74 f5       	brge	.+92     	; 0x6af2 <vfprintf+0x246>
    6a96:	28 e0       	ldi	r18, 0x08	; 8
    6a98:	24 15       	cp	r18, r4
    6a9a:	78 f5       	brcc	.+94     	; 0x6afa <vfprintf+0x24e>
    6a9c:	88 e0       	ldi	r24, 0x08	; 8
    6a9e:	48 2e       	mov	r4, r24
    6aa0:	2c c0       	rjmp	.+88     	; 0x6afa <vfprintf+0x24e>
    6aa2:	96 fc       	sbrc	r9, 6
    6aa4:	2a c0       	rjmp	.+84     	; 0x6afa <vfprintf+0x24e>
    6aa6:	81 2f       	mov	r24, r17
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	8c 15       	cp	r24, r12
    6aac:	9d 05       	cpc	r25, r13
    6aae:	9c f0       	brlt	.+38     	; 0x6ad6 <vfprintf+0x22a>
    6ab0:	3c ef       	ldi	r19, 0xFC	; 252
    6ab2:	c3 16       	cp	r12, r19
    6ab4:	3f ef       	ldi	r19, 0xFF	; 255
    6ab6:	d3 06       	cpc	r13, r19
    6ab8:	74 f0       	brlt	.+28     	; 0x6ad6 <vfprintf+0x22a>
    6aba:	89 2d       	mov	r24, r9
    6abc:	80 68       	ori	r24, 0x80	; 128
    6abe:	98 2e       	mov	r9, r24
    6ac0:	0a c0       	rjmp	.+20     	; 0x6ad6 <vfprintf+0x22a>
    6ac2:	e2 e0       	ldi	r30, 0x02	; 2
    6ac4:	f0 e0       	ldi	r31, 0x00	; 0
    6ac6:	ec 0f       	add	r30, r28
    6ac8:	fd 1f       	adc	r31, r29
    6aca:	e1 0f       	add	r30, r17
    6acc:	f1 1d       	adc	r31, r1
    6ace:	80 81       	ld	r24, Z
    6ad0:	80 33       	cpi	r24, 0x30	; 48
    6ad2:	19 f4       	brne	.+6      	; 0x6ada <vfprintf+0x22e>
    6ad4:	11 50       	subi	r17, 0x01	; 1
    6ad6:	11 11       	cpse	r17, r1
    6ad8:	f4 cf       	rjmp	.-24     	; 0x6ac2 <vfprintf+0x216>
    6ada:	97 fe       	sbrs	r9, 7
    6adc:	0e c0       	rjmp	.+28     	; 0x6afa <vfprintf+0x24e>
    6ade:	44 24       	eor	r4, r4
    6ae0:	43 94       	inc	r4
    6ae2:	41 0e       	add	r4, r17
    6ae4:	81 2f       	mov	r24, r17
    6ae6:	90 e0       	ldi	r25, 0x00	; 0
    6ae8:	c8 16       	cp	r12, r24
    6aea:	d9 06       	cpc	r13, r25
    6aec:	2c f4       	brge	.+10     	; 0x6af8 <vfprintf+0x24c>
    6aee:	1c 19       	sub	r17, r12
    6af0:	04 c0       	rjmp	.+8      	; 0x6afa <vfprintf+0x24e>
    6af2:	44 24       	eor	r4, r4
    6af4:	43 94       	inc	r4
    6af6:	01 c0       	rjmp	.+2      	; 0x6afa <vfprintf+0x24e>
    6af8:	10 e0       	ldi	r17, 0x00	; 0
    6afa:	97 fe       	sbrs	r9, 7
    6afc:	06 c0       	rjmp	.+12     	; 0x6b0a <vfprintf+0x25e>
    6afe:	1c 14       	cp	r1, r12
    6b00:	1d 04       	cpc	r1, r13
    6b02:	34 f4       	brge	.+12     	; 0x6b10 <vfprintf+0x264>
    6b04:	c6 01       	movw	r24, r12
    6b06:	01 96       	adiw	r24, 0x01	; 1
    6b08:	05 c0       	rjmp	.+10     	; 0x6b14 <vfprintf+0x268>
    6b0a:	85 e0       	ldi	r24, 0x05	; 5
    6b0c:	90 e0       	ldi	r25, 0x00	; 0
    6b0e:	02 c0       	rjmp	.+4      	; 0x6b14 <vfprintf+0x268>
    6b10:	81 e0       	ldi	r24, 0x01	; 1
    6b12:	90 e0       	ldi	r25, 0x00	; 0
    6b14:	01 11       	cpse	r16, r1
    6b16:	01 96       	adiw	r24, 0x01	; 1
    6b18:	11 23       	and	r17, r17
    6b1a:	31 f0       	breq	.+12     	; 0x6b28 <vfprintf+0x27c>
    6b1c:	21 2f       	mov	r18, r17
    6b1e:	30 e0       	ldi	r19, 0x00	; 0
    6b20:	2f 5f       	subi	r18, 0xFF	; 255
    6b22:	3f 4f       	sbci	r19, 0xFF	; 255
    6b24:	82 0f       	add	r24, r18
    6b26:	93 1f       	adc	r25, r19
    6b28:	25 2d       	mov	r18, r5
    6b2a:	30 e0       	ldi	r19, 0x00	; 0
    6b2c:	82 17       	cp	r24, r18
    6b2e:	93 07       	cpc	r25, r19
    6b30:	14 f4       	brge	.+4      	; 0x6b36 <vfprintf+0x28a>
    6b32:	58 1a       	sub	r5, r24
    6b34:	01 c0       	rjmp	.+2      	; 0x6b38 <vfprintf+0x28c>
    6b36:	51 2c       	mov	r5, r1
    6b38:	89 2d       	mov	r24, r9
    6b3a:	89 70       	andi	r24, 0x09	; 9
    6b3c:	41 f4       	brne	.+16     	; 0x6b4e <vfprintf+0x2a2>
    6b3e:	55 20       	and	r5, r5
    6b40:	31 f0       	breq	.+12     	; 0x6b4e <vfprintf+0x2a2>
    6b42:	b7 01       	movw	r22, r14
    6b44:	80 e2       	ldi	r24, 0x20	; 32
    6b46:	90 e0       	ldi	r25, 0x00	; 0
    6b48:	cb d4       	rcall	.+2454   	; 0x74e0 <fputc>
    6b4a:	5a 94       	dec	r5
    6b4c:	f8 cf       	rjmp	.-16     	; 0x6b3e <vfprintf+0x292>
    6b4e:	00 23       	and	r16, r16
    6b50:	21 f0       	breq	.+8      	; 0x6b5a <vfprintf+0x2ae>
    6b52:	b7 01       	movw	r22, r14
    6b54:	80 2f       	mov	r24, r16
    6b56:	90 e0       	ldi	r25, 0x00	; 0
    6b58:	c3 d4       	rcall	.+2438   	; 0x74e0 <fputc>
    6b5a:	93 fc       	sbrc	r9, 3
    6b5c:	08 c0       	rjmp	.+16     	; 0x6b6e <vfprintf+0x2c2>
    6b5e:	55 20       	and	r5, r5
    6b60:	31 f0       	breq	.+12     	; 0x6b6e <vfprintf+0x2c2>
    6b62:	b7 01       	movw	r22, r14
    6b64:	80 e3       	ldi	r24, 0x30	; 48
    6b66:	90 e0       	ldi	r25, 0x00	; 0
    6b68:	bb d4       	rcall	.+2422   	; 0x74e0 <fputc>
    6b6a:	5a 94       	dec	r5
    6b6c:	f8 cf       	rjmp	.-16     	; 0x6b5e <vfprintf+0x2b2>
    6b6e:	97 fe       	sbrs	r9, 7
    6b70:	4a c0       	rjmp	.+148    	; 0x6c06 <vfprintf+0x35a>
    6b72:	46 01       	movw	r8, r12
    6b74:	d7 fe       	sbrs	r13, 7
    6b76:	02 c0       	rjmp	.+4      	; 0x6b7c <vfprintf+0x2d0>
    6b78:	81 2c       	mov	r8, r1
    6b7a:	91 2c       	mov	r9, r1
    6b7c:	c6 01       	movw	r24, r12
    6b7e:	88 19       	sub	r24, r8
    6b80:	99 09       	sbc	r25, r9
    6b82:	f3 01       	movw	r30, r6
    6b84:	e8 0f       	add	r30, r24
    6b86:	f9 1f       	adc	r31, r25
    6b88:	fe 87       	std	Y+14, r31	; 0x0e
    6b8a:	ed 87       	std	Y+13, r30	; 0x0d
    6b8c:	96 01       	movw	r18, r12
    6b8e:	24 19       	sub	r18, r4
    6b90:	31 09       	sbc	r19, r1
    6b92:	38 8b       	std	Y+16, r19	; 0x10
    6b94:	2f 87       	std	Y+15, r18	; 0x0f
    6b96:	01 2f       	mov	r16, r17
    6b98:	10 e0       	ldi	r17, 0x00	; 0
    6b9a:	11 95       	neg	r17
    6b9c:	01 95       	neg	r16
    6b9e:	11 09       	sbc	r17, r1
    6ba0:	3f ef       	ldi	r19, 0xFF	; 255
    6ba2:	83 16       	cp	r8, r19
    6ba4:	93 06       	cpc	r9, r19
    6ba6:	21 f4       	brne	.+8      	; 0x6bb0 <vfprintf+0x304>
    6ba8:	b7 01       	movw	r22, r14
    6baa:	8e e2       	ldi	r24, 0x2E	; 46
    6bac:	90 e0       	ldi	r25, 0x00	; 0
    6bae:	98 d4       	rcall	.+2352   	; 0x74e0 <fputc>
    6bb0:	c8 14       	cp	r12, r8
    6bb2:	d9 04       	cpc	r13, r9
    6bb4:	4c f0       	brlt	.+18     	; 0x6bc8 <vfprintf+0x31c>
    6bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bb8:	98 89       	ldd	r25, Y+16	; 0x10
    6bba:	88 15       	cp	r24, r8
    6bbc:	99 05       	cpc	r25, r9
    6bbe:	24 f4       	brge	.+8      	; 0x6bc8 <vfprintf+0x31c>
    6bc0:	ed 85       	ldd	r30, Y+13	; 0x0d
    6bc2:	fe 85       	ldd	r31, Y+14	; 0x0e
    6bc4:	81 81       	ldd	r24, Z+1	; 0x01
    6bc6:	01 c0       	rjmp	.+2      	; 0x6bca <vfprintf+0x31e>
    6bc8:	80 e3       	ldi	r24, 0x30	; 48
    6bca:	f1 e0       	ldi	r31, 0x01	; 1
    6bcc:	8f 1a       	sub	r8, r31
    6bce:	91 08       	sbc	r9, r1
    6bd0:	2d 85       	ldd	r18, Y+13	; 0x0d
    6bd2:	3e 85       	ldd	r19, Y+14	; 0x0e
    6bd4:	2f 5f       	subi	r18, 0xFF	; 255
    6bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    6bd8:	3e 87       	std	Y+14, r19	; 0x0e
    6bda:	2d 87       	std	Y+13, r18	; 0x0d
    6bdc:	80 16       	cp	r8, r16
    6bde:	91 06       	cpc	r9, r17
    6be0:	24 f0       	brlt	.+8      	; 0x6bea <vfprintf+0x33e>
    6be2:	b7 01       	movw	r22, r14
    6be4:	90 e0       	ldi	r25, 0x00	; 0
    6be6:	7c d4       	rcall	.+2296   	; 0x74e0 <fputc>
    6be8:	db cf       	rjmp	.-74     	; 0x6ba0 <vfprintf+0x2f4>
    6bea:	c8 14       	cp	r12, r8
    6bec:	d9 04       	cpc	r13, r9
    6bee:	41 f4       	brne	.+16     	; 0x6c00 <vfprintf+0x354>
    6bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    6bf2:	96 33       	cpi	r25, 0x36	; 54
    6bf4:	20 f4       	brcc	.+8      	; 0x6bfe <vfprintf+0x352>
    6bf6:	95 33       	cpi	r25, 0x35	; 53
    6bf8:	19 f4       	brne	.+6      	; 0x6c00 <vfprintf+0x354>
    6bfa:	3c 85       	ldd	r19, Y+12	; 0x0c
    6bfc:	34 ff       	sbrs	r19, 4
    6bfe:	81 e3       	ldi	r24, 0x31	; 49
    6c00:	b7 01       	movw	r22, r14
    6c02:	90 e0       	ldi	r25, 0x00	; 0
    6c04:	48 c0       	rjmp	.+144    	; 0x6c96 <vfprintf+0x3ea>
    6c06:	8a 81       	ldd	r24, Y+2	; 0x02
    6c08:	81 33       	cpi	r24, 0x31	; 49
    6c0a:	19 f0       	breq	.+6      	; 0x6c12 <vfprintf+0x366>
    6c0c:	9c 85       	ldd	r25, Y+12	; 0x0c
    6c0e:	9f 7e       	andi	r25, 0xEF	; 239
    6c10:	9c 87       	std	Y+12, r25	; 0x0c
    6c12:	b7 01       	movw	r22, r14
    6c14:	90 e0       	ldi	r25, 0x00	; 0
    6c16:	64 d4       	rcall	.+2248   	; 0x74e0 <fputc>
    6c18:	11 11       	cpse	r17, r1
    6c1a:	05 c0       	rjmp	.+10     	; 0x6c26 <vfprintf+0x37a>
    6c1c:	94 fc       	sbrc	r9, 4
    6c1e:	16 c0       	rjmp	.+44     	; 0x6c4c <vfprintf+0x3a0>
    6c20:	85 e6       	ldi	r24, 0x65	; 101
    6c22:	90 e0       	ldi	r25, 0x00	; 0
    6c24:	15 c0       	rjmp	.+42     	; 0x6c50 <vfprintf+0x3a4>
    6c26:	b7 01       	movw	r22, r14
    6c28:	8e e2       	ldi	r24, 0x2E	; 46
    6c2a:	90 e0       	ldi	r25, 0x00	; 0
    6c2c:	59 d4       	rcall	.+2226   	; 0x74e0 <fputc>
    6c2e:	1e 5f       	subi	r17, 0xFE	; 254
    6c30:	82 e0       	ldi	r24, 0x02	; 2
    6c32:	01 e0       	ldi	r16, 0x01	; 1
    6c34:	08 0f       	add	r16, r24
    6c36:	f3 01       	movw	r30, r6
    6c38:	e8 0f       	add	r30, r24
    6c3a:	f1 1d       	adc	r31, r1
    6c3c:	80 81       	ld	r24, Z
    6c3e:	b7 01       	movw	r22, r14
    6c40:	90 e0       	ldi	r25, 0x00	; 0
    6c42:	4e d4       	rcall	.+2204   	; 0x74e0 <fputc>
    6c44:	80 2f       	mov	r24, r16
    6c46:	01 13       	cpse	r16, r17
    6c48:	f4 cf       	rjmp	.-24     	; 0x6c32 <vfprintf+0x386>
    6c4a:	e8 cf       	rjmp	.-48     	; 0x6c1c <vfprintf+0x370>
    6c4c:	85 e4       	ldi	r24, 0x45	; 69
    6c4e:	90 e0       	ldi	r25, 0x00	; 0
    6c50:	b7 01       	movw	r22, r14
    6c52:	46 d4       	rcall	.+2188   	; 0x74e0 <fputc>
    6c54:	d7 fc       	sbrc	r13, 7
    6c56:	06 c0       	rjmp	.+12     	; 0x6c64 <vfprintf+0x3b8>
    6c58:	c1 14       	cp	r12, r1
    6c5a:	d1 04       	cpc	r13, r1
    6c5c:	41 f4       	brne	.+16     	; 0x6c6e <vfprintf+0x3c2>
    6c5e:	ec 85       	ldd	r30, Y+12	; 0x0c
    6c60:	e4 ff       	sbrs	r30, 4
    6c62:	05 c0       	rjmp	.+10     	; 0x6c6e <vfprintf+0x3c2>
    6c64:	d1 94       	neg	r13
    6c66:	c1 94       	neg	r12
    6c68:	d1 08       	sbc	r13, r1
    6c6a:	8d e2       	ldi	r24, 0x2D	; 45
    6c6c:	01 c0       	rjmp	.+2      	; 0x6c70 <vfprintf+0x3c4>
    6c6e:	8b e2       	ldi	r24, 0x2B	; 43
    6c70:	b7 01       	movw	r22, r14
    6c72:	90 e0       	ldi	r25, 0x00	; 0
    6c74:	35 d4       	rcall	.+2154   	; 0x74e0 <fputc>
    6c76:	80 e3       	ldi	r24, 0x30	; 48
    6c78:	2a e0       	ldi	r18, 0x0A	; 10
    6c7a:	c2 16       	cp	r12, r18
    6c7c:	d1 04       	cpc	r13, r1
    6c7e:	2c f0       	brlt	.+10     	; 0x6c8a <vfprintf+0x3de>
    6c80:	8f 5f       	subi	r24, 0xFF	; 255
    6c82:	fa e0       	ldi	r31, 0x0A	; 10
    6c84:	cf 1a       	sub	r12, r31
    6c86:	d1 08       	sbc	r13, r1
    6c88:	f7 cf       	rjmp	.-18     	; 0x6c78 <vfprintf+0x3cc>
    6c8a:	b7 01       	movw	r22, r14
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	28 d4       	rcall	.+2128   	; 0x74e0 <fputc>
    6c90:	b7 01       	movw	r22, r14
    6c92:	c6 01       	movw	r24, r12
    6c94:	c0 96       	adiw	r24, 0x30	; 48
    6c96:	24 d4       	rcall	.+2120   	; 0x74e0 <fputc>
    6c98:	49 c1       	rjmp	.+658    	; 0x6f2c <vfprintf+0x680>
    6c9a:	83 36       	cpi	r24, 0x63	; 99
    6c9c:	31 f0       	breq	.+12     	; 0x6caa <vfprintf+0x3fe>
    6c9e:	83 37       	cpi	r24, 0x73	; 115
    6ca0:	79 f0       	breq	.+30     	; 0x6cc0 <vfprintf+0x414>
    6ca2:	83 35       	cpi	r24, 0x53	; 83
    6ca4:	09 f0       	breq	.+2      	; 0x6ca8 <vfprintf+0x3fc>
    6ca6:	52 c0       	rjmp	.+164    	; 0x6d4c <vfprintf+0x4a0>
    6ca8:	1f c0       	rjmp	.+62     	; 0x6ce8 <vfprintf+0x43c>
    6caa:	56 01       	movw	r10, r12
    6cac:	32 e0       	ldi	r19, 0x02	; 2
    6cae:	a3 0e       	add	r10, r19
    6cb0:	b1 1c       	adc	r11, r1
    6cb2:	f6 01       	movw	r30, r12
    6cb4:	80 81       	ld	r24, Z
    6cb6:	89 83       	std	Y+1, r24	; 0x01
    6cb8:	01 e0       	ldi	r16, 0x01	; 1
    6cba:	10 e0       	ldi	r17, 0x00	; 0
    6cbc:	63 01       	movw	r12, r6
    6cbe:	11 c0       	rjmp	.+34     	; 0x6ce2 <vfprintf+0x436>
    6cc0:	56 01       	movw	r10, r12
    6cc2:	f2 e0       	ldi	r31, 0x02	; 2
    6cc4:	af 0e       	add	r10, r31
    6cc6:	b1 1c       	adc	r11, r1
    6cc8:	f6 01       	movw	r30, r12
    6cca:	c0 80       	ld	r12, Z
    6ccc:	d1 80       	ldd	r13, Z+1	; 0x01
    6cce:	96 fe       	sbrs	r9, 6
    6cd0:	03 c0       	rjmp	.+6      	; 0x6cd8 <vfprintf+0x42c>
    6cd2:	61 2f       	mov	r22, r17
    6cd4:	70 e0       	ldi	r23, 0x00	; 0
    6cd6:	02 c0       	rjmp	.+4      	; 0x6cdc <vfprintf+0x430>
    6cd8:	6f ef       	ldi	r22, 0xFF	; 255
    6cda:	7f ef       	ldi	r23, 0xFF	; 255
    6cdc:	c6 01       	movw	r24, r12
    6cde:	f5 d3       	rcall	.+2026   	; 0x74ca <strnlen>
    6ce0:	8c 01       	movw	r16, r24
    6ce2:	f9 2d       	mov	r31, r9
    6ce4:	ff 77       	andi	r31, 0x7F	; 127
    6ce6:	13 c0       	rjmp	.+38     	; 0x6d0e <vfprintf+0x462>
    6ce8:	56 01       	movw	r10, r12
    6cea:	22 e0       	ldi	r18, 0x02	; 2
    6cec:	a2 0e       	add	r10, r18
    6cee:	b1 1c       	adc	r11, r1
    6cf0:	f6 01       	movw	r30, r12
    6cf2:	c0 80       	ld	r12, Z
    6cf4:	d1 80       	ldd	r13, Z+1	; 0x01
    6cf6:	96 fe       	sbrs	r9, 6
    6cf8:	03 c0       	rjmp	.+6      	; 0x6d00 <vfprintf+0x454>
    6cfa:	61 2f       	mov	r22, r17
    6cfc:	70 e0       	ldi	r23, 0x00	; 0
    6cfe:	02 c0       	rjmp	.+4      	; 0x6d04 <vfprintf+0x458>
    6d00:	6f ef       	ldi	r22, 0xFF	; 255
    6d02:	7f ef       	ldi	r23, 0xFF	; 255
    6d04:	c6 01       	movw	r24, r12
    6d06:	9c d3       	rcall	.+1848   	; 0x7440 <strnlen_P>
    6d08:	8c 01       	movw	r16, r24
    6d0a:	f9 2d       	mov	r31, r9
    6d0c:	f0 68       	ori	r31, 0x80	; 128
    6d0e:	9f 2e       	mov	r9, r31
    6d10:	f3 fd       	sbrc	r31, 3
    6d12:	18 c0       	rjmp	.+48     	; 0x6d44 <vfprintf+0x498>
    6d14:	85 2d       	mov	r24, r5
    6d16:	90 e0       	ldi	r25, 0x00	; 0
    6d18:	08 17       	cp	r16, r24
    6d1a:	19 07       	cpc	r17, r25
    6d1c:	98 f4       	brcc	.+38     	; 0x6d44 <vfprintf+0x498>
    6d1e:	b7 01       	movw	r22, r14
    6d20:	80 e2       	ldi	r24, 0x20	; 32
    6d22:	90 e0       	ldi	r25, 0x00	; 0
    6d24:	dd d3       	rcall	.+1978   	; 0x74e0 <fputc>
    6d26:	5a 94       	dec	r5
    6d28:	f5 cf       	rjmp	.-22     	; 0x6d14 <vfprintf+0x468>
    6d2a:	f6 01       	movw	r30, r12
    6d2c:	97 fc       	sbrc	r9, 7
    6d2e:	85 91       	lpm	r24, Z+
    6d30:	97 fe       	sbrs	r9, 7
    6d32:	81 91       	ld	r24, Z+
    6d34:	6f 01       	movw	r12, r30
    6d36:	b7 01       	movw	r22, r14
    6d38:	90 e0       	ldi	r25, 0x00	; 0
    6d3a:	d2 d3       	rcall	.+1956   	; 0x74e0 <fputc>
    6d3c:	51 10       	cpse	r5, r1
    6d3e:	5a 94       	dec	r5
    6d40:	01 50       	subi	r16, 0x01	; 1
    6d42:	11 09       	sbc	r17, r1
    6d44:	01 15       	cp	r16, r1
    6d46:	11 05       	cpc	r17, r1
    6d48:	81 f7       	brne	.-32     	; 0x6d2a <vfprintf+0x47e>
    6d4a:	f0 c0       	rjmp	.+480    	; 0x6f2c <vfprintf+0x680>
    6d4c:	84 36       	cpi	r24, 0x64	; 100
    6d4e:	11 f0       	breq	.+4      	; 0x6d54 <vfprintf+0x4a8>
    6d50:	89 36       	cpi	r24, 0x69	; 105
    6d52:	59 f5       	brne	.+86     	; 0x6daa <vfprintf+0x4fe>
    6d54:	56 01       	movw	r10, r12
    6d56:	97 fe       	sbrs	r9, 7
    6d58:	09 c0       	rjmp	.+18     	; 0x6d6c <vfprintf+0x4c0>
    6d5a:	24 e0       	ldi	r18, 0x04	; 4
    6d5c:	a2 0e       	add	r10, r18
    6d5e:	b1 1c       	adc	r11, r1
    6d60:	f6 01       	movw	r30, r12
    6d62:	60 81       	ld	r22, Z
    6d64:	71 81       	ldd	r23, Z+1	; 0x01
    6d66:	82 81       	ldd	r24, Z+2	; 0x02
    6d68:	93 81       	ldd	r25, Z+3	; 0x03
    6d6a:	0a c0       	rjmp	.+20     	; 0x6d80 <vfprintf+0x4d4>
    6d6c:	f2 e0       	ldi	r31, 0x02	; 2
    6d6e:	af 0e       	add	r10, r31
    6d70:	b1 1c       	adc	r11, r1
    6d72:	f6 01       	movw	r30, r12
    6d74:	60 81       	ld	r22, Z
    6d76:	71 81       	ldd	r23, Z+1	; 0x01
    6d78:	07 2e       	mov	r0, r23
    6d7a:	00 0c       	add	r0, r0
    6d7c:	88 0b       	sbc	r24, r24
    6d7e:	99 0b       	sbc	r25, r25
    6d80:	f9 2d       	mov	r31, r9
    6d82:	ff 76       	andi	r31, 0x6F	; 111
    6d84:	9f 2e       	mov	r9, r31
    6d86:	97 ff       	sbrs	r25, 7
    6d88:	09 c0       	rjmp	.+18     	; 0x6d9c <vfprintf+0x4f0>
    6d8a:	90 95       	com	r25
    6d8c:	80 95       	com	r24
    6d8e:	70 95       	com	r23
    6d90:	61 95       	neg	r22
    6d92:	7f 4f       	sbci	r23, 0xFF	; 255
    6d94:	8f 4f       	sbci	r24, 0xFF	; 255
    6d96:	9f 4f       	sbci	r25, 0xFF	; 255
    6d98:	f0 68       	ori	r31, 0x80	; 128
    6d9a:	9f 2e       	mov	r9, r31
    6d9c:	2a e0       	ldi	r18, 0x0A	; 10
    6d9e:	30 e0       	ldi	r19, 0x00	; 0
    6da0:	a3 01       	movw	r20, r6
    6da2:	4b d4       	rcall	.+2198   	; 0x763a <__ultoa_invert>
    6da4:	c8 2e       	mov	r12, r24
    6da6:	c6 18       	sub	r12, r6
    6da8:	3e c0       	rjmp	.+124    	; 0x6e26 <vfprintf+0x57a>
    6daa:	09 2d       	mov	r16, r9
    6dac:	85 37       	cpi	r24, 0x75	; 117
    6dae:	21 f4       	brne	.+8      	; 0x6db8 <vfprintf+0x50c>
    6db0:	0f 7e       	andi	r16, 0xEF	; 239
    6db2:	2a e0       	ldi	r18, 0x0A	; 10
    6db4:	30 e0       	ldi	r19, 0x00	; 0
    6db6:	1d c0       	rjmp	.+58     	; 0x6df2 <vfprintf+0x546>
    6db8:	09 7f       	andi	r16, 0xF9	; 249
    6dba:	8f 36       	cpi	r24, 0x6F	; 111
    6dbc:	91 f0       	breq	.+36     	; 0x6de2 <vfprintf+0x536>
    6dbe:	18 f4       	brcc	.+6      	; 0x6dc6 <vfprintf+0x51a>
    6dc0:	88 35       	cpi	r24, 0x58	; 88
    6dc2:	59 f0       	breq	.+22     	; 0x6dda <vfprintf+0x52e>
    6dc4:	bc c0       	rjmp	.+376    	; 0x6f3e <vfprintf+0x692>
    6dc6:	80 37       	cpi	r24, 0x70	; 112
    6dc8:	19 f0       	breq	.+6      	; 0x6dd0 <vfprintf+0x524>
    6dca:	88 37       	cpi	r24, 0x78	; 120
    6dcc:	11 f0       	breq	.+4      	; 0x6dd2 <vfprintf+0x526>
    6dce:	b7 c0       	rjmp	.+366    	; 0x6f3e <vfprintf+0x692>
    6dd0:	00 61       	ori	r16, 0x10	; 16
    6dd2:	04 ff       	sbrs	r16, 4
    6dd4:	09 c0       	rjmp	.+18     	; 0x6de8 <vfprintf+0x53c>
    6dd6:	04 60       	ori	r16, 0x04	; 4
    6dd8:	07 c0       	rjmp	.+14     	; 0x6de8 <vfprintf+0x53c>
    6dda:	94 fe       	sbrs	r9, 4
    6ddc:	08 c0       	rjmp	.+16     	; 0x6dee <vfprintf+0x542>
    6dde:	06 60       	ori	r16, 0x06	; 6
    6de0:	06 c0       	rjmp	.+12     	; 0x6dee <vfprintf+0x542>
    6de2:	28 e0       	ldi	r18, 0x08	; 8
    6de4:	30 e0       	ldi	r19, 0x00	; 0
    6de6:	05 c0       	rjmp	.+10     	; 0x6df2 <vfprintf+0x546>
    6de8:	20 e1       	ldi	r18, 0x10	; 16
    6dea:	30 e0       	ldi	r19, 0x00	; 0
    6dec:	02 c0       	rjmp	.+4      	; 0x6df2 <vfprintf+0x546>
    6dee:	20 e1       	ldi	r18, 0x10	; 16
    6df0:	32 e0       	ldi	r19, 0x02	; 2
    6df2:	56 01       	movw	r10, r12
    6df4:	07 ff       	sbrs	r16, 7
    6df6:	09 c0       	rjmp	.+18     	; 0x6e0a <vfprintf+0x55e>
    6df8:	84 e0       	ldi	r24, 0x04	; 4
    6dfa:	a8 0e       	add	r10, r24
    6dfc:	b1 1c       	adc	r11, r1
    6dfe:	f6 01       	movw	r30, r12
    6e00:	60 81       	ld	r22, Z
    6e02:	71 81       	ldd	r23, Z+1	; 0x01
    6e04:	82 81       	ldd	r24, Z+2	; 0x02
    6e06:	93 81       	ldd	r25, Z+3	; 0x03
    6e08:	08 c0       	rjmp	.+16     	; 0x6e1a <vfprintf+0x56e>
    6e0a:	f2 e0       	ldi	r31, 0x02	; 2
    6e0c:	af 0e       	add	r10, r31
    6e0e:	b1 1c       	adc	r11, r1
    6e10:	f6 01       	movw	r30, r12
    6e12:	60 81       	ld	r22, Z
    6e14:	71 81       	ldd	r23, Z+1	; 0x01
    6e16:	80 e0       	ldi	r24, 0x00	; 0
    6e18:	90 e0       	ldi	r25, 0x00	; 0
    6e1a:	a3 01       	movw	r20, r6
    6e1c:	0e d4       	rcall	.+2076   	; 0x763a <__ultoa_invert>
    6e1e:	c8 2e       	mov	r12, r24
    6e20:	c6 18       	sub	r12, r6
    6e22:	0f 77       	andi	r16, 0x7F	; 127
    6e24:	90 2e       	mov	r9, r16
    6e26:	96 fe       	sbrs	r9, 6
    6e28:	0b c0       	rjmp	.+22     	; 0x6e40 <vfprintf+0x594>
    6e2a:	09 2d       	mov	r16, r9
    6e2c:	0e 7f       	andi	r16, 0xFE	; 254
    6e2e:	c1 16       	cp	r12, r17
    6e30:	50 f4       	brcc	.+20     	; 0x6e46 <vfprintf+0x59a>
    6e32:	94 fe       	sbrs	r9, 4
    6e34:	0a c0       	rjmp	.+20     	; 0x6e4a <vfprintf+0x59e>
    6e36:	92 fc       	sbrc	r9, 2
    6e38:	08 c0       	rjmp	.+16     	; 0x6e4a <vfprintf+0x59e>
    6e3a:	09 2d       	mov	r16, r9
    6e3c:	0e 7e       	andi	r16, 0xEE	; 238
    6e3e:	05 c0       	rjmp	.+10     	; 0x6e4a <vfprintf+0x59e>
    6e40:	dc 2c       	mov	r13, r12
    6e42:	09 2d       	mov	r16, r9
    6e44:	03 c0       	rjmp	.+6      	; 0x6e4c <vfprintf+0x5a0>
    6e46:	dc 2c       	mov	r13, r12
    6e48:	01 c0       	rjmp	.+2      	; 0x6e4c <vfprintf+0x5a0>
    6e4a:	d1 2e       	mov	r13, r17
    6e4c:	04 ff       	sbrs	r16, 4
    6e4e:	0d c0       	rjmp	.+26     	; 0x6e6a <vfprintf+0x5be>
    6e50:	fe 01       	movw	r30, r28
    6e52:	ec 0d       	add	r30, r12
    6e54:	f1 1d       	adc	r31, r1
    6e56:	80 81       	ld	r24, Z
    6e58:	80 33       	cpi	r24, 0x30	; 48
    6e5a:	11 f4       	brne	.+4      	; 0x6e60 <vfprintf+0x5b4>
    6e5c:	09 7e       	andi	r16, 0xE9	; 233
    6e5e:	09 c0       	rjmp	.+18     	; 0x6e72 <vfprintf+0x5c6>
    6e60:	02 ff       	sbrs	r16, 2
    6e62:	06 c0       	rjmp	.+12     	; 0x6e70 <vfprintf+0x5c4>
    6e64:	d3 94       	inc	r13
    6e66:	d3 94       	inc	r13
    6e68:	04 c0       	rjmp	.+8      	; 0x6e72 <vfprintf+0x5c6>
    6e6a:	80 2f       	mov	r24, r16
    6e6c:	86 78       	andi	r24, 0x86	; 134
    6e6e:	09 f0       	breq	.+2      	; 0x6e72 <vfprintf+0x5c6>
    6e70:	d3 94       	inc	r13
    6e72:	03 fd       	sbrc	r16, 3
    6e74:	10 c0       	rjmp	.+32     	; 0x6e96 <vfprintf+0x5ea>
    6e76:	00 ff       	sbrs	r16, 0
    6e78:	06 c0       	rjmp	.+12     	; 0x6e86 <vfprintf+0x5da>
    6e7a:	1c 2d       	mov	r17, r12
    6e7c:	d5 14       	cp	r13, r5
    6e7e:	78 f4       	brcc	.+30     	; 0x6e9e <vfprintf+0x5f2>
    6e80:	15 0d       	add	r17, r5
    6e82:	1d 19       	sub	r17, r13
    6e84:	0c c0       	rjmp	.+24     	; 0x6e9e <vfprintf+0x5f2>
    6e86:	d5 14       	cp	r13, r5
    6e88:	50 f4       	brcc	.+20     	; 0x6e9e <vfprintf+0x5f2>
    6e8a:	b7 01       	movw	r22, r14
    6e8c:	80 e2       	ldi	r24, 0x20	; 32
    6e8e:	90 e0       	ldi	r25, 0x00	; 0
    6e90:	27 d3       	rcall	.+1614   	; 0x74e0 <fputc>
    6e92:	d3 94       	inc	r13
    6e94:	f8 cf       	rjmp	.-16     	; 0x6e86 <vfprintf+0x5da>
    6e96:	d5 14       	cp	r13, r5
    6e98:	10 f4       	brcc	.+4      	; 0x6e9e <vfprintf+0x5f2>
    6e9a:	5d 18       	sub	r5, r13
    6e9c:	01 c0       	rjmp	.+2      	; 0x6ea0 <vfprintf+0x5f4>
    6e9e:	51 2c       	mov	r5, r1
    6ea0:	04 ff       	sbrs	r16, 4
    6ea2:	0f c0       	rjmp	.+30     	; 0x6ec2 <vfprintf+0x616>
    6ea4:	b7 01       	movw	r22, r14
    6ea6:	80 e3       	ldi	r24, 0x30	; 48
    6ea8:	90 e0       	ldi	r25, 0x00	; 0
    6eaa:	1a d3       	rcall	.+1588   	; 0x74e0 <fputc>
    6eac:	02 ff       	sbrs	r16, 2
    6eae:	16 c0       	rjmp	.+44     	; 0x6edc <vfprintf+0x630>
    6eb0:	01 fd       	sbrc	r16, 1
    6eb2:	03 c0       	rjmp	.+6      	; 0x6eba <vfprintf+0x60e>
    6eb4:	88 e7       	ldi	r24, 0x78	; 120
    6eb6:	90 e0       	ldi	r25, 0x00	; 0
    6eb8:	02 c0       	rjmp	.+4      	; 0x6ebe <vfprintf+0x612>
    6eba:	88 e5       	ldi	r24, 0x58	; 88
    6ebc:	90 e0       	ldi	r25, 0x00	; 0
    6ebe:	b7 01       	movw	r22, r14
    6ec0:	0c c0       	rjmp	.+24     	; 0x6eda <vfprintf+0x62e>
    6ec2:	80 2f       	mov	r24, r16
    6ec4:	86 78       	andi	r24, 0x86	; 134
    6ec6:	51 f0       	breq	.+20     	; 0x6edc <vfprintf+0x630>
    6ec8:	01 ff       	sbrs	r16, 1
    6eca:	02 c0       	rjmp	.+4      	; 0x6ed0 <vfprintf+0x624>
    6ecc:	8b e2       	ldi	r24, 0x2B	; 43
    6ece:	01 c0       	rjmp	.+2      	; 0x6ed2 <vfprintf+0x626>
    6ed0:	80 e2       	ldi	r24, 0x20	; 32
    6ed2:	07 fd       	sbrc	r16, 7
    6ed4:	8d e2       	ldi	r24, 0x2D	; 45
    6ed6:	b7 01       	movw	r22, r14
    6ed8:	90 e0       	ldi	r25, 0x00	; 0
    6eda:	02 d3       	rcall	.+1540   	; 0x74e0 <fputc>
    6edc:	c1 16       	cp	r12, r17
    6ede:	30 f4       	brcc	.+12     	; 0x6eec <vfprintf+0x640>
    6ee0:	b7 01       	movw	r22, r14
    6ee2:	80 e3       	ldi	r24, 0x30	; 48
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	fc d2       	rcall	.+1528   	; 0x74e0 <fputc>
    6ee8:	11 50       	subi	r17, 0x01	; 1
    6eea:	f8 cf       	rjmp	.-16     	; 0x6edc <vfprintf+0x630>
    6eec:	ca 94       	dec	r12
    6eee:	f3 01       	movw	r30, r6
    6ef0:	ec 0d       	add	r30, r12
    6ef2:	f1 1d       	adc	r31, r1
    6ef4:	80 81       	ld	r24, Z
    6ef6:	b7 01       	movw	r22, r14
    6ef8:	90 e0       	ldi	r25, 0x00	; 0
    6efa:	f2 d2       	rcall	.+1508   	; 0x74e0 <fputc>
    6efc:	c1 10       	cpse	r12, r1
    6efe:	f6 cf       	rjmp	.-20     	; 0x6eec <vfprintf+0x640>
    6f00:	15 c0       	rjmp	.+42     	; 0x6f2c <vfprintf+0x680>
    6f02:	f4 e0       	ldi	r31, 0x04	; 4
    6f04:	f5 15       	cp	r31, r5
    6f06:	50 f5       	brcc	.+84     	; 0x6f5c <vfprintf+0x6b0>
    6f08:	84 e0       	ldi	r24, 0x04	; 4
    6f0a:	58 1a       	sub	r5, r24
    6f0c:	93 fe       	sbrs	r9, 3
    6f0e:	1e c0       	rjmp	.+60     	; 0x6f4c <vfprintf+0x6a0>
    6f10:	01 11       	cpse	r16, r1
    6f12:	25 c0       	rjmp	.+74     	; 0x6f5e <vfprintf+0x6b2>
    6f14:	2c 85       	ldd	r18, Y+12	; 0x0c
    6f16:	23 ff       	sbrs	r18, 3
    6f18:	27 c0       	rjmp	.+78     	; 0x6f68 <vfprintf+0x6bc>
    6f1a:	0a e9       	ldi	r16, 0x9A	; 154
    6f1c:	11 e0       	ldi	r17, 0x01	; 1
    6f1e:	39 2d       	mov	r19, r9
    6f20:	30 71       	andi	r19, 0x10	; 16
    6f22:	93 2e       	mov	r9, r19
    6f24:	f8 01       	movw	r30, r16
    6f26:	84 91       	lpm	r24, Z
    6f28:	81 11       	cpse	r24, r1
    6f2a:	21 c0       	rjmp	.+66     	; 0x6f6e <vfprintf+0x6c2>
    6f2c:	55 20       	and	r5, r5
    6f2e:	09 f4       	brne	.+2      	; 0x6f32 <vfprintf+0x686>
    6f30:	fc cc       	rjmp	.-1544   	; 0x692a <vfprintf+0x7e>
    6f32:	b7 01       	movw	r22, r14
    6f34:	80 e2       	ldi	r24, 0x20	; 32
    6f36:	90 e0       	ldi	r25, 0x00	; 0
    6f38:	d3 d2       	rcall	.+1446   	; 0x74e0 <fputc>
    6f3a:	5a 94       	dec	r5
    6f3c:	f7 cf       	rjmp	.-18     	; 0x6f2c <vfprintf+0x680>
    6f3e:	f7 01       	movw	r30, r14
    6f40:	86 81       	ldd	r24, Z+6	; 0x06
    6f42:	97 81       	ldd	r25, Z+7	; 0x07
    6f44:	23 c0       	rjmp	.+70     	; 0x6f8c <vfprintf+0x6e0>
    6f46:	8f ef       	ldi	r24, 0xFF	; 255
    6f48:	9f ef       	ldi	r25, 0xFF	; 255
    6f4a:	20 c0       	rjmp	.+64     	; 0x6f8c <vfprintf+0x6e0>
    6f4c:	b7 01       	movw	r22, r14
    6f4e:	80 e2       	ldi	r24, 0x20	; 32
    6f50:	90 e0       	ldi	r25, 0x00	; 0
    6f52:	c6 d2       	rcall	.+1420   	; 0x74e0 <fputc>
    6f54:	5a 94       	dec	r5
    6f56:	51 10       	cpse	r5, r1
    6f58:	f9 cf       	rjmp	.-14     	; 0x6f4c <vfprintf+0x6a0>
    6f5a:	da cf       	rjmp	.-76     	; 0x6f10 <vfprintf+0x664>
    6f5c:	51 2c       	mov	r5, r1
    6f5e:	b7 01       	movw	r22, r14
    6f60:	80 2f       	mov	r24, r16
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	bd d2       	rcall	.+1402   	; 0x74e0 <fputc>
    6f66:	d6 cf       	rjmp	.-84     	; 0x6f14 <vfprintf+0x668>
    6f68:	0e e9       	ldi	r16, 0x9E	; 158
    6f6a:	11 e0       	ldi	r17, 0x01	; 1
    6f6c:	d8 cf       	rjmp	.-80     	; 0x6f1e <vfprintf+0x672>
    6f6e:	91 10       	cpse	r9, r1
    6f70:	80 52       	subi	r24, 0x20	; 32
    6f72:	b7 01       	movw	r22, r14
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	b4 d2       	rcall	.+1384   	; 0x74e0 <fputc>
    6f78:	0f 5f       	subi	r16, 0xFF	; 255
    6f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    6f7c:	d3 cf       	rjmp	.-90     	; 0x6f24 <vfprintf+0x678>
    6f7e:	23 e0       	ldi	r18, 0x03	; 3
    6f80:	25 15       	cp	r18, r5
    6f82:	10 f4       	brcc	.+4      	; 0x6f88 <vfprintf+0x6dc>
    6f84:	83 e0       	ldi	r24, 0x03	; 3
    6f86:	c1 cf       	rjmp	.-126    	; 0x6f0a <vfprintf+0x65e>
    6f88:	51 2c       	mov	r5, r1
    6f8a:	c4 cf       	rjmp	.-120    	; 0x6f14 <vfprintf+0x668>
    6f8c:	60 96       	adiw	r28, 0x10	; 16
    6f8e:	0f b6       	in	r0, 0x3f	; 63
    6f90:	f8 94       	cli
    6f92:	de bf       	out	0x3e, r29	; 62
    6f94:	0f be       	out	0x3f, r0	; 63
    6f96:	cd bf       	out	0x3d, r28	; 61
    6f98:	df 91       	pop	r29
    6f9a:	cf 91       	pop	r28
    6f9c:	1f 91       	pop	r17
    6f9e:	0f 91       	pop	r16
    6fa0:	ff 90       	pop	r15
    6fa2:	ef 90       	pop	r14
    6fa4:	df 90       	pop	r13
    6fa6:	cf 90       	pop	r12
    6fa8:	bf 90       	pop	r11
    6faa:	af 90       	pop	r10
    6fac:	9f 90       	pop	r9
    6fae:	8f 90       	pop	r8
    6fb0:	7f 90       	pop	r7
    6fb2:	6f 90       	pop	r6
    6fb4:	5f 90       	pop	r5
    6fb6:	4f 90       	pop	r4
    6fb8:	3f 90       	pop	r3
    6fba:	2f 90       	pop	r2
    6fbc:	08 95       	ret

00006fbe <__udivmodsi4>:
    6fbe:	a1 e2       	ldi	r26, 0x21	; 33
    6fc0:	1a 2e       	mov	r1, r26
    6fc2:	aa 1b       	sub	r26, r26
    6fc4:	bb 1b       	sub	r27, r27
    6fc6:	fd 01       	movw	r30, r26
    6fc8:	0d c0       	rjmp	.+26     	; 0x6fe4 <__udivmodsi4_ep>

00006fca <__udivmodsi4_loop>:
    6fca:	aa 1f       	adc	r26, r26
    6fcc:	bb 1f       	adc	r27, r27
    6fce:	ee 1f       	adc	r30, r30
    6fd0:	ff 1f       	adc	r31, r31
    6fd2:	a2 17       	cp	r26, r18
    6fd4:	b3 07       	cpc	r27, r19
    6fd6:	e4 07       	cpc	r30, r20
    6fd8:	f5 07       	cpc	r31, r21
    6fda:	20 f0       	brcs	.+8      	; 0x6fe4 <__udivmodsi4_ep>
    6fdc:	a2 1b       	sub	r26, r18
    6fde:	b3 0b       	sbc	r27, r19
    6fe0:	e4 0b       	sbc	r30, r20
    6fe2:	f5 0b       	sbc	r31, r21

00006fe4 <__udivmodsi4_ep>:
    6fe4:	66 1f       	adc	r22, r22
    6fe6:	77 1f       	adc	r23, r23
    6fe8:	88 1f       	adc	r24, r24
    6fea:	99 1f       	adc	r25, r25
    6fec:	1a 94       	dec	r1
    6fee:	69 f7       	brne	.-38     	; 0x6fca <__udivmodsi4_loop>
    6ff0:	60 95       	com	r22
    6ff2:	70 95       	com	r23
    6ff4:	80 95       	com	r24
    6ff6:	90 95       	com	r25
    6ff8:	9b 01       	movw	r18, r22
    6ffa:	ac 01       	movw	r20, r24
    6ffc:	bd 01       	movw	r22, r26
    6ffe:	cf 01       	movw	r24, r30
    7000:	08 95       	ret

00007002 <__tablejump2__>:
    7002:	ee 0f       	add	r30, r30
    7004:	ff 1f       	adc	r31, r31
    7006:	88 1f       	adc	r24, r24
    7008:	8b bf       	out	0x3b, r24	; 59
    700a:	07 90       	elpm	r0, Z+
    700c:	f6 91       	elpm	r31, Z
    700e:	e0 2d       	mov	r30, r0
    7010:	19 94       	eijmp

00007012 <calloc>:
    7012:	0f 93       	push	r16
    7014:	1f 93       	push	r17
    7016:	cf 93       	push	r28
    7018:	df 93       	push	r29
    701a:	86 9f       	mul	r24, r22
    701c:	80 01       	movw	r16, r0
    701e:	87 9f       	mul	r24, r23
    7020:	10 0d       	add	r17, r0
    7022:	96 9f       	mul	r25, r22
    7024:	10 0d       	add	r17, r0
    7026:	11 24       	eor	r1, r1
    7028:	c8 01       	movw	r24, r16
    702a:	0d d0       	rcall	.+26     	; 0x7046 <malloc>
    702c:	ec 01       	movw	r28, r24
    702e:	00 97       	sbiw	r24, 0x00	; 0
    7030:	21 f0       	breq	.+8      	; 0x703a <calloc+0x28>
    7032:	a8 01       	movw	r20, r16
    7034:	60 e0       	ldi	r22, 0x00	; 0
    7036:	70 e0       	ldi	r23, 0x00	; 0
    7038:	17 d2       	rcall	.+1070   	; 0x7468 <memset>
    703a:	ce 01       	movw	r24, r28
    703c:	df 91       	pop	r29
    703e:	cf 91       	pop	r28
    7040:	1f 91       	pop	r17
    7042:	0f 91       	pop	r16
    7044:	08 95       	ret

00007046 <malloc>:
    7046:	0f 93       	push	r16
    7048:	1f 93       	push	r17
    704a:	cf 93       	push	r28
    704c:	df 93       	push	r29
    704e:	82 30       	cpi	r24, 0x02	; 2
    7050:	91 05       	cpc	r25, r1
    7052:	10 f4       	brcc	.+4      	; 0x7058 <malloc+0x12>
    7054:	82 e0       	ldi	r24, 0x02	; 2
    7056:	90 e0       	ldi	r25, 0x00	; 0
    7058:	e0 91 c8 09 	lds	r30, 0x09C8	; 0x8009c8 <__flp>
    705c:	f0 91 c9 09 	lds	r31, 0x09C9	; 0x8009c9 <__flp+0x1>
    7060:	20 e0       	ldi	r18, 0x00	; 0
    7062:	30 e0       	ldi	r19, 0x00	; 0
    7064:	a0 e0       	ldi	r26, 0x00	; 0
    7066:	b0 e0       	ldi	r27, 0x00	; 0
    7068:	30 97       	sbiw	r30, 0x00	; 0
    706a:	19 f1       	breq	.+70     	; 0x70b2 <malloc+0x6c>
    706c:	40 81       	ld	r20, Z
    706e:	51 81       	ldd	r21, Z+1	; 0x01
    7070:	02 81       	ldd	r16, Z+2	; 0x02
    7072:	13 81       	ldd	r17, Z+3	; 0x03
    7074:	48 17       	cp	r20, r24
    7076:	59 07       	cpc	r21, r25
    7078:	c8 f0       	brcs	.+50     	; 0x70ac <malloc+0x66>
    707a:	84 17       	cp	r24, r20
    707c:	95 07       	cpc	r25, r21
    707e:	69 f4       	brne	.+26     	; 0x709a <malloc+0x54>
    7080:	10 97       	sbiw	r26, 0x00	; 0
    7082:	31 f0       	breq	.+12     	; 0x7090 <malloc+0x4a>
    7084:	12 96       	adiw	r26, 0x02	; 2
    7086:	0c 93       	st	X, r16
    7088:	12 97       	sbiw	r26, 0x02	; 2
    708a:	13 96       	adiw	r26, 0x03	; 3
    708c:	1c 93       	st	X, r17
    708e:	27 c0       	rjmp	.+78     	; 0x70de <malloc+0x98>
    7090:	00 93 c8 09 	sts	0x09C8, r16	; 0x8009c8 <__flp>
    7094:	10 93 c9 09 	sts	0x09C9, r17	; 0x8009c9 <__flp+0x1>
    7098:	22 c0       	rjmp	.+68     	; 0x70de <malloc+0x98>
    709a:	21 15       	cp	r18, r1
    709c:	31 05       	cpc	r19, r1
    709e:	19 f0       	breq	.+6      	; 0x70a6 <malloc+0x60>
    70a0:	42 17       	cp	r20, r18
    70a2:	53 07       	cpc	r21, r19
    70a4:	18 f4       	brcc	.+6      	; 0x70ac <malloc+0x66>
    70a6:	9a 01       	movw	r18, r20
    70a8:	bd 01       	movw	r22, r26
    70aa:	ef 01       	movw	r28, r30
    70ac:	df 01       	movw	r26, r30
    70ae:	f8 01       	movw	r30, r16
    70b0:	db cf       	rjmp	.-74     	; 0x7068 <malloc+0x22>
    70b2:	21 15       	cp	r18, r1
    70b4:	31 05       	cpc	r19, r1
    70b6:	f9 f0       	breq	.+62     	; 0x70f6 <malloc+0xb0>
    70b8:	28 1b       	sub	r18, r24
    70ba:	39 0b       	sbc	r19, r25
    70bc:	24 30       	cpi	r18, 0x04	; 4
    70be:	31 05       	cpc	r19, r1
    70c0:	80 f4       	brcc	.+32     	; 0x70e2 <malloc+0x9c>
    70c2:	8a 81       	ldd	r24, Y+2	; 0x02
    70c4:	9b 81       	ldd	r25, Y+3	; 0x03
    70c6:	61 15       	cp	r22, r1
    70c8:	71 05       	cpc	r23, r1
    70ca:	21 f0       	breq	.+8      	; 0x70d4 <malloc+0x8e>
    70cc:	fb 01       	movw	r30, r22
    70ce:	93 83       	std	Z+3, r25	; 0x03
    70d0:	82 83       	std	Z+2, r24	; 0x02
    70d2:	04 c0       	rjmp	.+8      	; 0x70dc <malloc+0x96>
    70d4:	90 93 c9 09 	sts	0x09C9, r25	; 0x8009c9 <__flp+0x1>
    70d8:	80 93 c8 09 	sts	0x09C8, r24	; 0x8009c8 <__flp>
    70dc:	fe 01       	movw	r30, r28
    70de:	32 96       	adiw	r30, 0x02	; 2
    70e0:	44 c0       	rjmp	.+136    	; 0x716a <malloc+0x124>
    70e2:	fe 01       	movw	r30, r28
    70e4:	e2 0f       	add	r30, r18
    70e6:	f3 1f       	adc	r31, r19
    70e8:	81 93       	st	Z+, r24
    70ea:	91 93       	st	Z+, r25
    70ec:	22 50       	subi	r18, 0x02	; 2
    70ee:	31 09       	sbc	r19, r1
    70f0:	39 83       	std	Y+1, r19	; 0x01
    70f2:	28 83       	st	Y, r18
    70f4:	3a c0       	rjmp	.+116    	; 0x716a <malloc+0x124>
    70f6:	20 91 c6 09 	lds	r18, 0x09C6	; 0x8009c6 <__brkval>
    70fa:	30 91 c7 09 	lds	r19, 0x09C7	; 0x8009c7 <__brkval+0x1>
    70fe:	23 2b       	or	r18, r19
    7100:	41 f4       	brne	.+16     	; 0x7112 <malloc+0xcc>
    7102:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    7106:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    710a:	30 93 c7 09 	sts	0x09C7, r19	; 0x8009c7 <__brkval+0x1>
    710e:	20 93 c6 09 	sts	0x09C6, r18	; 0x8009c6 <__brkval>
    7112:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    7116:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    711a:	21 15       	cp	r18, r1
    711c:	31 05       	cpc	r19, r1
    711e:	41 f4       	brne	.+16     	; 0x7130 <malloc+0xea>
    7120:	2d b7       	in	r18, 0x3d	; 61
    7122:	3e b7       	in	r19, 0x3e	; 62
    7124:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    7128:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    712c:	24 1b       	sub	r18, r20
    712e:	35 0b       	sbc	r19, r21
    7130:	e0 91 c6 09 	lds	r30, 0x09C6	; 0x8009c6 <__brkval>
    7134:	f0 91 c7 09 	lds	r31, 0x09C7	; 0x8009c7 <__brkval+0x1>
    7138:	e2 17       	cp	r30, r18
    713a:	f3 07       	cpc	r31, r19
    713c:	a0 f4       	brcc	.+40     	; 0x7166 <malloc+0x120>
    713e:	2e 1b       	sub	r18, r30
    7140:	3f 0b       	sbc	r19, r31
    7142:	28 17       	cp	r18, r24
    7144:	39 07       	cpc	r19, r25
    7146:	78 f0       	brcs	.+30     	; 0x7166 <malloc+0x120>
    7148:	ac 01       	movw	r20, r24
    714a:	4e 5f       	subi	r20, 0xFE	; 254
    714c:	5f 4f       	sbci	r21, 0xFF	; 255
    714e:	24 17       	cp	r18, r20
    7150:	35 07       	cpc	r19, r21
    7152:	48 f0       	brcs	.+18     	; 0x7166 <malloc+0x120>
    7154:	4e 0f       	add	r20, r30
    7156:	5f 1f       	adc	r21, r31
    7158:	50 93 c7 09 	sts	0x09C7, r21	; 0x8009c7 <__brkval+0x1>
    715c:	40 93 c6 09 	sts	0x09C6, r20	; 0x8009c6 <__brkval>
    7160:	81 93       	st	Z+, r24
    7162:	91 93       	st	Z+, r25
    7164:	02 c0       	rjmp	.+4      	; 0x716a <malloc+0x124>
    7166:	e0 e0       	ldi	r30, 0x00	; 0
    7168:	f0 e0       	ldi	r31, 0x00	; 0
    716a:	cf 01       	movw	r24, r30
    716c:	df 91       	pop	r29
    716e:	cf 91       	pop	r28
    7170:	1f 91       	pop	r17
    7172:	0f 91       	pop	r16
    7174:	08 95       	ret

00007176 <free>:
    7176:	cf 93       	push	r28
    7178:	df 93       	push	r29
    717a:	00 97       	sbiw	r24, 0x00	; 0
    717c:	09 f4       	brne	.+2      	; 0x7180 <free+0xa>
    717e:	81 c0       	rjmp	.+258    	; 0x7282 <free+0x10c>
    7180:	fc 01       	movw	r30, r24
    7182:	32 97       	sbiw	r30, 0x02	; 2
    7184:	13 82       	std	Z+3, r1	; 0x03
    7186:	12 82       	std	Z+2, r1	; 0x02
    7188:	a0 91 c8 09 	lds	r26, 0x09C8	; 0x8009c8 <__flp>
    718c:	b0 91 c9 09 	lds	r27, 0x09C9	; 0x8009c9 <__flp+0x1>
    7190:	10 97       	sbiw	r26, 0x00	; 0
    7192:	81 f4       	brne	.+32     	; 0x71b4 <free+0x3e>
    7194:	20 81       	ld	r18, Z
    7196:	31 81       	ldd	r19, Z+1	; 0x01
    7198:	82 0f       	add	r24, r18
    719a:	93 1f       	adc	r25, r19
    719c:	20 91 c6 09 	lds	r18, 0x09C6	; 0x8009c6 <__brkval>
    71a0:	30 91 c7 09 	lds	r19, 0x09C7	; 0x8009c7 <__brkval+0x1>
    71a4:	28 17       	cp	r18, r24
    71a6:	39 07       	cpc	r19, r25
    71a8:	51 f5       	brne	.+84     	; 0x71fe <free+0x88>
    71aa:	f0 93 c7 09 	sts	0x09C7, r31	; 0x8009c7 <__brkval+0x1>
    71ae:	e0 93 c6 09 	sts	0x09C6, r30	; 0x8009c6 <__brkval>
    71b2:	67 c0       	rjmp	.+206    	; 0x7282 <free+0x10c>
    71b4:	ed 01       	movw	r28, r26
    71b6:	20 e0       	ldi	r18, 0x00	; 0
    71b8:	30 e0       	ldi	r19, 0x00	; 0
    71ba:	ce 17       	cp	r28, r30
    71bc:	df 07       	cpc	r29, r31
    71be:	40 f4       	brcc	.+16     	; 0x71d0 <free+0x5a>
    71c0:	4a 81       	ldd	r20, Y+2	; 0x02
    71c2:	5b 81       	ldd	r21, Y+3	; 0x03
    71c4:	9e 01       	movw	r18, r28
    71c6:	41 15       	cp	r20, r1
    71c8:	51 05       	cpc	r21, r1
    71ca:	f1 f0       	breq	.+60     	; 0x7208 <free+0x92>
    71cc:	ea 01       	movw	r28, r20
    71ce:	f5 cf       	rjmp	.-22     	; 0x71ba <free+0x44>
    71d0:	d3 83       	std	Z+3, r29	; 0x03
    71d2:	c2 83       	std	Z+2, r28	; 0x02
    71d4:	40 81       	ld	r20, Z
    71d6:	51 81       	ldd	r21, Z+1	; 0x01
    71d8:	84 0f       	add	r24, r20
    71da:	95 1f       	adc	r25, r21
    71dc:	c8 17       	cp	r28, r24
    71de:	d9 07       	cpc	r29, r25
    71e0:	59 f4       	brne	.+22     	; 0x71f8 <free+0x82>
    71e2:	88 81       	ld	r24, Y
    71e4:	99 81       	ldd	r25, Y+1	; 0x01
    71e6:	84 0f       	add	r24, r20
    71e8:	95 1f       	adc	r25, r21
    71ea:	02 96       	adiw	r24, 0x02	; 2
    71ec:	91 83       	std	Z+1, r25	; 0x01
    71ee:	80 83       	st	Z, r24
    71f0:	8a 81       	ldd	r24, Y+2	; 0x02
    71f2:	9b 81       	ldd	r25, Y+3	; 0x03
    71f4:	93 83       	std	Z+3, r25	; 0x03
    71f6:	82 83       	std	Z+2, r24	; 0x02
    71f8:	21 15       	cp	r18, r1
    71fa:	31 05       	cpc	r19, r1
    71fc:	29 f4       	brne	.+10     	; 0x7208 <free+0x92>
    71fe:	f0 93 c9 09 	sts	0x09C9, r31	; 0x8009c9 <__flp+0x1>
    7202:	e0 93 c8 09 	sts	0x09C8, r30	; 0x8009c8 <__flp>
    7206:	3d c0       	rjmp	.+122    	; 0x7282 <free+0x10c>
    7208:	e9 01       	movw	r28, r18
    720a:	fb 83       	std	Y+3, r31	; 0x03
    720c:	ea 83       	std	Y+2, r30	; 0x02
    720e:	49 91       	ld	r20, Y+
    7210:	59 91       	ld	r21, Y+
    7212:	c4 0f       	add	r28, r20
    7214:	d5 1f       	adc	r29, r21
    7216:	ec 17       	cp	r30, r28
    7218:	fd 07       	cpc	r31, r29
    721a:	61 f4       	brne	.+24     	; 0x7234 <free+0xbe>
    721c:	80 81       	ld	r24, Z
    721e:	91 81       	ldd	r25, Z+1	; 0x01
    7220:	84 0f       	add	r24, r20
    7222:	95 1f       	adc	r25, r21
    7224:	02 96       	adiw	r24, 0x02	; 2
    7226:	e9 01       	movw	r28, r18
    7228:	99 83       	std	Y+1, r25	; 0x01
    722a:	88 83       	st	Y, r24
    722c:	82 81       	ldd	r24, Z+2	; 0x02
    722e:	93 81       	ldd	r25, Z+3	; 0x03
    7230:	9b 83       	std	Y+3, r25	; 0x03
    7232:	8a 83       	std	Y+2, r24	; 0x02
    7234:	e0 e0       	ldi	r30, 0x00	; 0
    7236:	f0 e0       	ldi	r31, 0x00	; 0
    7238:	12 96       	adiw	r26, 0x02	; 2
    723a:	8d 91       	ld	r24, X+
    723c:	9c 91       	ld	r25, X
    723e:	13 97       	sbiw	r26, 0x03	; 3
    7240:	00 97       	sbiw	r24, 0x00	; 0
    7242:	19 f0       	breq	.+6      	; 0x724a <free+0xd4>
    7244:	fd 01       	movw	r30, r26
    7246:	dc 01       	movw	r26, r24
    7248:	f7 cf       	rjmp	.-18     	; 0x7238 <free+0xc2>
    724a:	8d 91       	ld	r24, X+
    724c:	9c 91       	ld	r25, X
    724e:	11 97       	sbiw	r26, 0x01	; 1
    7250:	9d 01       	movw	r18, r26
    7252:	2e 5f       	subi	r18, 0xFE	; 254
    7254:	3f 4f       	sbci	r19, 0xFF	; 255
    7256:	82 0f       	add	r24, r18
    7258:	93 1f       	adc	r25, r19
    725a:	20 91 c6 09 	lds	r18, 0x09C6	; 0x8009c6 <__brkval>
    725e:	30 91 c7 09 	lds	r19, 0x09C7	; 0x8009c7 <__brkval+0x1>
    7262:	28 17       	cp	r18, r24
    7264:	39 07       	cpc	r19, r25
    7266:	69 f4       	brne	.+26     	; 0x7282 <free+0x10c>
    7268:	30 97       	sbiw	r30, 0x00	; 0
    726a:	29 f4       	brne	.+10     	; 0x7276 <free+0x100>
    726c:	10 92 c9 09 	sts	0x09C9, r1	; 0x8009c9 <__flp+0x1>
    7270:	10 92 c8 09 	sts	0x09C8, r1	; 0x8009c8 <__flp>
    7274:	02 c0       	rjmp	.+4      	; 0x727a <free+0x104>
    7276:	13 82       	std	Z+3, r1	; 0x03
    7278:	12 82       	std	Z+2, r1	; 0x02
    727a:	b0 93 c7 09 	sts	0x09C7, r27	; 0x8009c7 <__brkval+0x1>
    727e:	a0 93 c6 09 	sts	0x09C6, r26	; 0x8009c6 <__brkval>
    7282:	df 91       	pop	r29
    7284:	cf 91       	pop	r28
    7286:	08 95       	ret

00007288 <abort>:
    7288:	81 e0       	ldi	r24, 0x01	; 1
    728a:	90 e0       	ldi	r25, 0x00	; 0
    728c:	f8 94       	cli
    728e:	33 c2       	rjmp	.+1126   	; 0x76f6 <_exit>

00007290 <__ftoa_engine>:
    7290:	28 30       	cpi	r18, 0x08	; 8
    7292:	08 f0       	brcs	.+2      	; 0x7296 <__ftoa_engine+0x6>
    7294:	27 e0       	ldi	r18, 0x07	; 7
    7296:	33 27       	eor	r19, r19
    7298:	da 01       	movw	r26, r20
    729a:	99 0f       	add	r25, r25
    729c:	31 1d       	adc	r19, r1
    729e:	87 fd       	sbrc	r24, 7
    72a0:	91 60       	ori	r25, 0x01	; 1
    72a2:	00 96       	adiw	r24, 0x00	; 0
    72a4:	61 05       	cpc	r22, r1
    72a6:	71 05       	cpc	r23, r1
    72a8:	39 f4       	brne	.+14     	; 0x72b8 <__ftoa_engine+0x28>
    72aa:	32 60       	ori	r19, 0x02	; 2
    72ac:	2e 5f       	subi	r18, 0xFE	; 254
    72ae:	3d 93       	st	X+, r19
    72b0:	30 e3       	ldi	r19, 0x30	; 48
    72b2:	2a 95       	dec	r18
    72b4:	e1 f7       	brne	.-8      	; 0x72ae <__ftoa_engine+0x1e>
    72b6:	08 95       	ret
    72b8:	9f 3f       	cpi	r25, 0xFF	; 255
    72ba:	30 f0       	brcs	.+12     	; 0x72c8 <__ftoa_engine+0x38>
    72bc:	80 38       	cpi	r24, 0x80	; 128
    72be:	71 05       	cpc	r23, r1
    72c0:	61 05       	cpc	r22, r1
    72c2:	09 f0       	breq	.+2      	; 0x72c6 <__ftoa_engine+0x36>
    72c4:	3c 5f       	subi	r19, 0xFC	; 252
    72c6:	3c 5f       	subi	r19, 0xFC	; 252
    72c8:	3d 93       	st	X+, r19
    72ca:	91 30       	cpi	r25, 0x01	; 1
    72cc:	08 f0       	brcs	.+2      	; 0x72d0 <__ftoa_engine+0x40>
    72ce:	80 68       	ori	r24, 0x80	; 128
    72d0:	91 1d       	adc	r25, r1
    72d2:	df 93       	push	r29
    72d4:	cf 93       	push	r28
    72d6:	1f 93       	push	r17
    72d8:	0f 93       	push	r16
    72da:	ff 92       	push	r15
    72dc:	ef 92       	push	r14
    72de:	19 2f       	mov	r17, r25
    72e0:	98 7f       	andi	r25, 0xF8	; 248
    72e2:	96 95       	lsr	r25
    72e4:	e9 2f       	mov	r30, r25
    72e6:	96 95       	lsr	r25
    72e8:	96 95       	lsr	r25
    72ea:	e9 0f       	add	r30, r25
    72ec:	ff 27       	eor	r31, r31
    72ee:	e4 50       	subi	r30, 0x04	; 4
    72f0:	fe 4f       	sbci	r31, 0xFE	; 254
    72f2:	99 27       	eor	r25, r25
    72f4:	33 27       	eor	r19, r19
    72f6:	ee 24       	eor	r14, r14
    72f8:	ff 24       	eor	r15, r15
    72fa:	a7 01       	movw	r20, r14
    72fc:	e7 01       	movw	r28, r14
    72fe:	05 90       	lpm	r0, Z+
    7300:	08 94       	sec
    7302:	07 94       	ror	r0
    7304:	28 f4       	brcc	.+10     	; 0x7310 <__ftoa_engine+0x80>
    7306:	36 0f       	add	r19, r22
    7308:	e7 1e       	adc	r14, r23
    730a:	f8 1e       	adc	r15, r24
    730c:	49 1f       	adc	r20, r25
    730e:	51 1d       	adc	r21, r1
    7310:	66 0f       	add	r22, r22
    7312:	77 1f       	adc	r23, r23
    7314:	88 1f       	adc	r24, r24
    7316:	99 1f       	adc	r25, r25
    7318:	06 94       	lsr	r0
    731a:	a1 f7       	brne	.-24     	; 0x7304 <__ftoa_engine+0x74>
    731c:	05 90       	lpm	r0, Z+
    731e:	07 94       	ror	r0
    7320:	28 f4       	brcc	.+10     	; 0x732c <__ftoa_engine+0x9c>
    7322:	e7 0e       	add	r14, r23
    7324:	f8 1e       	adc	r15, r24
    7326:	49 1f       	adc	r20, r25
    7328:	56 1f       	adc	r21, r22
    732a:	c1 1d       	adc	r28, r1
    732c:	77 0f       	add	r23, r23
    732e:	88 1f       	adc	r24, r24
    7330:	99 1f       	adc	r25, r25
    7332:	66 1f       	adc	r22, r22
    7334:	06 94       	lsr	r0
    7336:	a1 f7       	brne	.-24     	; 0x7320 <__ftoa_engine+0x90>
    7338:	05 90       	lpm	r0, Z+
    733a:	07 94       	ror	r0
    733c:	28 f4       	brcc	.+10     	; 0x7348 <__ftoa_engine+0xb8>
    733e:	f8 0e       	add	r15, r24
    7340:	49 1f       	adc	r20, r25
    7342:	56 1f       	adc	r21, r22
    7344:	c7 1f       	adc	r28, r23
    7346:	d1 1d       	adc	r29, r1
    7348:	88 0f       	add	r24, r24
    734a:	99 1f       	adc	r25, r25
    734c:	66 1f       	adc	r22, r22
    734e:	77 1f       	adc	r23, r23
    7350:	06 94       	lsr	r0
    7352:	a1 f7       	brne	.-24     	; 0x733c <__ftoa_engine+0xac>
    7354:	05 90       	lpm	r0, Z+
    7356:	07 94       	ror	r0
    7358:	20 f4       	brcc	.+8      	; 0x7362 <__ftoa_engine+0xd2>
    735a:	49 0f       	add	r20, r25
    735c:	56 1f       	adc	r21, r22
    735e:	c7 1f       	adc	r28, r23
    7360:	d8 1f       	adc	r29, r24
    7362:	99 0f       	add	r25, r25
    7364:	66 1f       	adc	r22, r22
    7366:	77 1f       	adc	r23, r23
    7368:	88 1f       	adc	r24, r24
    736a:	06 94       	lsr	r0
    736c:	a9 f7       	brne	.-22     	; 0x7358 <__ftoa_engine+0xc8>
    736e:	84 91       	lpm	r24, Z
    7370:	10 95       	com	r17
    7372:	17 70       	andi	r17, 0x07	; 7
    7374:	41 f0       	breq	.+16     	; 0x7386 <__ftoa_engine+0xf6>
    7376:	d6 95       	lsr	r29
    7378:	c7 95       	ror	r28
    737a:	57 95       	ror	r21
    737c:	47 95       	ror	r20
    737e:	f7 94       	ror	r15
    7380:	e7 94       	ror	r14
    7382:	1a 95       	dec	r17
    7384:	c1 f7       	brne	.-16     	; 0x7376 <__ftoa_engine+0xe6>
    7386:	e2 ea       	ldi	r30, 0xA2	; 162
    7388:	f1 e0       	ldi	r31, 0x01	; 1
    738a:	68 94       	set
    738c:	15 90       	lpm	r1, Z+
    738e:	15 91       	lpm	r17, Z+
    7390:	35 91       	lpm	r19, Z+
    7392:	65 91       	lpm	r22, Z+
    7394:	95 91       	lpm	r25, Z+
    7396:	05 90       	lpm	r0, Z+
    7398:	7f e2       	ldi	r23, 0x2F	; 47
    739a:	73 95       	inc	r23
    739c:	e1 18       	sub	r14, r1
    739e:	f1 0a       	sbc	r15, r17
    73a0:	43 0b       	sbc	r20, r19
    73a2:	56 0b       	sbc	r21, r22
    73a4:	c9 0b       	sbc	r28, r25
    73a6:	d0 09       	sbc	r29, r0
    73a8:	c0 f7       	brcc	.-16     	; 0x739a <__ftoa_engine+0x10a>
    73aa:	e1 0c       	add	r14, r1
    73ac:	f1 1e       	adc	r15, r17
    73ae:	43 1f       	adc	r20, r19
    73b0:	56 1f       	adc	r21, r22
    73b2:	c9 1f       	adc	r28, r25
    73b4:	d0 1d       	adc	r29, r0
    73b6:	7e f4       	brtc	.+30     	; 0x73d6 <__ftoa_engine+0x146>
    73b8:	70 33       	cpi	r23, 0x30	; 48
    73ba:	11 f4       	brne	.+4      	; 0x73c0 <__ftoa_engine+0x130>
    73bc:	8a 95       	dec	r24
    73be:	e6 cf       	rjmp	.-52     	; 0x738c <__ftoa_engine+0xfc>
    73c0:	e8 94       	clt
    73c2:	01 50       	subi	r16, 0x01	; 1
    73c4:	30 f0       	brcs	.+12     	; 0x73d2 <__ftoa_engine+0x142>
    73c6:	08 0f       	add	r16, r24
    73c8:	0a f4       	brpl	.+2      	; 0x73cc <__ftoa_engine+0x13c>
    73ca:	00 27       	eor	r16, r16
    73cc:	02 17       	cp	r16, r18
    73ce:	08 f4       	brcc	.+2      	; 0x73d2 <__ftoa_engine+0x142>
    73d0:	20 2f       	mov	r18, r16
    73d2:	23 95       	inc	r18
    73d4:	02 2f       	mov	r16, r18
    73d6:	7a 33       	cpi	r23, 0x3A	; 58
    73d8:	28 f0       	brcs	.+10     	; 0x73e4 <__ftoa_engine+0x154>
    73da:	79 e3       	ldi	r23, 0x39	; 57
    73dc:	7d 93       	st	X+, r23
    73de:	2a 95       	dec	r18
    73e0:	e9 f7       	brne	.-6      	; 0x73dc <__ftoa_engine+0x14c>
    73e2:	10 c0       	rjmp	.+32     	; 0x7404 <__ftoa_engine+0x174>
    73e4:	7d 93       	st	X+, r23
    73e6:	2a 95       	dec	r18
    73e8:	89 f6       	brne	.-94     	; 0x738c <__ftoa_engine+0xfc>
    73ea:	06 94       	lsr	r0
    73ec:	97 95       	ror	r25
    73ee:	67 95       	ror	r22
    73f0:	37 95       	ror	r19
    73f2:	17 95       	ror	r17
    73f4:	17 94       	ror	r1
    73f6:	e1 18       	sub	r14, r1
    73f8:	f1 0a       	sbc	r15, r17
    73fa:	43 0b       	sbc	r20, r19
    73fc:	56 0b       	sbc	r21, r22
    73fe:	c9 0b       	sbc	r28, r25
    7400:	d0 09       	sbc	r29, r0
    7402:	98 f0       	brcs	.+38     	; 0x742a <__ftoa_engine+0x19a>
    7404:	23 95       	inc	r18
    7406:	7e 91       	ld	r23, -X
    7408:	73 95       	inc	r23
    740a:	7a 33       	cpi	r23, 0x3A	; 58
    740c:	08 f0       	brcs	.+2      	; 0x7410 <__ftoa_engine+0x180>
    740e:	70 e3       	ldi	r23, 0x30	; 48
    7410:	7c 93       	st	X, r23
    7412:	20 13       	cpse	r18, r16
    7414:	b8 f7       	brcc	.-18     	; 0x7404 <__ftoa_engine+0x174>
    7416:	7e 91       	ld	r23, -X
    7418:	70 61       	ori	r23, 0x10	; 16
    741a:	7d 93       	st	X+, r23
    741c:	30 f0       	brcs	.+12     	; 0x742a <__ftoa_engine+0x19a>
    741e:	83 95       	inc	r24
    7420:	71 e3       	ldi	r23, 0x31	; 49
    7422:	7d 93       	st	X+, r23
    7424:	70 e3       	ldi	r23, 0x30	; 48
    7426:	2a 95       	dec	r18
    7428:	e1 f7       	brne	.-8      	; 0x7422 <__ftoa_engine+0x192>
    742a:	11 24       	eor	r1, r1
    742c:	ef 90       	pop	r14
    742e:	ff 90       	pop	r15
    7430:	0f 91       	pop	r16
    7432:	1f 91       	pop	r17
    7434:	cf 91       	pop	r28
    7436:	df 91       	pop	r29
    7438:	99 27       	eor	r25, r25
    743a:	87 fd       	sbrc	r24, 7
    743c:	90 95       	com	r25
    743e:	08 95       	ret

00007440 <strnlen_P>:
    7440:	fc 01       	movw	r30, r24
    7442:	05 90       	lpm	r0, Z+
    7444:	61 50       	subi	r22, 0x01	; 1
    7446:	70 40       	sbci	r23, 0x00	; 0
    7448:	01 10       	cpse	r0, r1
    744a:	d8 f7       	brcc	.-10     	; 0x7442 <strnlen_P+0x2>
    744c:	80 95       	com	r24
    744e:	90 95       	com	r25
    7450:	8e 0f       	add	r24, r30
    7452:	9f 1f       	adc	r25, r31
    7454:	08 95       	ret

00007456 <memcpy>:
    7456:	fb 01       	movw	r30, r22
    7458:	dc 01       	movw	r26, r24
    745a:	02 c0       	rjmp	.+4      	; 0x7460 <memcpy+0xa>
    745c:	01 90       	ld	r0, Z+
    745e:	0d 92       	st	X+, r0
    7460:	41 50       	subi	r20, 0x01	; 1
    7462:	50 40       	sbci	r21, 0x00	; 0
    7464:	d8 f7       	brcc	.-10     	; 0x745c <memcpy+0x6>
    7466:	08 95       	ret

00007468 <memset>:
    7468:	dc 01       	movw	r26, r24
    746a:	01 c0       	rjmp	.+2      	; 0x746e <memset+0x6>
    746c:	6d 93       	st	X+, r22
    746e:	41 50       	subi	r20, 0x01	; 1
    7470:	50 40       	sbci	r21, 0x00	; 0
    7472:	e0 f7       	brcc	.-8      	; 0x746c <memset+0x4>
    7474:	08 95       	ret

00007476 <strcat>:
    7476:	fb 01       	movw	r30, r22
    7478:	dc 01       	movw	r26, r24
    747a:	0d 90       	ld	r0, X+
    747c:	00 20       	and	r0, r0
    747e:	e9 f7       	brne	.-6      	; 0x747a <strcat+0x4>
    7480:	11 97       	sbiw	r26, 0x01	; 1
    7482:	01 90       	ld	r0, Z+
    7484:	0d 92       	st	X+, r0
    7486:	00 20       	and	r0, r0
    7488:	e1 f7       	brne	.-8      	; 0x7482 <strcat+0xc>
    748a:	08 95       	ret

0000748c <strcpy>:
    748c:	fb 01       	movw	r30, r22
    748e:	dc 01       	movw	r26, r24
    7490:	01 90       	ld	r0, Z+
    7492:	0d 92       	st	X+, r0
    7494:	00 20       	and	r0, r0
    7496:	e1 f7       	brne	.-8      	; 0x7490 <strcpy+0x4>
    7498:	08 95       	ret

0000749a <strncasecmp>:
    749a:	fb 01       	movw	r30, r22
    749c:	dc 01       	movw	r26, r24
    749e:	41 50       	subi	r20, 0x01	; 1
    74a0:	50 40       	sbci	r21, 0x00	; 0
    74a2:	88 f0       	brcs	.+34     	; 0x74c6 <strncasecmp+0x2c>
    74a4:	8d 91       	ld	r24, X+
    74a6:	81 34       	cpi	r24, 0x41	; 65
    74a8:	1c f0       	brlt	.+6      	; 0x74b0 <strncasecmp+0x16>
    74aa:	8b 35       	cpi	r24, 0x5B	; 91
    74ac:	0c f4       	brge	.+2      	; 0x74b0 <strncasecmp+0x16>
    74ae:	80 5e       	subi	r24, 0xE0	; 224
    74b0:	61 91       	ld	r22, Z+
    74b2:	61 34       	cpi	r22, 0x41	; 65
    74b4:	1c f0       	brlt	.+6      	; 0x74bc <strncasecmp+0x22>
    74b6:	6b 35       	cpi	r22, 0x5B	; 91
    74b8:	0c f4       	brge	.+2      	; 0x74bc <strncasecmp+0x22>
    74ba:	60 5e       	subi	r22, 0xE0	; 224
    74bc:	86 1b       	sub	r24, r22
    74be:	61 11       	cpse	r22, r1
    74c0:	71 f3       	breq	.-36     	; 0x749e <strncasecmp+0x4>
    74c2:	99 0b       	sbc	r25, r25
    74c4:	08 95       	ret
    74c6:	88 1b       	sub	r24, r24
    74c8:	fc cf       	rjmp	.-8      	; 0x74c2 <strncasecmp+0x28>

000074ca <strnlen>:
    74ca:	fc 01       	movw	r30, r24
    74cc:	61 50       	subi	r22, 0x01	; 1
    74ce:	70 40       	sbci	r23, 0x00	; 0
    74d0:	01 90       	ld	r0, Z+
    74d2:	01 10       	cpse	r0, r1
    74d4:	d8 f7       	brcc	.-10     	; 0x74cc <strnlen+0x2>
    74d6:	80 95       	com	r24
    74d8:	90 95       	com	r25
    74da:	8e 0f       	add	r24, r30
    74dc:	9f 1f       	adc	r25, r31
    74de:	08 95       	ret

000074e0 <fputc>:
    74e0:	0f 93       	push	r16
    74e2:	1f 93       	push	r17
    74e4:	cf 93       	push	r28
    74e6:	df 93       	push	r29
    74e8:	fb 01       	movw	r30, r22
    74ea:	23 81       	ldd	r18, Z+3	; 0x03
    74ec:	21 fd       	sbrc	r18, 1
    74ee:	03 c0       	rjmp	.+6      	; 0x74f6 <fputc+0x16>
    74f0:	8f ef       	ldi	r24, 0xFF	; 255
    74f2:	9f ef       	ldi	r25, 0xFF	; 255
    74f4:	2c c0       	rjmp	.+88     	; 0x754e <fputc+0x6e>
    74f6:	22 ff       	sbrs	r18, 2
    74f8:	16 c0       	rjmp	.+44     	; 0x7526 <fputc+0x46>
    74fa:	46 81       	ldd	r20, Z+6	; 0x06
    74fc:	57 81       	ldd	r21, Z+7	; 0x07
    74fe:	24 81       	ldd	r18, Z+4	; 0x04
    7500:	35 81       	ldd	r19, Z+5	; 0x05
    7502:	42 17       	cp	r20, r18
    7504:	53 07       	cpc	r21, r19
    7506:	44 f4       	brge	.+16     	; 0x7518 <fputc+0x38>
    7508:	a0 81       	ld	r26, Z
    750a:	b1 81       	ldd	r27, Z+1	; 0x01
    750c:	9d 01       	movw	r18, r26
    750e:	2f 5f       	subi	r18, 0xFF	; 255
    7510:	3f 4f       	sbci	r19, 0xFF	; 255
    7512:	31 83       	std	Z+1, r19	; 0x01
    7514:	20 83       	st	Z, r18
    7516:	8c 93       	st	X, r24
    7518:	26 81       	ldd	r18, Z+6	; 0x06
    751a:	37 81       	ldd	r19, Z+7	; 0x07
    751c:	2f 5f       	subi	r18, 0xFF	; 255
    751e:	3f 4f       	sbci	r19, 0xFF	; 255
    7520:	37 83       	std	Z+7, r19	; 0x07
    7522:	26 83       	std	Z+6, r18	; 0x06
    7524:	14 c0       	rjmp	.+40     	; 0x754e <fputc+0x6e>
    7526:	8b 01       	movw	r16, r22
    7528:	ec 01       	movw	r28, r24
    752a:	fb 01       	movw	r30, r22
    752c:	00 84       	ldd	r0, Z+8	; 0x08
    752e:	f1 85       	ldd	r31, Z+9	; 0x09
    7530:	e0 2d       	mov	r30, r0
    7532:	19 95       	eicall
    7534:	89 2b       	or	r24, r25
    7536:	e1 f6       	brne	.-72     	; 0x74f0 <fputc+0x10>
    7538:	d8 01       	movw	r26, r16
    753a:	16 96       	adiw	r26, 0x06	; 6
    753c:	8d 91       	ld	r24, X+
    753e:	9c 91       	ld	r25, X
    7540:	17 97       	sbiw	r26, 0x07	; 7
    7542:	01 96       	adiw	r24, 0x01	; 1
    7544:	17 96       	adiw	r26, 0x07	; 7
    7546:	9c 93       	st	X, r25
    7548:	8e 93       	st	-X, r24
    754a:	16 97       	sbiw	r26, 0x06	; 6
    754c:	ce 01       	movw	r24, r28
    754e:	df 91       	pop	r29
    7550:	cf 91       	pop	r28
    7552:	1f 91       	pop	r17
    7554:	0f 91       	pop	r16
    7556:	08 95       	ret

00007558 <printf>:
    7558:	cf 93       	push	r28
    755a:	df 93       	push	r29
    755c:	cd b7       	in	r28, 0x3d	; 61
    755e:	de b7       	in	r29, 0x3e	; 62
    7560:	ae 01       	movw	r20, r28
    7562:	4a 5f       	subi	r20, 0xFA	; 250
    7564:	5f 4f       	sbci	r21, 0xFF	; 255
    7566:	fa 01       	movw	r30, r20
    7568:	61 91       	ld	r22, Z+
    756a:	71 91       	ld	r23, Z+
    756c:	af 01       	movw	r20, r30
    756e:	80 91 cc 09 	lds	r24, 0x09CC	; 0x8009cc <__iob+0x2>
    7572:	90 91 cd 09 	lds	r25, 0x09CD	; 0x8009cd <__iob+0x3>
    7576:	9a d9       	rcall	.-3276   	; 0x68ac <vfprintf>
    7578:	df 91       	pop	r29
    757a:	cf 91       	pop	r28
    757c:	08 95       	ret

0000757e <puts>:
    757e:	0f 93       	push	r16
    7580:	1f 93       	push	r17
    7582:	cf 93       	push	r28
    7584:	df 93       	push	r29
    7586:	e0 91 cc 09 	lds	r30, 0x09CC	; 0x8009cc <__iob+0x2>
    758a:	f0 91 cd 09 	lds	r31, 0x09CD	; 0x8009cd <__iob+0x3>
    758e:	23 81       	ldd	r18, Z+3	; 0x03
    7590:	21 ff       	sbrs	r18, 1
    7592:	1b c0       	rjmp	.+54     	; 0x75ca <puts+0x4c>
    7594:	8c 01       	movw	r16, r24
    7596:	d0 e0       	ldi	r29, 0x00	; 0
    7598:	c0 e0       	ldi	r28, 0x00	; 0
    759a:	f8 01       	movw	r30, r16
    759c:	81 91       	ld	r24, Z+
    759e:	8f 01       	movw	r16, r30
    75a0:	60 91 cc 09 	lds	r22, 0x09CC	; 0x8009cc <__iob+0x2>
    75a4:	70 91 cd 09 	lds	r23, 0x09CD	; 0x8009cd <__iob+0x3>
    75a8:	db 01       	movw	r26, r22
    75aa:	18 96       	adiw	r26, 0x08	; 8
    75ac:	ed 91       	ld	r30, X+
    75ae:	fc 91       	ld	r31, X
    75b0:	19 97       	sbiw	r26, 0x09	; 9
    75b2:	88 23       	and	r24, r24
    75b4:	31 f0       	breq	.+12     	; 0x75c2 <puts+0x44>
    75b6:	19 95       	eicall
    75b8:	89 2b       	or	r24, r25
    75ba:	79 f3       	breq	.-34     	; 0x759a <puts+0x1c>
    75bc:	df ef       	ldi	r29, 0xFF	; 255
    75be:	cf ef       	ldi	r28, 0xFF	; 255
    75c0:	ec cf       	rjmp	.-40     	; 0x759a <puts+0x1c>
    75c2:	8a e0       	ldi	r24, 0x0A	; 10
    75c4:	19 95       	eicall
    75c6:	89 2b       	or	r24, r25
    75c8:	19 f0       	breq	.+6      	; 0x75d0 <puts+0x52>
    75ca:	8f ef       	ldi	r24, 0xFF	; 255
    75cc:	9f ef       	ldi	r25, 0xFF	; 255
    75ce:	02 c0       	rjmp	.+4      	; 0x75d4 <puts+0x56>
    75d0:	8d 2f       	mov	r24, r29
    75d2:	9c 2f       	mov	r25, r28
    75d4:	df 91       	pop	r29
    75d6:	cf 91       	pop	r28
    75d8:	1f 91       	pop	r17
    75da:	0f 91       	pop	r16
    75dc:	08 95       	ret

000075de <sprintf>:
    75de:	0f 93       	push	r16
    75e0:	1f 93       	push	r17
    75e2:	cf 93       	push	r28
    75e4:	df 93       	push	r29
    75e6:	cd b7       	in	r28, 0x3d	; 61
    75e8:	de b7       	in	r29, 0x3e	; 62
    75ea:	2e 97       	sbiw	r28, 0x0e	; 14
    75ec:	0f b6       	in	r0, 0x3f	; 63
    75ee:	f8 94       	cli
    75f0:	de bf       	out	0x3e, r29	; 62
    75f2:	0f be       	out	0x3f, r0	; 63
    75f4:	cd bf       	out	0x3d, r28	; 61
    75f6:	0e 89       	ldd	r16, Y+22	; 0x16
    75f8:	1f 89       	ldd	r17, Y+23	; 0x17
    75fa:	86 e0       	ldi	r24, 0x06	; 6
    75fc:	8c 83       	std	Y+4, r24	; 0x04
    75fe:	1a 83       	std	Y+2, r17	; 0x02
    7600:	09 83       	std	Y+1, r16	; 0x01
    7602:	8f ef       	ldi	r24, 0xFF	; 255
    7604:	9f e7       	ldi	r25, 0x7F	; 127
    7606:	9e 83       	std	Y+6, r25	; 0x06
    7608:	8d 83       	std	Y+5, r24	; 0x05
    760a:	ae 01       	movw	r20, r28
    760c:	46 5e       	subi	r20, 0xE6	; 230
    760e:	5f 4f       	sbci	r21, 0xFF	; 255
    7610:	68 8d       	ldd	r22, Y+24	; 0x18
    7612:	79 8d       	ldd	r23, Y+25	; 0x19
    7614:	ce 01       	movw	r24, r28
    7616:	01 96       	adiw	r24, 0x01	; 1
    7618:	49 d9       	rcall	.-3438   	; 0x68ac <vfprintf>
    761a:	ef 81       	ldd	r30, Y+7	; 0x07
    761c:	f8 85       	ldd	r31, Y+8	; 0x08
    761e:	e0 0f       	add	r30, r16
    7620:	f1 1f       	adc	r31, r17
    7622:	10 82       	st	Z, r1
    7624:	2e 96       	adiw	r28, 0x0e	; 14
    7626:	0f b6       	in	r0, 0x3f	; 63
    7628:	f8 94       	cli
    762a:	de bf       	out	0x3e, r29	; 62
    762c:	0f be       	out	0x3f, r0	; 63
    762e:	cd bf       	out	0x3d, r28	; 61
    7630:	df 91       	pop	r29
    7632:	cf 91       	pop	r28
    7634:	1f 91       	pop	r17
    7636:	0f 91       	pop	r16
    7638:	08 95       	ret

0000763a <__ultoa_invert>:
    763a:	fa 01       	movw	r30, r20
    763c:	aa 27       	eor	r26, r26
    763e:	28 30       	cpi	r18, 0x08	; 8
    7640:	51 f1       	breq	.+84     	; 0x7696 <__ultoa_invert+0x5c>
    7642:	20 31       	cpi	r18, 0x10	; 16
    7644:	81 f1       	breq	.+96     	; 0x76a6 <__ultoa_invert+0x6c>
    7646:	e8 94       	clt
    7648:	6f 93       	push	r22
    764a:	6e 7f       	andi	r22, 0xFE	; 254
    764c:	6e 5f       	subi	r22, 0xFE	; 254
    764e:	7f 4f       	sbci	r23, 0xFF	; 255
    7650:	8f 4f       	sbci	r24, 0xFF	; 255
    7652:	9f 4f       	sbci	r25, 0xFF	; 255
    7654:	af 4f       	sbci	r26, 0xFF	; 255
    7656:	b1 e0       	ldi	r27, 0x01	; 1
    7658:	3e d0       	rcall	.+124    	; 0x76d6 <__ultoa_invert+0x9c>
    765a:	b4 e0       	ldi	r27, 0x04	; 4
    765c:	3c d0       	rcall	.+120    	; 0x76d6 <__ultoa_invert+0x9c>
    765e:	67 0f       	add	r22, r23
    7660:	78 1f       	adc	r23, r24
    7662:	89 1f       	adc	r24, r25
    7664:	9a 1f       	adc	r25, r26
    7666:	a1 1d       	adc	r26, r1
    7668:	68 0f       	add	r22, r24
    766a:	79 1f       	adc	r23, r25
    766c:	8a 1f       	adc	r24, r26
    766e:	91 1d       	adc	r25, r1
    7670:	a1 1d       	adc	r26, r1
    7672:	6a 0f       	add	r22, r26
    7674:	71 1d       	adc	r23, r1
    7676:	81 1d       	adc	r24, r1
    7678:	91 1d       	adc	r25, r1
    767a:	a1 1d       	adc	r26, r1
    767c:	20 d0       	rcall	.+64     	; 0x76be <__ultoa_invert+0x84>
    767e:	09 f4       	brne	.+2      	; 0x7682 <__ultoa_invert+0x48>
    7680:	68 94       	set
    7682:	3f 91       	pop	r19
    7684:	2a e0       	ldi	r18, 0x0A	; 10
    7686:	26 9f       	mul	r18, r22
    7688:	11 24       	eor	r1, r1
    768a:	30 19       	sub	r19, r0
    768c:	30 5d       	subi	r19, 0xD0	; 208
    768e:	31 93       	st	Z+, r19
    7690:	de f6       	brtc	.-74     	; 0x7648 <__ultoa_invert+0xe>
    7692:	cf 01       	movw	r24, r30
    7694:	08 95       	ret
    7696:	46 2f       	mov	r20, r22
    7698:	47 70       	andi	r20, 0x07	; 7
    769a:	40 5d       	subi	r20, 0xD0	; 208
    769c:	41 93       	st	Z+, r20
    769e:	b3 e0       	ldi	r27, 0x03	; 3
    76a0:	0f d0       	rcall	.+30     	; 0x76c0 <__ultoa_invert+0x86>
    76a2:	c9 f7       	brne	.-14     	; 0x7696 <__ultoa_invert+0x5c>
    76a4:	f6 cf       	rjmp	.-20     	; 0x7692 <__ultoa_invert+0x58>
    76a6:	46 2f       	mov	r20, r22
    76a8:	4f 70       	andi	r20, 0x0F	; 15
    76aa:	40 5d       	subi	r20, 0xD0	; 208
    76ac:	4a 33       	cpi	r20, 0x3A	; 58
    76ae:	18 f0       	brcs	.+6      	; 0x76b6 <__ultoa_invert+0x7c>
    76b0:	49 5d       	subi	r20, 0xD9	; 217
    76b2:	31 fd       	sbrc	r19, 1
    76b4:	40 52       	subi	r20, 0x20	; 32
    76b6:	41 93       	st	Z+, r20
    76b8:	02 d0       	rcall	.+4      	; 0x76be <__ultoa_invert+0x84>
    76ba:	a9 f7       	brne	.-22     	; 0x76a6 <__ultoa_invert+0x6c>
    76bc:	ea cf       	rjmp	.-44     	; 0x7692 <__ultoa_invert+0x58>
    76be:	b4 e0       	ldi	r27, 0x04	; 4
    76c0:	a6 95       	lsr	r26
    76c2:	97 95       	ror	r25
    76c4:	87 95       	ror	r24
    76c6:	77 95       	ror	r23
    76c8:	67 95       	ror	r22
    76ca:	ba 95       	dec	r27
    76cc:	c9 f7       	brne	.-14     	; 0x76c0 <__ultoa_invert+0x86>
    76ce:	00 97       	sbiw	r24, 0x00	; 0
    76d0:	61 05       	cpc	r22, r1
    76d2:	71 05       	cpc	r23, r1
    76d4:	08 95       	ret
    76d6:	9b 01       	movw	r18, r22
    76d8:	ac 01       	movw	r20, r24
    76da:	0a 2e       	mov	r0, r26
    76dc:	06 94       	lsr	r0
    76de:	57 95       	ror	r21
    76e0:	47 95       	ror	r20
    76e2:	37 95       	ror	r19
    76e4:	27 95       	ror	r18
    76e6:	ba 95       	dec	r27
    76e8:	c9 f7       	brne	.-14     	; 0x76dc <__ultoa_invert+0xa2>
    76ea:	62 0f       	add	r22, r18
    76ec:	73 1f       	adc	r23, r19
    76ee:	84 1f       	adc	r24, r20
    76f0:	95 1f       	adc	r25, r21
    76f2:	a0 1d       	adc	r26, r0
    76f4:	08 95       	ret

000076f6 <_exit>:
    76f6:	f8 94       	cli

000076f8 <__stop_program>:
    76f8:	ff cf       	rjmp	.-2      	; 0x76f8 <__stop_program>
